pub const ID_ARP_ID: u16 = 557;

pub const ID_ARP_LOCATION_INFO: u16 = 556;

pub const ID_ABORT_TRANSMISSION: u16 = 405;

pub const ID_ACTIVATED_CELLS_TO_BE_UPDATED_LIST: u16 = 288;

pub const ID_ACTIVATION_REQUEST_TYPE: u16 = 649;

pub const ID_ACTIVATION_TIME: u16 = 404;

pub const ID_ADDITIONAL_DUPLICATION_INDICATION: u16 = 372;

pub const ID_ADDITIONAL_PDCP_DUPLICATION_TNL_LIST: u16 = 370;

pub const ID_ADDITIONAL_RRM_PRIORITY_INDEX: u16 = 248;

pub const ID_ADDITIONAL_SIB_MESSAGE_LIST: u16 = 231;

pub const ID_AGGRESSORG_NB_SET_ID: u16 = 251;

pub const ID_ALTERNATIVE_QO_S_PARA_SET_LIST: u16 = 343;

pub const ID_AO_A_SEARCH_WINDOW: u16 = 552;

pub const ID_ASSOCIATED_S_CELL_ITEM: u16 = 200;

pub const ID_ASSOCIATED_S_CELL_LIST: u16 = 198;

pub const ID_AVAILABLE_PLMN_LIST: u16 = 179;

pub const ID_AVAILABLE_SNPN_ID_LIST: u16 = 386;

pub const ID_BAP_HEADER_REWRITING_ADDED_LIST: u16 = 514;

pub const ID_BAP_HEADER_REWRITING_ADDED_LIST_ITEM: u16 = 515;

pub const ID_BAP_HEADER_REWRITING_REMOVED_LIST: u16 = 641;

pub const ID_BAP_HEADER_REWRITING_REMOVED_LIST_ITEM: u16 = 642;

pub const ID_BAP_ADDRESS: u16 = 281;

pub const ID_BAP_MAPPING_CONFIGURATION: u8 = 32;

pub const ID_BH_ROUTING_INFORMATION_ADDED_LIST: u16 = 283;

pub const ID_BH_ROUTING_INFORMATION_ADDED_LIST_ITEM: u16 = 284;

pub const ID_BH_ROUTING_INFORMATION_REMOVED_LIST: u16 = 285;

pub const ID_BH_ROUTING_INFORMATION_REMOVED_LIST_ITEM: u16 = 286;

pub const ID_BH_CHANNELS_FAILED_TO_BE_MODIFIED_ITEM: u16 = 268;

pub const ID_BH_CHANNELS_FAILED_TO_BE_MODIFIED_LIST: u16 = 269;

pub const ID_BH_CHANNELS_FAILED_TO_BE_SETUP_ITEM: u16 = 278;

pub const ID_BH_CHANNELS_FAILED_TO_BE_SETUP_LIST: u16 = 279;

pub const ID_BH_CHANNELS_FAILED_TO_BE_SETUP_MOD_ITEM: u16 = 270;

pub const ID_BH_CHANNELS_FAILED_TO_BE_SETUP_MOD_LIST: u16 = 271;

pub const ID_BH_CHANNELS_MODIFIED_ITEM: u16 = 272;

pub const ID_BH_CHANNELS_MODIFIED_LIST: u16 = 273;

pub const ID_BH_CHANNELS_REQUIRED_TO_BE_RELEASED_ITEM: u16 = 276;

pub const ID_BH_CHANNELS_REQUIRED_TO_BE_RELEASED_LIST: u16 = 277;

pub const ID_BH_CHANNELS_SETUP_ITEM: u16 = 261;

pub const ID_BH_CHANNELS_SETUP_LIST: u16 = 260;

pub const ID_BH_CHANNELS_SETUP_MOD_ITEM: u16 = 274;

pub const ID_BH_CHANNELS_SETUP_MOD_LIST: u16 = 275;

pub const ID_BH_CHANNELS_TO_BE_MODIFIED_ITEM: u16 = 262;

pub const ID_BH_CHANNELS_TO_BE_MODIFIED_LIST: u16 = 263;

pub const ID_BH_CHANNELS_TO_BE_RELEASED_ITEM: u16 = 264;

pub const ID_BH_CHANNELS_TO_BE_RELEASED_LIST: u16 = 265;

pub const ID_BH_CHANNELS_TO_BE_SETUP_ITEM: u16 = 259;

pub const ID_BH_CHANNELS_TO_BE_SETUP_LIST: u16 = 258;

pub const ID_BH_CHANNELS_TO_BE_SETUP_MOD_ITEM: u16 = 266;

pub const ID_BH_CHANNELS_TO_BE_SETUP_MOD_LIST: u16 = 267;

pub const ID_BH_INFO: u16 = 280;

pub const ID_BPLMN_ID_INFO_LIST: u16 = 223;

pub const ID_BEARER_TYPE_CHANGE: u16 = 186;

pub const ID_BROADCAST_TO_BE_CANCELLED_ITEM: u16 = 149;

pub const ID_BROADCAST_TO_BE_CANCELLED_LIST: u16 = 148;

pub const ID_BROADCAST_AREA_SCOPE: u16 = 646;

pub const ID_BROADCAST_CONTEXT_MODIFICATION: u8 = 62;

pub const ID_BROADCAST_CONTEXT_RELEASE: u8 = 60;

pub const ID_BROADCAST_CONTEXT_RELEASE_REQUEST: u8 = 61;

pub const ID_BROADCAST_CONTEXT_SETUP: u8 = 59;

pub const ID_BROADCAST_MR_BS_FAILED_TO_BE_MODIFIED_ITEM: u16 = 459;

pub const ID_BROADCAST_MR_BS_FAILED_TO_BE_MODIFIED_LIST: u16 = 458;

pub const ID_BROADCAST_MR_BS_FAILED_TO_BE_SETUP_ITEM: u16 = 461;

pub const ID_BROADCAST_MR_BS_FAILED_TO_BE_SETUP_LIST: u16 = 460;

pub const ID_BROADCAST_MR_BS_FAILED_TO_BE_SETUP_MOD_ITEM: u16 = 463;

pub const ID_BROADCAST_MR_BS_FAILED_TO_BE_SETUP_MOD_LIST: u16 = 462;

pub const ID_BROADCAST_MR_BS_MODIFIED_ITEM: u16 = 465;

pub const ID_BROADCAST_MR_BS_MODIFIED_LIST: u16 = 464;

pub const ID_BROADCAST_MR_BS_SETUP_ITEM: u16 = 467;

pub const ID_BROADCAST_MR_BS_SETUP_LIST: u16 = 466;

pub const ID_BROADCAST_MR_BS_SETUP_MOD_ITEM: u16 = 469;

pub const ID_BROADCAST_MR_BS_SETUP_MOD_LIST: u16 = 468;

pub const ID_BROADCAST_MR_BS_TO_BE_MODIFIED_ITEM: u16 = 471;

pub const ID_BROADCAST_MR_BS_TO_BE_MODIFIED_LIST: u16 = 470;

pub const ID_BROADCAST_MR_BS_TO_BE_RELEASED_ITEM: u16 = 473;

pub const ID_BROADCAST_MR_BS_TO_BE_RELEASED_LIST: u16 = 472;

pub const ID_BROADCAST_MR_BS_TO_BE_SETUP_ITEM: u16 = 475;

pub const ID_BROADCAST_MR_BS_TO_BE_SETUP_LIST: u16 = 474;

pub const ID_BROADCAST_MR_BS_TO_BE_SETUP_MOD_ITEM: u16 = 477;

pub const ID_BROADCAST_MR_BS_TO_BE_SETUP_MOD_LIST: u16 = 476;

pub const ID_BUFFER_SIZE_THRESH: u16 = 512;

pub const ID_C_RNTI: u16 = 95;

pub const ID_CCO_ASSISTANCE_INFORMATION: u16 = 447;

pub const ID_CG_CONFIG: u16 = 234;

pub const ID_CG_SDT_KEPT_INDICATOR: u16 = 588;

pub const ID_CG_SDT_QUERY_INDICATION: u16 = 586;

pub const ID_CG_SDT_SESSION_INFO_OLD: u16 = 591;

pub const ID_CG_SD_TINDICATOR_MOD: u16 = 590;

pub const ID_CG_SD_TINDICATOR_SETUP: u16 = 589;

pub const ID_CN_PACKET_DELAY_BUDGET_DOWNLINK: u16 = 362;

pub const ID_CN_PACKET_DELAY_BUDGET_UPLINK: u16 = 369;

pub const ID_CNUE_PAGING_DRX: u16 = 581;

pub const ID_CUDU_RADIO_INFORMATION_TRANSFER: u8 = 31;

pub const ID_CUDU_RADIO_INFORMATION_TYPE: u16 = 250;

pub const ID_C_UTO_DURRC_INFORMATION: u16 = 9;

pub const ID_CANCEL_ALL_WARNING_MESSAGES_INDICATOR: u16 = 157;

pub const ID_CANDIDATE_SP_CELL_ITEM: u16 = 91;

pub const ID_CANDIDATE_SP_CELL_LIST: u16 = 90;

pub const ID_CARRIER_LIST: u16 = 354;

pub const ID_CAUSE: u16 = 0;

pub const ID_CELL_DIRECTION: u16 = 201;

pub const ID_CELL_PORTION_ID: u16 = 418;

pub const ID_CELL_TYPE: u16 = 232;

pub const ID_CELL_GROUP_CONFIG: u16 = 173;

pub const ID_CELL_MEASUREMENT_RESULT_LIST: u16 = 350;

pub const ID_CELL_TO_REPORT_LIST: u16 = 349;

pub const ID_CELLS_BROADCAST_CANCELLED_ITEM: u16 = 151;

pub const ID_CELLS_BROADCAST_CANCELLED_LIST: u16 = 150;

pub const ID_CELLS_BROADCAST_COMPLETED_ITEM: u16 = 147;

pub const ID_CELLS_BROADCAST_COMPLETED_LIST: u16 = 146;

pub const ID_CELLS_FAILED_TO_BE_ACTIVATED_LIST: u16 = 1;

pub const ID_CELLS_FAILED_TO_BE_ACTIVATED_LIST_ITEM: u16 = 2;

pub const ID_CELLS_STATUS_ITEM: u16 = 88;

pub const ID_CELLS_STATUS_LIST: u16 = 89;

pub const ID_CELLS_TO_BE_BROADCAST_ITEM: u16 = 145;

pub const ID_CELLS_TO_BE_BROADCAST_LIST: u16 = 144;

pub const ID_CELLS_TO_BE_ACTIVATED_LIST: u16 = 3;

pub const ID_CELLS_TO_BE_ACTIVATED_LIST_ITEM: u16 = 4;

pub const ID_CELLS_TO_BE_BARRED_ITEM: u16 = 130;

pub const ID_CELLS_TO_BE_BARRED_LIST: u16 = 129;

pub const ID_CELLS_TO_BE_DEACTIVATED_LIST: u16 = 5;

pub const ID_CELLS_TO_BE_DEACTIVATED_LIST_ITEM: u16 = 6;

pub const ID_CELLS_FOR_SON_LIST: u16 = 449;

pub const ID_CHILD_NODES_LIST: u16 = 289;

pub const ID_COMPOSITE_AVAILABLE_CAPACITY_SUL: u16 = 442;

pub const ID_CONDITIONAL_INTER_DU_MOBILITY_INFORMATION: u16 = 373;

pub const ID_CONDITIONAL_INTRA_DU_MOBILITY_INFORMATION: u16 = 374;

pub const ID_CONFIGURED_BAP_ADDRESS: u16 = 282;

pub const ID_CONFIGURED_TAC_INDICATION: u16 = 425;

pub const ID_CONFIRMED_UEID: u16 = 156;

pub const ID_COVERAGE_MODIFICATION_NOTIFICATION: u16 = 446;

pub const ID_CRITICALITY_DIAGNOSTICS: u16 = 7;

pub const ID_CURRENT_QO_S_PARA_SET_INDEX: u16 = 344;

pub const ID_DC_BASED_DUPLICATION_ACTIVATION: u16 = 177;

pub const ID_DC_BASED_DUPLICATION_CONFIGURED: u16 = 176;

pub const ID_DL_UP_TNL_ADDRESS_TO_UPDATE_LIST: u16 = 304;

pub const ID_DL_UP_TNL_ADDRESS_TO_UPDATE_LIST_ITEM: u16 = 305;

pub const ID_DL_CARRIER_LIST: u16 = 389;

pub const ID_DLPDCPSN_LENGTH: u16 = 161;

pub const ID_DLRRC_MESSAGE_TRANSFER: u8 = 12;

pub const ID_DRB_ACTIVITY_ITEM: u16 = 99;

pub const ID_DRB_ACTIVITY_LIST: u16 = 100;

pub const ID_DRB_INFORMATION: u16 = 164;

pub const ID_DRB_NOTIFY_ITEM: u16 = 136;

pub const ID_DRB_NOTIFY_LIST: u16 = 137;

pub const ID_DRB_MAPPING_INFO: u16 = 598;

pub const ID_DR_BS_FAILED_TO_BE_MODIFIED_ITEM: u16 = 12;

pub const ID_DR_BS_FAILED_TO_BE_MODIFIED_LIST: u16 = 13;

pub const ID_DR_BS_FAILED_TO_BE_SETUP_ITEM: u16 = 14;

pub const ID_DR_BS_FAILED_TO_BE_SETUP_LIST: u16 = 15;

pub const ID_DR_BS_FAILED_TO_BE_SETUP_MOD_ITEM: u16 = 16;

pub const ID_DR_BS_FAILED_TO_BE_SETUP_MOD_LIST: u16 = 17;

pub const ID_DR_BS_MODIFIED_ITEM: u16 = 20;

pub const ID_DR_BS_MODIFIED_LIST: u16 = 21;

pub const ID_DR_BS_MODIFIED_CONF_ITEM: u16 = 18;

pub const ID_DR_BS_MODIFIED_CONF_LIST: u16 = 19;

pub const ID_DR_BS_REQUIRED_TO_BE_MODIFIED_ITEM: u16 = 22;

pub const ID_DR_BS_REQUIRED_TO_BE_MODIFIED_LIST: u16 = 23;

pub const ID_DR_BS_REQUIRED_TO_BE_RELEASED_ITEM: u16 = 24;

pub const ID_DR_BS_REQUIRED_TO_BE_RELEASED_LIST: u16 = 25;

pub const ID_DR_BS_SETUP_ITEM: u16 = 26;

pub const ID_DR_BS_SETUP_LIST: u16 = 27;

pub const ID_DR_BS_SETUP_MOD_ITEM: u16 = 28;

pub const ID_DR_BS_SETUP_MOD_LIST: u16 = 29;

pub const ID_DR_BS_TO_BE_MODIFIED_ITEM: u16 = 30;

pub const ID_DR_BS_TO_BE_MODIFIED_LIST: u16 = 31;

pub const ID_DR_BS_TO_BE_RELEASED_ITEM: u16 = 32;

pub const ID_DR_BS_TO_BE_RELEASED_LIST: u16 = 33;

pub const ID_DR_BS_TO_BE_SETUP_ITEM: u16 = 34;

pub const ID_DR_BS_TO_BE_SETUP_LIST: u16 = 35;

pub const ID_DR_BS_TO_BE_SETUP_MOD_ITEM: u16 = 36;

pub const ID_DR_BS_TO_BE_SETUP_MOD_LIST: u16 = 37;

pub const ID_DRX_CONFIG: u16 = 212;

pub const ID_DRX_LONG_CYCLE_START_OFFSET: u16 = 191;

pub const ID_DRX_CONFIGURATION_INDICATOR: u16 = 159;

pub const ID_DRX_CYCLE: u16 = 38;

pub const ID_DU_RX_MT_RX_EXTEND: u16 = 637;

pub const ID_DU_RX_MT_TX_EXTEND: u16 = 639;

pub const ID_DU_TX_MT_RX_EXTEND: u16 = 640;

pub const ID_DU_TX_MT_TX_EXTEND: u16 = 638;

pub const ID_DUCU_RADIO_INFORMATION_TRANSFER: u8 = 30;

pub const ID_DUCU_RADIO_INFORMATION_TYPE: u16 = 249;

pub const ID_D_UTO_CURRC_CONTAINER: u16 = 128;

pub const ID_D_UTO_CURRC_INFORMATION: u16 = 39;

pub const ID_DEACTIVATE_TRACE: u8 = 29;

pub const ID_DEDICATED_SI_DELIVERY_NEEDED_UE_ITEM: u16 = 190;

pub const ID_DEDICATED_SI_DELIVERY_NEEDED_UE_LIST: u16 = 189;

pub const ID_DUPLICATION_ACTIVATION: u16 = 188;

pub const ID_E_CID_MEASUREMENT_PERIODICITY: u16 = 416;

pub const ID_E_CID_MEASUREMENT_QUANTITIES: u16 = 414;

pub const ID_E_CID_MEASUREMENT_QUANTITIES_ITEM: u16 = 415;

pub const ID_E_CID_MEASUREMENT_RESULT: u16 = 417;

pub const ID_E_CID_REPORT_CHARACTERISTICS: u16 = 424;

pub const ID_E_CID_MEASUREMENT_FAILURE_INDICATION: u8 = 53;

pub const ID_E_CID_MEASUREMENT_INITIATION: u8 = 52;

pub const ID_E_CID_MEASUREMENT_REPORT: u8 = 54;

pub const ID_E_CID_MEASUREMENT_TERMINATION: u8 = 55;

pub const ID_ENBDLTNL_ADDRESS: u16 = 437;

pub const ID_EUTRA_NR_CELL_RESOURCE_COORDINATION_REQ_CONTAINER: u16 = 101;

pub const ID_EUTRA_NR_CELL_RESOURCE_COORDINATION_REQ_ACK_CONTAINER: u16 = 102;

pub const ID_EGRESS_NON_F1TERMINATING_TOPOLOGY_INDICATOR: u16 = 518;

pub const ID_ERROR_INDICATION: u8 = 2;

pub const ID_ESTIMATED_ARRIVAL_PROBABILITY: u16 = 433;

pub const ID_EXECUTE_DUPLICATION: u16 = 109;

pub const ID_EXTENDED_GNB_CU_NAME: u16 = 426;

pub const ID_EXTENDED_GNB_DU_NAME: u16 = 427;

pub const ID_EXTENDED_ADDITIONAL_PATH_LIST: u16 = 561;

pub const ID_EXTENDED_AVAILABLE_PLMN_LIST: u16 = 197;

pub const ID_EXTENDED_PACKET_DELAY_BUDGET: u16 = 363;

pub const ID_EXTENDED_SERVED_PLM_NS_LIST: u16 = 196;

pub const ID_EXTENDED_TAI_SLICE_SUPPORT_LIST: u16 = 390;

pub const ID_F1C_TRANSFER_PATH: u16 = 428;

pub const ID_F1C_TRANSFER_PATH_NRDC: u16 = 511;

pub const ID_F1_REMOVAL: u8 = 26;

pub const ID_F1_SETUP: u8 = 1;

pub const ID_FIVE_G_PRO_SE_AUTHORIZED: u16 = 594;

pub const ID_FIVE_G_PRO_SE_PC5_LINK_AMBR: u16 = 596;

pub const ID_FIVE_G_PRO_SE_UEPC5_AGGREGATE_MAXIMUM_BITRATE: u16 = 595;

pub const ID_FREQUENCY_SHIFT7P5KHZ: u16 = 356;

pub const ID_FULL_CONFIGURATION: u16 = 94;

pub const ID_GNB_CU_RRC_VERSION: u16 = 170;

pub const ID_GNB_CU_TNL_ASSOCIATION_FAILED_TO_SETUP_ITEM: u16 = 135;

pub const ID_GNB_CU_TNL_ASSOCIATION_FAILED_TO_SETUP_LIST: u16 = 134;

pub const ID_GNB_CU_TNL_ASSOCIATION_SETUP_ITEM: u16 = 133;

pub const ID_GNB_CU_TNL_ASSOCIATION_SETUP_LIST: u16 = 132;

pub const ID_GNB_CU_TNL_ASSOCIATION_TO_ADD_ITEM: u16 = 120;

pub const ID_GNB_CU_TNL_ASSOCIATION_TO_ADD_LIST: u16 = 121;

pub const ID_GNB_CU_TNL_ASSOCIATION_TO_REMOVE_ITEM: u16 = 122;

pub const ID_GNB_CU_TNL_ASSOCIATION_TO_REMOVE_LIST: u16 = 123;

pub const ID_GNB_CU_TNL_ASSOCIATION_TO_UPDATE_ITEM: u16 = 124;

pub const ID_GNB_CU_TNL_ASSOCIATION_TO_UPDATE_LIST: u16 = 125;

pub const ID_GNB_DU_RRC_VERSION: u16 = 171;

pub const ID_GNB_DU_SERVED_CELLS_ITEM: u16 = 43;

pub const ID_GNB_DU_TNL_ASSOCIATION_TO_REMOVE_ITEM: u16 = 227;

pub const ID_GNB_DU_TNL_ASSOCIATION_TO_REMOVE_LIST: u16 = 228;

pub const ID_GNB_DU_UE_AMBR_UL: u16 = 158;

pub const ID_GNB_DU_CONFIGURATION_QUERY: u16 = 162;

pub const ID_GNBDU_OVERLOAD_INFORMATION: u16 = 172;

pub const ID_GNBDU_RESOURCE_CONFIGURATION: u8 = 33;

pub const ID_GNBDU_RESOURCE_COORDINATION: u8 = 16;

pub const ID_GNBDU_STATUS_INDICATION: u8 = 24;

pub const ID_GNBDUUE_SLICE_MAXIMUM_BIT_RATE_LIST: u16 = 626;

pub const ID_HANDOVER_PREPARATION_INFORMATION: u16 = 119;

pub const ID_HARDWARE_LOAD_INDICATOR: u16 = 351;

pub const ID_IAB_ALLOCATED_TNL_ADDRESS_ITEM: u16 = 295;

pub const ID_IAB_ALLOCATED_TNL_ADDRESS_LIST: u16 = 294;

pub const ID_IAB_BARRED: u16 = 298;

pub const ID_IAB_INFO_IAB_DU: u16 = 290;

pub const ID_IAB_INFO_IAB_DONOR_CU: u16 = 291;

pub const ID_IAB_TNL_ADDRESSES_EXCEPTION: u16 = 513;

pub const ID_IAB_TNL_ADDRESSES_TO_REMOVE_ITEM: u16 = 293;

pub const ID_IAB_TNL_ADDRESSES_TO_REMOVE_LIST: u16 = 292;

pub const ID_IAB_CONDITIONAL_RRC_MESSAGE_DELIVERY_INDICATION: u16 = 510;

pub const ID_IAB_CONGESTION_INDICATION: u16 = 509;

pub const ID_IABI_PV6_REQUEST_TYPE: u16 = 296;

pub const ID_IABTNL_ADDRESS_ALLOCATION: u8 = 34;

pub const ID_IABUP_CONFIGURATION_UPDATE: u8 = 35;

pub const ID_IA_BV4_ADDRESSES_REQUESTED: u16 = 297;

pub const ID_IGNORE_PRACH_CONFIGURATION: u16 = 233;

pub const ID_IGNORE_RESOURCE_COORDINATION_CONTAINER: u16 = 213;

pub const ID_INACTIVITY_MONITORING_REQUEST: u16 = 97;

pub const ID_INACTIVITY_MONITORING_RESPONSE: u16 = 98;

pub const ID_INGRESS_NON_F1TERMINATING_TOPOLOGY_INDICATOR: u16 = 519;

pub const ID_INITIAL_ULRRC_MESSAGE_TRANSFER: u8 = 11;

pub const ID_INTENDED_TDD_DL_UL_CONFIG: u16 = 256;

pub const ID_INTER_FREQUENCY_CONFIG_NO_GAP: u16 = 651;

pub const ID_L1151_INFO: u16 = 660;

pub const ID_L571_INFO: u16 = 659;

pub const ID_LMF_MEASUREMENT_ID: u16 = 402;

pub const ID_LMF_UE_MEASUREMENT_ID: u16 = 412;

pub const ID_LTEUE_SIDELINK_AGGREGATE_MAXIMUM_BITRATE: u16 = 309;

pub const ID_LTEV2X_SERVICES_AUTHORIZED: u16 = 307;

pub const ID_LAST_USED_CELL_INDICATION: u16 = 624;

pub const ID_LO_S_N_LO_S_INFORMATION: u16 = 562;

pub const ID_LOCATION_MEASUREMENT_INFORMATION: u16 = 440;

pub const ID_LOWER_LAYER_PRESENCE_STATUS_CHANGE: u16 = 253;

pub const ID_M5_REPORT_AMOUNT: u16 = 537;

pub const ID_M6_REPORT_AMOUNT: u16 = 538;

pub const ID_M7_REPORT_AMOUNT: u16 = 539;

pub const ID_MBS_AREA_SESSION_ID: u16 = 453;

pub const ID_MBS_BROADCAST_NEIGHBOUR_CELL_LIST: u16 = 457;

pub const ID_MBS_C_UTO_DURRC_INFORMATION: u16 = 454;

pub const ID_MBS_SERVICE_AREA: u16 = 481;

pub const ID_MBS_SESSION_ID: u16 = 455;

pub const ID_MBS_INTEREST_INDICATION: u16 = 652;

pub const ID_MBS_MULTICAST_F1U_CONTEXT_DESCRIPTOR: u16 = 502;

pub const ID_MDT_POLLUTED_MEASUREMENT_INDICATOR: u16 = 536;

pub const ID_MIMOPR_BUSAGE_INFORMATION: u16 = 450;

pub const ID_MUSIM_GAP_CONFIG: u16 = 621;

pub const ID_MANAGEMENT_BASED_MDTPLMN_LIST: u16 = 377;

pub const ID_MANAGEMENT_BASED_MDTPLMN_MODIFICATION_LIST: u16 = 647;

pub const ID_MASKED_IMEISV: u16 = 126;

pub const ID_MEAS_GAP_SHARING_CONFIG: u16 = 238;

pub const ID_MEASUREMENT_BEAM_INFO_REQUEST: u16 = 423;

pub const ID_MEASUREMENT_CHARACTERISTICS_REQUEST_INDICATOR: u16 = 574;

pub const ID_MEASUREMENT_TIME_OCCASION: u16 = 573;

pub const ID_MEASUREMENT_TIMING_CONFIGURATION: u16 = 163;

pub const ID_MULTICAST_CONTEXT_MODIFICATION: u8 = 67;

pub const ID_MULTICAST_CONTEXT_RELEASE: u8 = 65;

pub const ID_MULTICAST_CONTEXT_RELEASE_REQUEST: u8 = 66;

pub const ID_MULTICAST_CONTEXT_SETUP: u8 = 64;

pub const ID_MULTICAST_DISTRIBUTION_RELEASE: u8 = 69;

pub const ID_MULTICAST_DISTRIBUTION_SETUP: u8 = 68;

pub const ID_MULTICAST_F1U_CONTEXT_FAILED_TO_BE_SETUP_ITEM: u16 = 508;

pub const ID_MULTICAST_F1U_CONTEXT_FAILED_TO_BE_SETUP_LIST: u16 = 507;

pub const ID_MULTICAST_F1U_CONTEXT_SETUP_ITEM: u16 = 506;

pub const ID_MULTICAST_F1U_CONTEXT_SETUP_LIST: u16 = 505;

pub const ID_MULTICAST_F1U_CONTEXT_TO_BE_SETUP_ITEM: u16 = 504;

pub const ID_MULTICAST_F1U_CONTEXT_TO_BE_SETUP_LIST: u16 = 503;

pub const ID_MULTICAST_GROUP_PAGING: u8 = 63;

pub const ID_MULTICAST_MBS_SESSION_REMOVE_LIST: u16 = 633;

pub const ID_MULTICAST_MBS_SESSION_SETUP_LIST: u16 = 632;

pub const ID_MULTICAST_MR_BS_FAILED_TO_BE_MODIFIED_ITEM: u16 = 483;

pub const ID_MULTICAST_MR_BS_FAILED_TO_BE_MODIFIED_LIST: u16 = 482;

pub const ID_MULTICAST_MR_BS_FAILED_TO_BE_SETUP_ITEM: u16 = 485;

pub const ID_MULTICAST_MR_BS_FAILED_TO_BE_SETUP_LIST: u16 = 484;

pub const ID_MULTICAST_MR_BS_FAILED_TO_BE_SETUP_MOD_ITEM: u16 = 487;

pub const ID_MULTICAST_MR_BS_FAILED_TO_BE_SETUP_MOD_LIST: u16 = 486;

pub const ID_MULTICAST_MR_BS_MODIFIED_ITEM: u16 = 489;

pub const ID_MULTICAST_MR_BS_MODIFIED_LIST: u16 = 488;

pub const ID_MULTICAST_MR_BS_SETUP_ITEM: u16 = 491;

pub const ID_MULTICAST_MR_BS_SETUP_LIST: u16 = 490;

pub const ID_MULTICAST_MR_BS_SETUP_MOD_ITEM: u16 = 493;

pub const ID_MULTICAST_MR_BS_SETUP_MOD_LIST: u16 = 492;

pub const ID_MULTICAST_MR_BS_TO_BE_MODIFIED_ITEM: u16 = 495;

pub const ID_MULTICAST_MR_BS_TO_BE_MODIFIED_LIST: u16 = 494;

pub const ID_MULTICAST_MR_BS_TO_BE_RELEASED_ITEM: u16 = 497;

pub const ID_MULTICAST_MR_BS_TO_BE_RELEASED_LIST: u16 = 496;

pub const ID_MULTICAST_MR_BS_TO_BE_SETUP_ITEM: u16 = 499;

pub const ID_MULTICAST_MR_BS_TO_BE_SETUP_LIST: u16 = 498;

pub const ID_MULTICAST_MR_BS_TO_BE_SETUP_MOD_ITEM: u16 = 501;

pub const ID_MULTICAST_MR_BS_TO_BE_SETUP_MOD_LIST: u16 = 500;

pub const ID_MULTIPLE_UL_AO_A: u16 = 558;

pub const ID_NID: u16 = 385;

pub const ID_NPN_BROADCAST_INFORMATION: u16 = 383;

pub const ID_NPN_SUPPORT_INFO: u16 = 384;

pub const ID_NR_CGI_LIST_FOR_RESTART_ITEM: u16 = 153;

pub const ID_NR_CGI_LIST_FOR_RESTART_LIST: u16 = 152;

pub const ID_NR_TADV: u16 = 584;

pub const ID_NR_U: u16 = 445;

pub const ID_NR_U_CHANNEL_LIST: u16 = 444;

pub const ID_NRCGI: u16 = 111;

pub const ID_NR_CELL_ID: u16 = 46;

pub const ID_NRPRACH_CONFIG: u16 = 358;

pub const ID_NR_PAGINGE_DRX_INFORMATION: u16 = 582;

pub const ID_NR_PAGINGE_DRX_INFORMATIONFOR_RRCINACTIVE: u16 = 583;

pub const ID_NR_RED_CAP_UE_INDICATION: u16 = 578;

pub const ID_NRUE_SIDELINK_AGGREGATE_MAXIMUM_BITRATE: u16 = 308;

pub const ID_NRV2X_SERVICES_AUTHORIZED: u16 = 306;

pub const ID_NEED_FOR_GAP_NCSG_INFO_EUTRA: u16 = 667;

pub const ID_NEED_FOR_GAP_NCSG_INFO_NR: u16 = 666;

pub const ID_NEED_FOR_GAPS_INFO_NR: u16 = 665;

pub const ID_NEEDFOR_GAP: u16 = 215;

pub const ID_NEIGHBOR_NODE_CCO_ASSISTANCE_INFORMATION_LIST: u16 = 448;

pub const ID_NEIGHBOUR_CELL_INFORMATION_ITEM: u16 = 255;

pub const ID_NEIGHBOUR_CELL_INFORMATION_LIST: u16 = 244;

pub const ID_NEIGHBOUR_NODE_CELLS_LIST: u16 = 533;

pub const ID_NETWORK_ACCESS_RATE_REDUCTION: u8 = 27;

pub const ID_NON_F1TERMINATING_TOPOLOGY_INDICATOR: u16 = 517;

pub const ID_NOTFICATION_CONTROL: u16 = 138;

pub const ID_NOTIFICATION_INFORMATION: u16 = 220;

pub const ID_NOTIFY: u8 = 19;

pub const ID_NUM_DLUL_SYMBOLS: u16 = 247;

pub const ID_NUMBER_OF_TRP_RX_TEG: u16 = 564;

pub const ID_NUMBER_OF_TRP_RX_TX_TEG: u16 = 565;

pub const ID_NUMBEROF_BROADCAST_REQUEST: u16 = 142;

pub const ID_ON_DEMAND_PRS: u16 = 551;

pub const ID_PC5_LINK_AMBR: u16 = 340;

pub const ID_PC5RLC_CHANNEL_FAILED_TO_BE_MODIFIED_LIST: u16 = 613;

pub const ID_PC5RLC_CHANNEL_FAILED_TO_BE_SETUP_LIST: u16 = 612;

pub const ID_PC5RLC_CHANNEL_MODIFIED_LIST: u16 = 616;

pub const ID_PC5RLC_CHANNEL_REQUIRED_TO_BE_MODIFIED_LIST: u16 = 614;

pub const ID_PC5RLC_CHANNEL_REQUIRED_TO_BE_RELEASED_LIST: u16 = 615;

pub const ID_PC5RLC_CHANNEL_SETUP_LIST: u16 = 611;

pub const ID_PC5RLC_CHANNEL_TO_BE_MODIFIED_LIST: u16 = 609;

pub const ID_PC5RLC_CHANNEL_TO_BE_RELEASED_LIST: u16 = 610;

pub const ID_PC5RLC_CHANNEL_TO_BE_SETUP_LIST: u16 = 608;

pub const ID_PDCCH_BLIND_DETECTION_SCG: u16 = 235;

pub const ID_PDC_MEASUREMENT_FAILURE_INDICATION: u8 = 80;

pub const ID_PDC_MEASUREMENT_INITIATION: u8 = 70;

pub const ID_PDC_MEASUREMENT_INITIATION_FAILURE: u8 = 74;

pub const ID_PDC_MEASUREMENT_INITIATION_REQUEST: u8 = 72;

pub const ID_PDC_MEASUREMENT_INITIATION_RESPONSE: u8 = 73;

pub const ID_PDC_MEASUREMENT_PERIODICITY: u16 = 541;

pub const ID_PDC_MEASUREMENT_QUANTITIES: u16 = 542;

pub const ID_PDC_MEASUREMENT_QUANTITIES_ITEM: u16 = 543;

pub const ID_PDC_MEASUREMENT_REPORT: u8 = 71;

pub const ID_PDC_MEASUREMENT_RESULT: u16 = 544;

pub const ID_PDC_MEASUREMENT_TERMINATION_COMMAND: u8 = 79;

pub const ID_PDCP_TERMINATING_NODE_DLTNL_ADDR_INFO: u16 = 436;

pub const ID_PDC_REPORT_TYPE: u16 = 545;

pub const ID_PDU_SESSION_ID: u16 = 180;

pub const ID_PEIPS_ASSISTANCE_INFO: u16 = 622;

pub const ID_PEI_SUBGROUPING_SUPPORT_INDICATION: u16 = 664;

pub const ID_PLMN_ASSISTANCE_INFO_FOR_NET_SHAR: u16 = 221;

pub const ID_PRS_MEASUREMENT_INFO_LIST: u16 = 570;

pub const ID_PRS_RESOURCE_ID: u16 = 439;

pub const ID_PRS_CONFIG_REQUEST_TYPE: u16 = 571;

pub const ID_PRSTRP_LIST: u16 = 549;

pub const ID_PRS_TRANSMISSION_TRP_LIST: u16 = 550;

pub const ID_PWS_FAILED_NR_CGI_ITEM: u16 = 155;

pub const ID_PWS_FAILED_NR_CGI_LIST: u16 = 154;

pub const ID_PWS_CANCEL: u8 = 21;

pub const ID_PWS_FAILURE_INDICATION: u8 = 23;

pub const ID_PWS_RESTART_INDICATION: u8 = 22;

pub const ID_PWS_SYSTEM_INFORMATION: u16 = 140;

pub const ID_PAGING: u8 = 18;

pub const ID_PAGING_CAUSE: u16 = 620;

pub const ID_PAGING_CELL_ITEM: u16 = 112;

pub const ID_PAGING_CELL_LIST: u16 = 113;

pub const ID_PAGING_DRX: u16 = 114;

pub const ID_PAGING_IDENTITY: u16 = 127;

pub const ID_PAGING_ORIGIN: u16 = 216;

pub const ID_PAGING_PRIORITY: u16 = 115;

pub const ID_PARENT_IAB_NODES_NA_RESOURCE_CONFIGURATION_LIST: u16 = 523;

pub const ID_PATH_SWITCH_CONFIGURATION: u16 = 619;

pub const ID_PH_INFO_MCG: u16 = 237;

pub const ID_PH_INFO_SCG: u16 = 208;

pub const ID_POS_ASSISTANCE_INFORMATION: u16 = 392;

pub const ID_POS_ASSISTANCE_INFORMATION_FAILURE_LIST: u16 = 395;

pub const ID_POS_BROADCAST: u16 = 393;

pub const ID_POS_CONEXT_REV_INDICATION: u16 = 576;

pub const ID_POS_MEAS_GAP_PRE_CONFIG_LIST: u16 = 650;

pub const ID_POS_MEASUREMENT_AMOUNT: u16 = 634;

pub const ID_POS_MEASUREMENT_PERIODICITY: u16 = 409;

pub const ID_POS_MEASUREMENT_PERIODICITY_EXTENDED: u16 = 438;

pub const ID_POS_MEASUREMENT_PERIODICITY_NR_AO_A: u16 = 672;

pub const ID_POS_MEASUREMENT_QUANTITIES: u16 = 396;

pub const ID_POS_MEASUREMENT_RESULT_LIST: u16 = 397;

pub const ID_POS_REPORT_CHARACTERISTICS: u16 = 408;

pub const ID_POSITIONING_ACTIVATION: u8 = 50;

pub const ID_POSITIONING_ASSISTANCE_INFORMATION_CONTROL: u8 = 42;

pub const ID_POSITIONING_ASSISTANCE_INFORMATION_FEEDBACK: u8 = 43;

pub const ID_POSITIONING_BROADCAST_CELLS: u16 = 406;

pub const ID_POSITIONING_DEACTIVATION: u8 = 51;

pub const ID_POSITIONING_INFORMATION_EXCHANGE: u8 = 49;

pub const ID_POSITIONING_INFORMATION_UPDATE: u8 = 56;

pub const ID_POSITIONING_MEASUREMENT_ABORT: u8 = 45;

pub const ID_POSITIONING_MEASUREMENT_EXCHANGE: u8 = 41;

pub const ID_POSITIONING_MEASUREMENT_FAILURE_INDICATION: u8 = 46;

pub const ID_POSITIONING_MEASUREMENT_REPORT: u8 = 44;

pub const ID_POSITIONING_MEASUREMENT_UPDATE: u8 = 47;

pub const ID_POTENTIAL_SP_CELL_ITEM: u16 = 93;

pub const ID_POTENTIAL_SP_CELL_LIST: u16 = 92;

pub const ID_PRIVACY_INDICATOR: u16 = 379;

pub const ID_PROTECTED_EUTRA_RESOURCES_ITEM: u16 = 168;

pub const ID_PROTECTED_EUTRA_RESOURCES_LIST: u16 = 105;

pub const ID_QO_E_INFORMATION: u16 = 585;

pub const ID_QO_E_INFORMATION_TRANSFER: u8 = 78;

pub const ID_QO_S_FLOW_MAPPING_INDICATION: u16 = 183;

pub const ID_QOS_MONITORING_REQUEST: u16 = 257;

pub const ID_RACH_REPORT_INFORMATION_LIST: u16 = 359;

pub const ID_RAN_MEASUREMENT_ID: u16 = 411;

pub const ID_RAN_UE_MEASUREMENT_ID: u16 = 413;

pub const ID_RAN_UE_PDC_MEAS_ID: u16 = 546;

pub const ID_RANAC: u16 = 139;

pub const ID_RANUEID: u16 = 226;

pub const ID_RANUE_PAGING_DRX: u16 = 580;

pub const ID_RAT_FREQUENCY_PRIORITY_INFORMATION: u16 = 108;

pub const ID_RLC_STATUS: u16 = 160;

pub const ID_RLC_DUPLICATION_INFORMATION: u16 = 371;

pub const ID_RLC_FAILURE_INDICATION: u16 = 174;

pub const ID_RLC_MODE: u16 = 187;

pub const ID_RLF_REPORT_INFORMATION_LIST: u16 = 360;

pub const ID_RRC_CONTAINER: u16 = 50;

pub const ID_RRC_CONTAINER_RRC_SETUP_COMPLETE: u16 = 241;

pub const ID_RRC_DELIVERY_REPORT: u8 = 25;

pub const ID_RRC_DELIVERY_STATUS: u16 = 185;

pub const ID_RRC_DELIVERY_STATUS_REQUEST: u16 = 184;

pub const ID_RRC_RECONFIGURATION_COMPLETE_INDICATOR: u16 = 87;

pub const ID_RE_ROUTING_ENABLE_INDICATOR: u16 = 516;

pub const ID_RED_CAP_INDICATION: u16 = 673;

pub const ID_REDCAP_BCAST_INFORMATION: u16 = 579;

pub const ID_REDIRECTED_RR_CMESSAGE: u16 = 218;

pub const ID_REFERENCE_TIME_INFORMATION_REPORT: u8 = 57;

pub const ID_REFERENCE_TIME_INFORMATION_REPORTING_CONTROL: u8 = 58;

pub const ID_REGISTRATION_REQUEST: u16 = 347;

pub const ID_REPETITION_PERIOD: u16 = 141;

pub const ID_REPORT_CHARACTERISTICS: u16 = 348;

pub const ID_REPORTING_PERIODICITY: u16 = 352;

pub const ID_REPORTING_REQUEST_TYPE: u16 = 365;

pub const ID_REQUEST_TYPE: u16 = 106;

pub const ID_REQUESTED_PDCCH_BLIND_DETECTION_SCG: u16 = 236;

pub const ID_REQUESTED_BAND_COMBINATION_INDEX: u16 = 209;

pub const ID_REQUESTED_FEATURE_SET_ENTRY_INDEX: u16 = 210;

pub const ID_REQUESTED_P_MAX_FR2: u16 = 211;

pub const ID_REQUESTED_SRS_TRANSMISSION_CHARACTERISTICS: u16 = 391;

pub const ID_RESET: u8 = 0;

pub const ID_RESET_TYPE: u16 = 48;

pub const ID_RESOURCE_COORDINATION_TRANSFER_CONTAINER: u16 = 49;

pub const ID_RESOURCE_COORDINATION_TRANSFER_INFORMATION: u16 = 195;

pub const ID_RESPONSE_TIME: u16 = 555;

pub const ID_ROUTING_ID: u16 = 394;

pub const ID_SCG_ACTIVATION_REQUEST: u16 = 547;

pub const ID_SCG_ACTIVATION_STATUS: u16 = 548;

pub const ID_SCG_INDICATOR: u16 = 432;

pub const ID_SCS_480: u16 = 661;

pub const ID_SCS_960: u16 = 662;

pub const ID_S_CELL_FAILEDTO_SETUP_ITEM: u16 = 84;

pub const ID_S_CELL_FAILEDTO_SETUP_LIST: u16 = 83;

pub const ID_S_CELL_FAILEDTO_SETUP_MOD_ITEM: u16 = 86;

pub const ID_S_CELL_FAILEDTO_SETUP_MOD_LIST: u16 = 85;

pub const ID_S_CELL_TO_BE_REMOVED_ITEM: u16 = 51;

pub const ID_S_CELL_TO_BE_REMOVED_LIST: u16 = 52;

pub const ID_S_CELL_TO_BE_SETUP_ITEM: u16 = 53;

pub const ID_S_CELL_TO_BE_SETUP_LIST: u16 = 54;

pub const ID_S_CELL_TO_BE_SETUP_MOD_ITEM: u16 = 55;

pub const ID_S_CELL_TO_BE_SETUP_MOD_LIST: u16 = 56;

pub const ID_SDT_MAC_PHY_CG_CONFIG: u16 = 587;

pub const ID_SDT_TERMINATION_REQUEST: u16 = 635;

pub const ID_SDT_BEARER_CONFIGURATION_INFO: u16 = 676;

pub const ID_SDT_BEARER_CONFIGURATION_QUERY_INDICATION: u16 = 675;

pub const ID_SDT_INFORMATION: u16 = 592;

pub const ID_SDTRLC_BEARER_CONFIGURATION: u16 = 593;

pub const ID_SFN_OFFSET: u16 = 429;

pub const ID_SFN_INITIALISATION_TIME: u16 = 419;

pub const ID_SIB10_MESSAGE: u16 = 387;

pub const ID_SIB12_MESSAGE: u16 = 310;

pub const ID_SIB13_MESSAGE: u16 = 311;

pub const ID_SIB14_MESSAGE: u16 = 312;

pub const ID_SIB15_MESSAGE: u16 = 648;

pub const ID_SIB17_MESSAGE: u16 = 625;

pub const ID_SIB20_MESSAGE: u16 = 627;

pub const ID_S_ITYPE_LIST: u16 = 116;

pub const ID_SL_CONFIG_DEDICATED_EUTRA_INFO: u16 = 342;

pub const ID_SL_PHY_MAC_RLC_CONFIG: u16 = 341;

pub const ID_SL_RLC_CHANNEL_TO_ADD_MOD_LIST: u16 = 645;

pub const ID_SLDR_BS_FAILED_TO_BE_MODIFIED_ITEM: u16 = 313;

pub const ID_SLDR_BS_FAILED_TO_BE_MODIFIED_LIST: u16 = 314;

pub const ID_SLDR_BS_FAILED_TO_BE_SETUP_ITEM: u16 = 315;

pub const ID_SLDR_BS_FAILED_TO_BE_SETUP_LIST: u16 = 316;

pub const ID_SLDR_BS_FAILED_TO_BE_SETUP_MOD_ITEM: u16 = 336;

pub const ID_SLDR_BS_FAILED_TO_BE_SETUP_MOD_LIST: u16 = 334;

pub const ID_SLDR_BS_MODIFIED_ITEM: u16 = 317;

pub const ID_SLDR_BS_MODIFIED_LIST: u16 = 318;

pub const ID_SLDR_BS_MODIFIED_CONF_ITEM: u16 = 338;

pub const ID_SLDR_BS_MODIFIED_CONF_LIST: u16 = 337;

pub const ID_SLDR_BS_REQUIRED_TO_BE_MODIFIED_ITEM: u16 = 319;

pub const ID_SLDR_BS_REQUIRED_TO_BE_MODIFIED_LIST: u16 = 320;

pub const ID_SLDR_BS_REQUIRED_TO_BE_RELEASED_ITEM: u16 = 321;

pub const ID_SLDR_BS_REQUIRED_TO_BE_RELEASED_LIST: u16 = 322;

pub const ID_SLDR_BS_SETUP_ITEM: u16 = 323;

pub const ID_SLDR_BS_SETUP_LIST: u16 = 324;

pub const ID_SLDR_BS_SETUP_MOD_ITEM: u16 = 335;

pub const ID_SLDR_BS_SETUP_MOD_LIST: u16 = 333;

pub const ID_SLDR_BS_TO_BE_MODIFIED_ITEM: u16 = 325;

pub const ID_SLDR_BS_TO_BE_MODIFIED_LIST: u16 = 326;

pub const ID_SLDR_BS_TO_BE_RELEASED_ITEM: u16 = 327;

pub const ID_SLDR_BS_TO_BE_RELEASED_LIST: u16 = 328;

pub const ID_SLDR_BS_TO_BE_SETUP_ITEM: u16 = 329;

pub const ID_SLDR_BS_TO_BE_SETUP_LIST: u16 = 330;

pub const ID_SLDR_BS_TO_BE_SETUP_MOD_ITEM: u16 = 331;

pub const ID_SLDR_BS_TO_BE_SETUP_MOD_LIST: u16 = 332;

pub const ID_SLDRX_CYCLE_LIST: u16 = 643;

pub const ID_SNSSAI: u16 = 456;

pub const ID_SRBID: u16 = 64;

pub const ID_SRB_MAPPING_INFO: u16 = 597;

pub const ID_SR_BS_FAILED_TO_BE_SETUP_ITEM: u16 = 65;

pub const ID_SR_BS_FAILED_TO_BE_SETUP_LIST: u16 = 66;

pub const ID_SR_BS_FAILED_TO_BE_SETUP_MOD_ITEM: u16 = 67;

pub const ID_SR_BS_FAILED_TO_BE_SETUP_MOD_LIST: u16 = 68;

pub const ID_SR_BS_MODIFIED_ITEM: u16 = 207;

pub const ID_SR_BS_MODIFIED_LIST: u16 = 206;

pub const ID_SR_BS_REQUIRED_TO_BE_RELEASED_ITEM: u16 = 69;

pub const ID_SR_BS_REQUIRED_TO_BE_RELEASED_LIST: u16 = 70;

pub const ID_SR_BS_SETUP_ITEM: u16 = 203;

pub const ID_SR_BS_SETUP_LIST: u16 = 202;

pub const ID_SR_BS_SETUP_MOD_ITEM: u16 = 205;

pub const ID_SR_BS_SETUP_MOD_LIST: u16 = 204;

pub const ID_SR_BS_TO_BE_RELEASED_ITEM: u16 = 71;

pub const ID_SR_BS_TO_BE_RELEASED_LIST: u16 = 72;

pub const ID_SR_BS_TO_BE_SETUP_ITEM: u16 = 73;

pub const ID_SR_BS_TO_BE_SETUP_LIST: u16 = 74;

pub const ID_SR_BS_TO_BE_SETUP_MOD_ITEM: u16 = 75;

pub const ID_SR_BS_TO_BE_SETUP_MOD_LIST: u16 = 76;

pub const ID_SRS_CONFIGURATION: u16 = 407;

pub const ID_SRS_PORT_INDEX: u16 = 663;

pub const ID_SRS_POS_RRC_INACTIVE_CONFIG: u16 = 674;

pub const ID_SRS_RESOURCETYPE: u16 = 560;

pub const ID_SRS_SPATIAL_RELATION_PER_SRS_RESOURCE: u16 = 435;

pub const ID_SRS_TYPE: u16 = 403;

pub const ID_SSB_POSITIONS_IN_BURST: u16 = 357;

pub const ID_SUL_ACCESS_INDICATION: u16 = 178;

pub const ID_SELECTED_BAND_COMBINATION_INDEX: u16 = 193;

pub const ID_SELECTED_FEATURE_SET_ENTRY_INDEX: u16 = 194;

pub const ID_SELECTED_PLMNID: u16 = 224;

pub const ID_SERV_CELL_INDEX: u16 = 107;

pub const ID_SERVED_CELLS_TO_ADD_ITEM: u16 = 57;

pub const ID_SERVED_CELLS_TO_ADD_LIST: u16 = 58;

pub const ID_SERVED_CELLS_TO_DELETE_ITEM: u16 = 59;

pub const ID_SERVED_CELLS_TO_DELETE_LIST: u16 = 60;

pub const ID_SERVED_CELLS_TO_MODIFY_ITEM: u16 = 61;

pub const ID_SERVED_CELLS_TO_MODIFY_LIST: u16 = 62;

pub const ID_SERVING_CELLS_LIST: u16 = 534;

pub const ID_SERVING_CELL_MO: u16 = 182;

pub const ID_SERVING_NID: u16 = 382;

pub const ID_SERVING_PLMN: u16 = 165;

pub const ID_SIDELINK_RELAY_CONFIGURATION: u16 = 617;

pub const ID_SLICE_RADIO_RESOURCE_STATUS: u16 = 441;

pub const ID_SLOT_NUMBER: u16 = 421;

pub const ID_SOURCE_MRB_ID: u16 = 671;

pub const ID_SP_CELL_ID: u16 = 63;

pub const ID_SP_CELL_UL_CONFIGURED: u16 = 96;

pub const ID_SRS_FREQUENCY: u16 = 431;

pub const ID_SUCCESSFUL_HO_REPORT_INFORMATION_LIST: u16 = 443;

pub const ID_SUPPORTED_MBS_FSA_ID_LIST: u16 = 478;

pub const ID_SURVIVAL_TIME: u16 = 540;

pub const ID_SYMBOL_ALLOC_IN_SLOT: u16 = 246;

pub const ID_SYSTEM_FRAME_NUMBER: u16 = 420;

pub const ID_SYSTEM_INFORMATION_DELIVERY_COMMAND: u8 = 17;

pub const ID_TAINSAG_SUPPORT_LIST: u16 = 644;

pub const ID_TAI_SLICE_SUPPORT_LIST: u16 = 131;

pub const ID_TDD_UL_DL_CONFIG_COMMON_NR: u16 = 361;

pub const ID_TNL_ASSOCIATION_TRANSPORT_LAYER_ADDRESSG_NBDU: u16 = 229;

pub const ID_TNL_CAPACITY_INDICATOR: u16 = 353;

pub const ID_TRP_MEASUREMENT_REQUEST_LIST: u16 = 422;

pub const ID_TRP_MEASUREMENT_UPDATE_LIST: u16 = 553;

pub const ID_TRP_PRS_INFO_LIST: u16 = 569;

pub const ID_TRP_BEAM_ANTENNA_INFORMATION: u16 = 577;

pub const ID_TRP_INFORMATION_EXCHANGE: u8 = 48;

pub const ID_TRP_INFORMATION_ITEM: u16 = 401;

pub const ID_TRP_INFORMATION_LIST_TRP_RESP: u16 = 400;

pub const ID_TRP_INFORMATION_TYPE_ITEM: u16 = 399;

pub const ID_TRP_INFORMATION_TYPE_LIST_TRP_REQ: u16 = 398;

pub const ID_TRP_LIST: u16 = 410;

pub const ID_TRPRXTEGID: u16 = 568;

pub const ID_TRP_RX_TIMING_ERROR_MARGIN: u16 = 669;

pub const ID_TRP_RX_TX_TIMING_ERROR_MARGIN: u16 = 670;

pub const ID_TRPTEGID_INFORMATION: u16 = 567;

pub const ID_TRP_TX_TEG_ASSOCIATION: u16 = 566;

pub const ID_TRP_TX_TIMING_ERROR_MARGIN: u16 = 668;

pub const ID_TRP_TYPE: u16 = 434;

pub const ID_TSC_TRAFFIC_CHARACTERISTICS: u16 = 364;

pub const ID_TIME_REFERENCE_INFORMATION: u16 = 366;

pub const ID_TIME_TO_WAIT: u16 = 77;

pub const ID_TRACE_ACTIVATION: u16 = 242;

pub const ID_TRACE_COLLECTION_ENTITY_IP_ADDRESS: u16 = 378;

pub const ID_TRACE_COLLECTION_ENTITY_URI: u16 = 380;

pub const ID_TRACE_ID: u16 = 243;

pub const ID_TRACE_START: u8 = 28;

pub const ID_TRAFFIC_MAPPING_INFORMATION: u16 = 299;

pub const ID_TRANSACTION_ID: u16 = 78;

pub const ID_TRANSMISSION_ACTION_INDICATOR: u16 = 79;

pub const ID_TRANSMISSION_STOP_INDICATOR: u16 = 430;

pub const ID_TRANSPORT_LAYER_ADDRESS_INFO: u16 = 254;

pub const ID_UAC_ASSISTANCE_INFO: u16 = 225;

pub const ID_UE_MULTICAST_MR_BS_CONFIRMED_TO_BE_MODIFIED_ITEM: u16 = 654;

pub const ID_UE_MULTICAST_MR_BS_CONFIRMED_TO_BE_MODIFIED_LIST: u16 = 653;

pub const ID_UE_MULTICAST_MR_BS_REQUIRED_TO_BE_MODIFIED_ITEM: u16 = 656;

pub const ID_UE_MULTICAST_MR_BS_REQUIRED_TO_BE_MODIFIED_LIST: u16 = 655;

pub const ID_UE_MULTICAST_MR_BS_REQUIRED_TO_BE_RELEASED_ITEM: u16 = 658;

pub const ID_UE_MULTICAST_MR_BS_REQUIRED_TO_BE_RELEASED_LIST: u16 = 657;

pub const ID_UE_MULTICAST_MR_BS_TO_BE_RELEASED_ITEM: u16 = 629;

pub const ID_UE_MULTICAST_MR_BS_TO_BE_RELEASED_LIST: u16 = 628;

pub const ID_UE_MULTICAST_MR_BS_TO_BE_SETUP_ITEM: u16 = 631;

pub const ID_UE_MULTICAST_MR_BS_TO_BE_SETUP_LIST: u16 = 630;

pub const ID_UE_ASSOCIATED_LOGICAL_F1_CONNECTION_ITEM: u16 = 80;

pub const ID_UE_ASSOCIATED_LOGICAL_F1_CONNECTION_LIST_RES_ACK: u16 = 81;

pub const ID_UE_ASSISTANCE_INFORMATION: u16 = 214;

pub const ID_UE_ASSISTANCE_INFORMATION_EUTRA: u16 = 339;

pub const ID_UE_CONTEXT_MODIFICATION: u8 = 7;

pub const ID_UE_CONTEXT_MODIFICATION_REQUIRED: u8 = 8;

pub const ID_UE_CONTEXT_NOT_RETRIEVABLE: u16 = 222;

pub const ID_UE_CONTEXT_RELEASE: u8 = 6;

pub const ID_UE_CONTEXT_RELEASE_REQUEST: u8 = 10;

pub const ID_UE_CONTEXT_SETUP: u8 = 5;

pub const ID_UE_IDENTITY_LIST_FOR_PAGING_ITEM: u16 = 480;

pub const ID_UE_IDENTITY_LIST_FOR_PAGING_LIST: u16 = 479;

pub const ID_UE_IDENTITY_INDEX_VALUE: u16 = 117;

pub const ID_UE_INACTIVITY_NOTIFICATION: u8 = 15;

pub const ID_UE_MOBILITY_COMMAND: u8 = 9;

pub const ID_UE_PAGING_CAPABILITY: u16 = 623;

pub const ID_UE_REPORTING_INFORMATION: u16 = 575;

pub const ID_UL_BH_NON_UP_TRAFFIC_MAPPING: u16 = 287;

pub const ID_UL_GAP_FR2_CONFIG: u16 = 677;

pub const ID_UL_SRS_RSRPP: u16 = 559;

pub const ID_UL_UP_TNL_ADDRESS_TO_UPDATE_LIST: u16 = 302;

pub const ID_UL_UP_TNL_ADDRESS_TO_UPDATE_LIST_ITEM: u16 = 303;

pub const ID_UL_UP_TNL_INFORMATION_TO_UPDATE_LIST: u16 = 300;

pub const ID_UL_UP_TNL_INFORMATION_TO_UPDATE_LIST_ITEM: u16 = 301;

pub const ID_UL_CARRIER_LIST: u16 = 355;

pub const ID_ULPDCPSN_LENGTH: u16 = 192;

pub const ID_ULPDU_SESSION_AGGREGATE_MAXIMUM_BIT_RATE: u16 = 181;

pub const ID_ULRRC_MESSAGE_TRANSFER: u8 = 13;

pub const ID_UPDATED_REMOTE_UE_LOCAL_ID: u16 = 618;

pub const ID_UPLINK_TX_DIRECT_CURRENT_LIST_INFORMATION: u16 = 175;

pub const ID_UU_RLC_CHANNEL_FAILED_TO_BE_MODIFIED_LIST: u16 = 605;

pub const ID_UU_RLC_CHANNEL_FAILED_TO_BE_SETUP_LIST: u16 = 603;

pub const ID_UU_RLC_CHANNEL_MODIFIED_LIST: u16 = 604;

pub const ID_UU_RLC_CHANNEL_REQUIRED_TO_BE_MODIFIED_LIST: u16 = 606;

pub const ID_UU_RLC_CHANNEL_REQUIRED_TO_BE_RELEASED_LIST: u16 = 607;

pub const ID_UU_RLC_CHANNEL_SETUP_LIST: u16 = 602;

pub const ID_UU_RLC_CHANNEL_TO_BE_MODIFIED_LIST: u16 = 600;

pub const ID_UU_RLC_CHANNEL_TO_BE_RELEASED_LIST: u16 = 601;

pub const ID_UU_RLC_CHANNEL_TO_BE_SETUP_LIST: u16 = 599;

pub const ID_VICTIMG_NB_SET_ID: u16 = 252;

pub const ID_WRITE_REPLACE_WARNING: u8 = 20;

pub const ID_ZO_A_INFORMATION: u16 = 554;

pub const ID_ACCESS_AND_MOBILITY_INDICATION: u8 = 38;

pub const ID_ACCESS_SUCCESS: u8 = 39;

pub const ID_AREA_SCOPE: u16 = 240;

pub const ID_CELL_TRAFFIC_TRACE: u8 = 40;

pub const ID_CHILD_IAB_NODES_NA_RESOURCE_LIST: u16 = 522;

pub const ID_D_L_FREQ_INFO: u16 = 526;

pub const ID_D_L_NR_CARRIER_LIST: u16 = 529;

pub const ID_D_L_TRANSMISSION_BANDWIDTH: u16 = 527;

pub const ID_FREQUENCY_DOMAIN_HSNA_CONFIGURATION_LIST: u16 = 521;

pub const ID_G_NB_CU_MBS_F1AP_ID: u16 = 451;

pub const ID_G_NB_CU_NAME: u16 = 82;

pub const ID_G_NB_CU_UE_F1AP_ID: u16 = 40;

pub const ID_G_NB_CU_SYSTEM_INFORMATION: u16 = 118;

pub const ID_G_NB_DU_ID: u16 = 42;

pub const ID_G_NB_DU_MBS_F1AP_ID: u16 = 452;

pub const ID_G_NB_DU_NAME: u16 = 45;

pub const ID_G_NB_DU_SERVED_CELLS_LIST: u16 = 44;

pub const ID_G_NB_DU_UE_F1AP_ID: u16 = 41;

pub const ID_G_NBCU_CONFIGURATION_UPDATE: u8 = 4;

pub const ID_G_NBCU_MEASUREMENT_ID: u16 = 345;

pub const ID_G_NBDU_CONFIGURATION_UPDATE: u8 = 3;

pub const ID_G_NBDU_MEASUREMENT_ID: u16 = 346;

pub const ID_LATEST_RRC_VERSION_ENHANCED: u16 = 199;

pub const ID_MDT_CONFIGURATION: u16 = 381;

pub const ID_MEASUREMENT_ACTIVATION: u8 = 77;

pub const ID_MEASUREMENT_PRECONFIGURATION: u8 = 76;

pub const ID_N_R_CARRIER_LIST: u16 = 532;

pub const ID_N_R_FREQ_INFO: u16 = 530;

pub const ID_NEW_G_NB_CU_UE_F1AP_ID: u16 = 217;

pub const ID_NEW_G_NB_DU_UE_F1AP_ID: u16 = 219;

pub const ID_OLDG_NB_DU_UE_F1AP_ID: u16 = 47;

pub const ID_P_RS_CONFIGURATION_EXCHANGE: u8 = 75;

pub const ID_PATH_POWER: u16 = 636;

pub const ID_PERMUTATION: u16 = 535;

pub const ID_PORT_NUMBER: u16 = 230;

pub const ID_PRIVATE_MESSAGE: u8 = 14;

pub const ID_R_B_SET_CONFIGURATION: u16 = 520;

pub const ID_REQUESTED_TARGET_CELL_GLOBAL_ID: u16 = 376;

pub const ID_RESOURCE_STATUS_REPORTING: u8 = 37;

pub const ID_RESOURCE_STATUS_REPORTING_INITIATION: u8 = 36;

pub const ID_SYSTEM_INFORMATION_AREA_ID: u16 = 239;

pub const ID_TARGET_CELLS_TO_CANCEL: u16 = 375;

pub const ID_TRANSMISSION_BANDWIDTH: u16 = 531;

pub const ID_U_L_FREQ_INFO: u16 = 524;

pub const ID_U_L_NR_CARRIER_LIST: u16 = 528;

pub const ID_U_L_TRANSMISSION_BANDWIDTH: u16 = 525;

pub const MAX_AFFECTED_CELLS: i64 = 32;

pub const MAX_CELLINE_NB: i64 = 256;

pub const MAX_CELLING_NBDU: i64 = 512;

pub const MAX_FREQ_LAYERS: i64 = 4;

pub const MAX_NRARFCN: i64 = 3279165;

pub const MAX_NEIGHBOUR_CELLFOR_SON: i64 = 32;

pub const MAX_NO_OF_MEAS_TR_PS: i64 = 64;

pub const MAX_NO_PATH_EXTENDED: i64 = 8;

pub const MAX_NUM_RESOURCES_PER_ANGLE: i64 = 24;

pub const MAX_PRIVATE_I_ES: i64 = 65535;

pub const MAX_PROTOCOL_EXTENSIONS: i64 = 65535;

pub const MAX_PROTOCOL_I_ES: i64 = 65535;

pub const MAX_SERVED_CELLFOR_SON: i64 = 256;

pub const MAXNO_AR_PS: i64 = 16;

pub const MAXNO_AZIMUTH_ANGLES: i64 = 3600;

pub const MAXNO_BCAST_CELL: i64 = 16384;

pub const MAXNO_ELEVATION_ANGLES: i64 = 1801;

pub const MAXNO_SC_SS: i64 = 5;

pub const MAXNO_SRS_CARRIERS: i64 = 32;

pub const MAXNO_SRS_POS_RESOURCE_PER_SET: i64 = 16;

pub const MAXNO_SRS_POS_RESOURCE_SETS: i64 = 16;

pub const MAXNO_SRS_POS_RESOURCES: i64 = 64;

pub const MAXNO_SRS_RESOURCE_PER_SET: i64 = 16;

pub const MAXNO_SRS_RESOURCE_SETS: i64 = 16;

pub const MAXNO_SRS_RESOURCES: i64 = 64;

pub const MAXNO_TRPTE_GS: i64 = 8;

pub const MAXNOOF_ADDITIONAL_PDCP_DUPLICATION_TNL: i64 = 2;

pub const MAXNOOF_ADDITIONAL_SI_BS: i64 = 63;

pub const MAXNOOF_ANGLE_INFO: i64 = 65535;

pub const MAXNOOF_BHRLC_CHANNELS: i64 = 65536;

pub const MAXNOOF_BPLM_NS: i64 = 6;

pub const MAXNOOF_BPLM_NS_NR: i64 = 12;

pub const MAXNOOF_CA_GSUPPORTED: i64 = 12;

pub const MAXNOOF_CH_OCELLS: i64 = 8;

pub const MAXNOOF_CANDIDATE_SP_CELLS: i64 = 64;

pub const MAXNOOF_CELLSFOR_MBS: i64 = 512;

pub const MAXNOOF_CHILD_IAB_NODES: i64 = 1024;

pub const MAXNOOF_DLUPTNL_INFORMATION: i64 = 2;

pub const MAXNOOF_DR_BS: i64 = 64;

pub const MAXNOOF_DS_INFO: i64 = 64;

pub const MAXNOOF_DUF_SLOTS: i64 = 320;

pub const MAXNOOF_EGRESS_LINKS: i64 = 2;

pub const MAXNOOF_ERRORS: i64 = 256;

pub const MAXNOOF_EXT_SLICE_ITEMS: i64 = 65535;

pub const MAXNOOF_EXTENDED_BPLM_NS: i64 = 6;

pub const MAXNOOF_GTPTL_AS: i64 = 16;

pub const MAXNOOF_HSNA_SLOTS: i64 = 5120;

pub const MAXNOOF_IAB_CONG_IND: i64 = 1024;

pub const MAXNOOF_IABSTC_INFO: i64 = 45;

pub const MAXNOOF_INDIVIDUAL_F1_CONNECTIONS_TO_RESET: i64 = 65536;

pub const MAXNOOF_MBS_AREA_SESSION_I_DS: i64 = 256;

pub const MAXNOOF_MBSFS_AS: i64 = 256;

pub const MAXNOOF_MBS_QO_S_FLOWS: i64 = 64;

pub const MAXNOOF_MBS_SERVICE_AREA_INFORMATION: i64 = 256;

pub const MAXNOOF_MBS_SESSIONSOF_UE: i64 = 256;

pub const MAXNOOF_MDTPLM_NS: i64 = 16;

pub const MAXNOOF_MR_BS: i64 = 32;

pub const MAXNOOF_MR_BSFOR_UE: i64 = 64;

pub const MAXNOOF_MAPPING_ENTRIES: i64 = 67108864;

pub const MAXNOOF_MEAS_E_CID: i64 = 64;

pub const MAXNOOF_MEAS_PDC: i64 = 16;

pub const MAXNOOF_NI_DSUPPORTED: i64 = 12;

pub const MAXNOOF_NR_U_CHANNEL_I_DS: i64 = 16;

pub const MAXNOOF_NRSC_SS: i64 = 5;

pub const MAXNOOF_NSA_GS: i64 = 256;

pub const MAXNOOF_NEIGHBOUR_NODE_CELLS_IAB: i64 = 1024;

pub const MAXNOOF_NON_UP_TRAFFIC_MAPPINGS: i64 = 32;

pub const MAXNOOF_NR_CELL_BANDS: i64 = 32;

pub const MAXNOOF_PC5_QO_S_FLOWS: i64 = 2048;

pub const MAXNOOF_PC5RLC_CHANNELS: i64 = 512;

pub const MAXNOOF_PRAC_HCONFIGS: i64 = 16;

pub const MAXNOOF_PRS_RESOURCE_SETS: i64 = 2;

pub const MAXNOOF_PRS_RESOURCES_PER_SET: i64 = 64;

pub const MAXNOOF_PRSTR_PS: i64 = 256;

pub const MAXNOOF_PR_SRESOURCE_SETS: i64 = 8;

pub const MAXNOOF_PR_SRESOURCES: i64 = 64;

pub const MAXNOOF_PAGING_CELLS: i64 = 512;

pub const MAXNOOF_PATH: i64 = 2;

pub const MAXNOOF_PHYSICAL_RESOURCE_BLOCKS: i64 = 275;

pub const MAXNOOF_PHYSICAL_RESOURCE_BLOCKS_1: i64 = 274;

pub const MAXNOOF_POS_MEAS: i64 = 16384;

pub const MAXNOOF_POTENTIAL_SP_CELLS: i64 = 64;

pub const MAXNOOF_QO_E_INFORMATION: i64 = 16;

pub const MAXNOOF_QO_S_FLOWS: i64 = 64;

pub const MAXNOOF_QO_S_PARA_SETS: i64 = 8;

pub const MAXNOOF_RACH_REPORTS: i64 = 64;

pub const MAXNOOF_R_BSETS_PER_CELL: i64 = 8;

pub const MAXNOOF_R_BSETS_PER_CELL_1: i64 = 7;

pub const MAXNOOF_RLC_DUPLICATION_STATE: i64 = 3;

pub const MAXNOOF_RLF_REPORTS: i64 = 64;

pub const MAXNOOF_ROUTING_ENTRIES: i64 = 1024;

pub const MAXNOOF_S_CELLS: i64 = 32;

pub const MAXNOOF_SDT_BEARERS: i64 = 72;

pub const MAXNOOF_SIB_TYPES: i64 = 32;

pub const MAXNOOF_SI_TYPES: i64 = 32;

pub const MAXNOOF_SLDR_BS: i64 = 512;

pub const MAXNOOF_S_LDESTINATIONS: i64 = 32;

pub const MAXNOOF_SMBR_VALUES: i64 = 8;

pub const MAXNOOF_SR_BS: i64 = 8;

pub const MAXNOOF_SRS_TRIGGER_STATES: i64 = 3;

pub const MAXNOOF_SSB_AREAS: i64 = 64;

pub const MAXNOOF_SS_BS: i64 = 255;

pub const MAXNOOF_SERVED_CELLS_IAB: i64 = 512;

pub const MAXNOOF_SERVING_CELLS: i64 = 32;

pub const MAXNOOF_SLICE_ITEMS: i64 = 1024;

pub const MAXNOOF_SPATIAL_RELATIONS: i64 = 64;

pub const MAXNOOF_SUCCESSFUL_HO_REPORTS: i64 = 64;

pub const MAXNOOF_SYMBOLS: i64 = 14;

pub const MAXNOOF_TA_IFOR_MBS: i64 = 512;

pub const MAXNOOF_TL_AS: i64 = 16;

pub const MAXNOOF_TL_AS_IAB: i64 = 1024;

pub const MAXNOOF_TNL_ASSOCIATIONS: i64 = 32;

pub const MAXNOOF_TRP_INFO_TYPES: i64 = 64;

pub const MAXNOOF_TR_PS: i64 = 65535;

pub const MAXNOOF_UACPLM_NS: i64 = 12;

pub const MAXNOOF_UA_CPER_PLMN: i64 = 64;

pub const MAXNOOF_UEI_DFOR_PAGING: i64 = 4096;

pub const MAXNOOF_UEI_DS: i64 = 65536;

pub const MAXNOOF_UL_AO_AS: i64 = 8;

pub const MAXNOOF_ULUPTNL_INFORMATION: i64 = 2;

pub const MAXNOOF_ULUPTNL_INFORMATIONFOR_IAB: i64 = 32678;

pub const MAXNOOF_UPTNL_ADDRESSES: i64 = 8;

pub const MAXNOOF_UU_RLC_CHANNELS: i64 = 32;

pub const MAXNOOFLCS_GCS_TRANSLATION: i64 = 3;

pub const MAXNOOFSLOTS: i64 = 5120;

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "16", extensible = true)]
pub struct ARP_ID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct ARPLocationInformation(pub Vec<ARPLocationInformation_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct ARPLocationInformation_Item {
    pub arp_id: ARP_ID,
    pub arp_location_type: ARPLocationType,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ARPLocationInformation_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum ARPLocationType {
    #[asn(key = 0, extended = false)]
    ARPPositionRelativeGeodetic(RelativeGeodeticLocation),
    #[asn(key = 1, extended = false)]
    ARPPositionRelativeCartesian(RelativeCartesianLocation),
    #[asn(key = 2, extended = false)]
    Choice_extension(ARPLocationType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum AbortTransmission {
    #[asn(key = 0, extended = false)]
    SRSResourceSetID(SRSResourceSetID),
    #[asn(key = 1, extended = false)]
    ReleaseALL(AbortTransmission_releaseALL),
    #[asn(key = 2, extended = false)]
    Choice_extension(AbortTransmission_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct AccessAndMobilityIndication {
    pub protocol_i_es: AccessAndMobilityIndicationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct AccessPointPosition {
    pub latitude_sign: AccessPointPositionLatitudeSign,
    pub latitude: AccessPointPositionLatitude,
    pub longitude: AccessPointPositionLongitude,
    pub direction_of_altitude: AccessPointPositionDirectionOfAltitude,
    pub altitude: AccessPointPositionAltitude,
    pub uncertainty_semi_major: AccessPointPositionUncertaintySemi_major,
    pub uncertainty_semi_minor: AccessPointPositionUncertaintySemi_minor,
    pub orientation_of_major_axis: AccessPointPositionOrientationOfMajorAxis,
    pub uncertainty_altitude: AccessPointPositionUncertaintyAltitude,
    pub confidence: AccessPointPositionConfidence,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AccessPointPositionIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct AccessSuccess {
    pub protocol_i_es: AccessSuccessProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Activated_Cells_to_be_Updated_List(pub Vec<Activated_Cells_to_be_Updated_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Activated_Cells_to_be_Updated_List_Item {
    pub nrcgi: NRCGI,
    pub iab_du_cell_resource_configuration_mode_info: IAB_DU_Cell_Resource_Configuration_Mode_Info,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Activated_Cells_to_be_Updated_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum ActivationRequestType {
    ACTIVATE,
    DEACTIVATE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct ActiveULBWP {
    pub location_and_bandwidth: ActiveULBWPLocationAndBandwidth,
    pub subcarrier_spacing: ActiveULBWPSubcarrierSpacing,
    pub cyclic_prefix: ActiveULBWPCyclicPrefix,
    pub tx_direct_current_location: ActiveULBWPTxDirectCurrentLocation,
    #[asn(optional_idx = 0)]
    pub shift7dot5k_hz: Option<ActiveULBWPShift7dot5kHz>,
    pub srs_config: SRSConfig,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<ActiveULBWPIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum AdditionalDuplicationIndication {
    THREE,
    FOUR,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct AdditionalPDCPDuplicationTNL_Item {
    pub additional_pdcp_duplication_uptnl_information: UPTransportLayerInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AdditionalPDCPDuplicationTNL_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "2")]
pub struct AdditionalPDCPDuplicationTNL_List(pub Vec<AdditionalPDCPDuplicationTNL_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct AdditionalPath_Item {
    pub relative_path_delay: RelativePathDelay,
    #[asn(optional_idx = 0)]
    pub path_quality: Option<TRPMeasurementQuality>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<AdditionalPath_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "2")]
pub struct AdditionalPath_List(pub Vec<AdditionalPath_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "32", sz_ub = "32")]
pub struct AdditionalRRMPriorityIndex(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "63")]
pub struct AdditionalSIBMessageList(pub Vec<AdditionalSIBMessageList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct AdditionalSIBMessageList_Item {
    pub additional_sib: AdditionalSIBMessageList_ItemAdditionalSIB,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AdditionalSIBMessageList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct AffectedCellsAndBeams_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub affected_ssb_list: Option<AffectedSSB_List>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<AffectedCellsAndBeams_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct AffectedCellsAndBeams_List(pub Vec<AffectedCellsAndBeams_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct AffectedSSB_Item {
    pub ssb_index: AffectedSSB_ItemSSB_Index,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AffectedSSB_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct AffectedSSB_List(pub Vec<AffectedSSB_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct AggressorCellList(pub Vec<AggressorCellList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct AggressorCellList_Item {
    pub aggressor_cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AggressorCellList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct AggressorgNBSetID {
    pub aggressorg_nb_set_id: GNBSetID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AggressorgNBSetIDIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct AllocationAndRetentionPriority {
    pub priority_level: PriorityLevel,
    pub pre_emption_capability: Pre_emptionCapability,
    pub pre_emption_vulnerability: Pre_emptionVulnerability,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AllocationAndRetentionPriorityIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 5)]
pub struct AlternativeQoSParaSetItem {
    pub alternative_qo_s_para_set_index: QoSParaSetIndex,
    #[asn(optional_idx = 0)]
    pub guaranteed_flow_bit_rate_dl: Option<BitRate>,
    #[asn(optional_idx = 1)]
    pub guaranteed_flow_bit_rate_ul: Option<BitRate>,
    #[asn(optional_idx = 2)]
    pub packet_delay_budget: Option<PacketDelayBudget>,
    #[asn(optional_idx = 3)]
    pub packet_error_rate: Option<PacketErrorRate>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<AlternativeQoSParaSetItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct AlternativeQoSParaSetList(pub Vec<AlternativeQoSParaSetItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct AngleMeasurementQuality {
    pub azimuth_quality: AngleMeasurementQualityAzimuthQuality,
    #[asn(optional_idx = 0)]
    pub zenith_quality: Option<AngleMeasurementQualityZenithQuality>,
    pub resolution: AngleMeasurementQualityResolution,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<AngleMeasurementQualityIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum AngleMeasurementType {
    #[asn(key = 0, extended = false)]
    Expected_ULAoA(Expected_UL_AoA),
    #[asn(key = 1, extended = false)]
    Expected_ZoA(Expected_ZoA_only),
    #[asn(key = 2, extended = false)]
    Choice_extension(AngleMeasurementType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct AoA_AssistanceInfo {
    pub angle_measurement: AngleMeasurementType,
    #[asn(optional_idx = 0)]
    pub lcs_to_gcs_translation: Option<LCS_to_GCS_Translation>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<AoA_AssistanceInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct AperiodicSRS {
    pub aperiodic: AperiodicSRSAperiodic,
    #[asn(optional_idx = 0)]
    pub srs_resource_trigger: Option<SRSResourceTrigger>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<AperiodicSRSIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "3")]
pub struct AperiodicSRSResourceTrigger(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "3")]
pub struct AperiodicSRSResourceTriggerList(pub Vec<AperiodicSRSResourceTrigger>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct AppLayerBufferLevelList(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum AreaScope {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Associated_SCell_Item {
    pub s_cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Associated_SCell_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct Associated_SCell_List(pub Vec<Associated_SCell_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "6")]
pub struct AvailablePLMNList(pub Vec<AvailablePLMNList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct AvailablePLMNList_Item {
    pub plmn_identity: PLMN_Identity,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AvailablePLMNList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct AvailableSNPN_ID_List(pub Vec<AvailableSNPN_ID_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct AvailableSNPN_ID_List_Item {
    pub plmn_identity: PLMN_Identity,
    pub available_nid_list: BroadcastNIDList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<AvailableSNPN_ID_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4095", extensible = true)]
pub struct AveragingWindow(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct BAP_Header_Rewriting_Added_List(pub Vec<BAP_Header_Rewriting_Added_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct BAP_Header_Rewriting_Added_List_Item {
    pub ingress_bap_routing_id: BAPRoutingID,
    pub egress_bap_routing_id: BAPRoutingID,
    #[asn(optional_idx = 0)]
    pub non_f1terminating_topology_indicator: Option<NonF1terminatingTopologyIndicator>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<BAP_Header_Rewriting_Added_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct BAP_Header_Rewriting_Removed_List(pub Vec<BAP_Header_Rewriting_Removed_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BAP_Header_Rewriting_Removed_List_Item {
    pub ingress_bap_routing_id: BAPRoutingID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BAP_Header_Rewriting_Removed_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "10", sz_ub = "10")]
pub struct BAPAddress(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum BAPCtrlPDUChannel {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BAPMappingConfiguration {
    pub protocol_i_es: BAPMappingConfigurationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BAPMappingConfigurationAcknowledge {
    pub protocol_i_es: BAPMappingConfigurationAcknowledgeProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BAPMappingConfigurationFailure {
    pub protocol_i_es: BAPMappingConfigurationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "10", sz_ub = "10")]
pub struct BAPPathID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BAPRoutingID {
    pub bap_address: BAPAddress,
    pub bap_path_id: BAPPathID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BAPRoutingIDIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct BAPlayerBHRLCchannelMappingInfo {
    #[asn(optional_idx = 0)]
    pub ba_player_bhrl_cchannel_mapping_info_to_add: Option<BAPlayerBHRLCchannelMappingInfoList>,
    #[asn(optional_idx = 1)]
    pub ba_player_bhrl_cchannel_mapping_info_to_remove: Option<MappingInformationtoRemove>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<BAPlayerBHRLCchannelMappingInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 5)]
pub struct BAPlayerBHRLCchannelMappingInfo_Item {
    pub mapping_information_index: MappingInformationIndex,
    #[asn(optional_idx = 0)]
    pub prior_hop_bap_address: Option<BAPAddress>,
    #[asn(optional_idx = 1)]
    pub ingressb_hrlc_channel_id: Option<BHRLCChannelID>,
    #[asn(optional_idx = 2)]
    pub next_hop_bap_address: Option<BAPAddress>,
    #[asn(optional_idx = 3)]
    pub egressb_hrlc_channel_id: Option<BHRLCChannelID>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<BAPlayerBHRLCchannelMappingInfo_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "67108864"
)]
pub struct BAPlayerBHRLCchannelMappingInfoList(pub Vec<BAPlayerBHRLCchannelMappingInfo_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum BCBearerContextF1U_TNLInfo {
    #[asn(key = 0, extended = false)]
    Locationindpendent(MBSF1UInformation),
    #[asn(key = 1, extended = false)]
    Locationdependent(LocationDependentMBSF1UInformation),
    #[asn(key = 2, extended = false)]
    Choice_extension(BCBearerContextF1U_TNLInfo_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct BH_Routing_Information_Added_List(pub Vec<BH_Routing_Information_Added_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BH_Routing_Information_Added_List_Item {
    pub bap_routing_id: BAPRoutingID,
    pub next_hop_bap_address: BAPAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BH_Routing_Information_Added_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct BH_Routing_Information_Removed_List(pub Vec<BH_Routing_Information_Removed_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BH_Routing_Information_Removed_List_Item {
    pub bap_routing_id: BAPRoutingID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BH_Routing_Information_Removed_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct BHChannels_FailedToBeModified_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<BHChannels_FailedToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_FailedToBeModified_List(pub Vec<BHChannels_FailedToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct BHChannels_FailedToBeSetup_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<BHChannels_FailedToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_FailedToBeSetup_List(pub Vec<BHChannels_FailedToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct BHChannels_FailedToBeSetupMod_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<BHChannels_FailedToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_FailedToBeSetupMod_List(pub Vec<BHChannels_FailedToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BHChannels_Modified_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BHChannels_Modified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_Modified_List(pub Vec<BHChannels_Modified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BHChannels_Required_ToBeReleased_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BHChannels_Required_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_Required_ToBeReleased_List(
    pub Vec<BHChannels_Required_ToBeReleased_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BHChannels_Setup_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BHChannels_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_Setup_List(pub Vec<BHChannels_Setup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BHChannels_SetupMod_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BHChannels_SetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_SetupMod_List(pub Vec<BHChannels_SetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct BHChannels_ToBeModified_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    pub bh_qo_s_information: BHQoSInformation,
    #[asn(optional_idx = 0)]
    pub rl_cmode: Option<RLCMode>,
    #[asn(optional_idx = 1)]
    pub bap_ctrl_pdu_channel: Option<BAPCtrlPDUChannel>,
    #[asn(optional_idx = 2)]
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<BHChannels_ToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_ToBeModified_List(pub Vec<BHChannels_ToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BHChannels_ToBeReleased_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BHChannels_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_ToBeReleased_List(pub Vec<BHChannels_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct BHChannels_ToBeSetup_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    pub bh_qo_s_information: BHQoSInformation,
    pub rl_cmode: RLCMode,
    #[asn(optional_idx = 0)]
    pub bap_ctrl_pdu_channel: Option<BAPCtrlPDUChannel>,
    #[asn(optional_idx = 1)]
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<BHChannels_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_ToBeSetup_List(pub Vec<BHChannels_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct BHChannels_ToBeSetupMod_Item {
    pub bhrlc_channel_id: BHRLCChannelID,
    pub bh_qo_s_information: BHQoSInformation,
    pub rl_cmode: RLCMode,
    #[asn(optional_idx = 0)]
    pub bap_ctrl_pdu_channel: Option<BAPCtrlPDUChannel>,
    #[asn(optional_idx = 1)]
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<BHChannels_ToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHChannels_ToBeSetupMod_List(pub Vec<BHChannels_ToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct BHInfo {
    #[asn(optional_idx = 0)]
    pub ba_prouting_id: Option<BAPRoutingID>,
    #[asn(optional_idx = 1)]
    pub egress_bhrlcch_list: Option<EgressBHRLCCHList>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<BHInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum BHQoSInformation {
    #[asn(key = 0, extended = false)]
    BHRLCCHQoS(QoSFlowLevelQoSParameters),
    #[asn(key = 1, extended = false)]
    EUTRANBHRLCCHQoS(EUTRANQoS),
    #[asn(key = 2, extended = false)]
    CPTrafficType(CPTrafficType),
    #[asn(key = 3, extended = false)]
    Choice_extension(BHQoSInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct BHRLCCHItem {
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BHRLCCHItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct BHRLCCHList(pub Vec<BHRLCCHItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "16", sz_ub = "16")]
pub struct BHRLCChannelID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct BPLMN_ID_Info_Item {
    pub plmn_identity_list: AvailablePLMNList,
    #[asn(optional_idx = 0)]
    pub extended_plmn_identity_list: Option<ExtendedAvailablePLMN_List>,
    #[asn(optional_idx = 1)]
    pub five_gs_tac: Option<FiveGS_TAC>,
    pub nr_cell_id: NRCellIdentity,
    #[asn(optional_idx = 2)]
    pub ranac: Option<RANAC>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<BPLMN_ID_Info_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct BPLMN_ID_Info_List(pub Vec<BPLMN_ID_Info_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum BandwidthSRS {
    #[asn(key = 0, extended = false)]
    FR1(FR1_Bandwidth),
    #[asn(key = 1, extended = false)]
    FR2(FR2_Bandwidth),
    #[asn(key = 2, extended = false)]
    Choice_extension(BandwidthSRS_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum BearerTypeChange {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4000000000000", extensible = true)]
pub struct BitRate(pub u64);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Broadcast_Cell_List_Item {
    pub cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Broadcast_Cell_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Broadcast_To_Be_Cancelled_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Broadcast_To_Be_Cancelled_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Broadcast_To_Be_Cancelled_List(pub Vec<Broadcast_To_Be_Cancelled_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum BroadcastAreaScope {
    #[asn(key = 0, extended = false)]
    CompleteSuccess(BroadcastAreaScope_completeSuccess),
    #[asn(key = 1, extended = false)]
    PartialSuccess(PartialSuccessCell),
    #[asn(key = 2, extended = false)]
    Choice_extension(BroadcastAreaScope_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct BroadcastCAGList(pub Vec<CAGID>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct BroadcastCellList(pub Vec<Broadcast_Cell_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextModificationFailure {
    pub protocol_i_es: BroadcastContextModificationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextModificationRequest {
    pub protocol_i_es: BroadcastContextModificationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextModificationResponse {
    pub protocol_i_es: BroadcastContextModificationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextReleaseCommand {
    pub protocol_i_es: BroadcastContextReleaseCommandProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextReleaseComplete {
    pub protocol_i_es: BroadcastContextReleaseCompleteProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextReleaseRequest {
    pub protocol_i_es: BroadcastContextReleaseRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextSetupFailure {
    pub protocol_i_es: BroadcastContextSetupFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextSetupRequest {
    pub protocol_i_es: BroadcastContextSetupRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastContextSetupResponse {
    pub protocol_i_es: BroadcastContextSetupResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct BroadcastMRBs_FailedToBeModified_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<BroadcastMRBs_FailedToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_FailedToBeModified_List(
    pub Vec<BroadcastMRBs_FailedToBeModified_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct BroadcastMRBs_FailedToBeSetup_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<BroadcastMRBs_FailedToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_FailedToBeSetup_List(pub Vec<BroadcastMRBs_FailedToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct BroadcastMRBs_FailedToBeSetupMod_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<BroadcastMRBs_FailedToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_FailedToBeSetupMod_List(
    pub Vec<BroadcastMRBs_FailedToBeSetupMod_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct BroadcastMRBs_Modified_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub bc_bearer_ctxt_f1u_tnl_infoat_du: Option<BCBearerContextF1U_TNLInfo>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<BroadcastMRBs_Modified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_Modified_List(pub Vec<BroadcastMRBs_Modified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct BroadcastMRBs_Setup_Item {
    pub mrb_id: MRB_ID,
    pub bc_bearer_ctxt_f1u_tnl_infoat_du: BCBearerContextF1U_TNLInfo,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BroadcastMRBs_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_Setup_List(pub Vec<BroadcastMRBs_Setup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct BroadcastMRBs_SetupMod_Item {
    pub mrb_id: MRB_ID,
    pub bc_bearer_ctxt_f1u_tnl_infoat_du: BCBearerContextF1U_TNLInfo,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BroadcastMRBs_SetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_SetupMod_List(pub Vec<BroadcastMRBs_SetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct BroadcastMRBs_ToBeModified_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub mrb_qo_s_information: Option<QoSInformation>,
    #[asn(optional_idx = 1)]
    pub mbs_flows_mapped_to_mrb_list: Option<MBS_Flows_Mapped_To_MRB_List>,
    #[asn(optional_idx = 2)]
    pub bc_bearer_ctxt_f1u_tnl_infoat_cu: Option<BCBearerContextF1U_TNLInfo>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<BroadcastMRBs_ToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_ToBeModified_List(pub Vec<BroadcastMRBs_ToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct BroadcastMRBs_ToBeReleased_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BroadcastMRBs_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_ToBeReleased_List(pub Vec<BroadcastMRBs_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct BroadcastMRBs_ToBeSetup_Item {
    pub mrb_id: MRB_ID,
    pub mrb_qo_s_information: QoSInformation,
    pub mbs_flows_mapped_to_mrb_list: MBS_Flows_Mapped_To_MRB_List,
    pub bc_bearer_ctxt_f1u_tnl_infoat_cu: BCBearerContextF1U_TNLInfo,
    pub ie_extensions: BroadcastMRBs_ToBeSetup_ItemIE_Extensions,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_ToBeSetup_List(pub Vec<BroadcastMRBs_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct BroadcastMRBs_ToBeSetupMod_Item {
    pub mrb_id: MRB_ID,
    pub mrb_qo_s_information: QoSInformation,
    pub mbs_flows_mapped_to_mrb_list: MBS_Flows_Mapped_To_MRB_List,
    #[asn(optional_idx = 0)]
    pub bc_bearer_ctxt_f1u_tnl_infoat_cu: Option<BCBearerContextF1U_TNLInfo>,
    pub ie_extensions: BroadcastMRBs_ToBeSetupMod_ItemIE_Extensions,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct BroadcastMRBs_ToBeSetupMod_List(pub Vec<BroadcastMRBs_ToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct BroadcastNIDList(pub Vec<NID>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct BroadcastPNI_NPN_ID_List(pub Vec<BroadcastPNI_NPN_ID_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct BroadcastPNI_NPN_ID_List_Item {
    pub plmn_identity: PLMN_Identity,
    pub broadcast_cag_list: BroadcastCAGList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BroadcastPNI_NPN_ID_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct BroadcastSNPN_ID_List(pub Vec<BroadcastSNPN_ID_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct BroadcastSNPN_ID_List_Item {
    pub plmn_identity: PLMN_Identity,
    pub broadcast_nid_list: BroadcastNIDList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<BroadcastSNPN_ID_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "16777215")]
pub struct BufferSizeThresh(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct BurstArrivalTime(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535", extensible = true)]
pub struct C_RNTI(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "32", sz_ub = "32")]
pub struct CAGID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct CCO_Assistance_Information {
    #[asn(optional_idx = 0)]
    pub cco_issue_detection: Option<CCO_issue_detection>,
    #[asn(optional_idx = 1)]
    pub affected_cells_and_beams_list: Option<AffectedCellsAndBeams_List>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<CCO_Assistance_InformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum CCO_issue_detection {
    COVERAGE,
    CELL_EDGE_CAPACITY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct CG_Config(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct CG_ConfigInfo(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum CG_SDTKeptIndicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum CG_SDTQueryIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct CG_SDTSessionInfo {
    pub gnb_cu_ue_f1ap_id: GNB_CU_UE_F1AP_ID,
    pub gnb_du_ue_f1ap_id: GNB_DU_UE_F1AP_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<CG_SDTSessionInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum CG_SDTindicatorMod {
    TRUE,
    FALSE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum CG_SDTindicatorSetup {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "100")]
pub struct CHO_Probability(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum CHOtrigger_InterDU {
    CHO_INITIATION,
    CHO_REPLACE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum CHOtrigger_IntraDU {
    CHO_INITIATION,
    CHO_REPLACE,
    CHO_CANCEL,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7", extensible = true)]
pub struct CNSubgroupID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum CNUEPagingIdentity {
    #[asn(key = 0, extended = false)]
    FiveG_S_TMSI(CNUEPagingIdentity_fiveG_S_TMSI),
    #[asn(key = 1, extended = false)]
    Choice_extension(CNUEPagingIdentity_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum CP_TransportLayerAddress {
    #[asn(key = 0, extended = false)]
    Endpoint_IP_address(TransportLayerAddress),
    #[asn(key = 1, extended = false)]
    Endpoint_IP_address_and_port(Endpoint_IP_address_and_port),
    #[asn(key = 2, extended = false)]
    Choice_extension(CP_TransportLayerAddress_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "3", extensible = true)]
pub struct CPTrafficType(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct CUDURIMInformation {
    pub victimg_nb_set_id: GNBSetID,
    pub rimrs_detection_status: RIMRSDetectionStatus,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<CUDURIMInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct CUDURadioInformationTransfer {
    pub protocol_i_es: CUDURadioInformationTransferProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum CUDURadioInformationType {
    #[asn(key = 0, extended = false)]
    RIM(CUDURIMInformation),
    #[asn(key = 1, extended = false)]
    Choice_extension(CUDURadioInformationType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct CUtoDURRCInformation {
    #[asn(optional_idx = 0)]
    pub cg_config_info: Option<CG_ConfigInfo>,
    #[asn(optional_idx = 1)]
    pub ue_capability_rat_container_list: Option<UE_CapabilityRAT_ContainerList>,
    #[asn(optional_idx = 2)]
    pub meas_config: Option<MeasConfig>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<CUtoDURRCInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum Cancel_all_Warning_Messages_Indicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Candidate_SpCell_Item {
    pub candidate_sp_cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Candidate_SpCell_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct Candidate_SpCell_List(pub Vec<Candidate_SpCell_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct CapacityValue {
    pub capacity_value: CapacityValueCapacityValue,
    #[asn(optional_idx = 0)]
    pub ssb_area_capacity_value_list: Option<SSBAreaCapacityValueList>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<CapacityValueIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "4", extensible = false)]
pub enum Cause {
    #[asn(key = 0, extended = false)]
    RadioNetwork(CauseRadioNetwork),
    #[asn(key = 1, extended = false)]
    Transport(CauseTransport),
    #[asn(key = 2, extended = false)]
    Protocol(CauseProtocol),
    #[asn(key = 3, extended = false)]
    Misc(CauseMisc),
    #[asn(key = 4, extended = false)]
    Choice_extension(Cause_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "4")]
pub enum CauseMisc {
    CONTROL_PROCESSING_OVERLOAD,
    NOT_ENOUGH_USER_PLANE_PROCESSING_RESOURCES,
    HARDWARE_FAILURE,
    OM_INTERVENTION,
    UNSPECIFIED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "6")]
pub enum CauseProtocol {
    TRANSFER_SYNTAX_ERROR,
    ABSTRACT_SYNTAX_ERROR_REJECT,
    ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY,
    MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE,
    SEMANTIC_ERROR,
    ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE,
    UNSPECIFIED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "10")]
pub enum CauseRadioNetwork {
    UNSPECIFIED,
    RL_FAILURE_RLC,
    UNKNOWN_OR_ALREADY_ALLOCATED_GNB_CU_UE_F1AP_ID,
    UNKNOWN_OR_ALREADY_ALLOCATED_GNB_DU_UE_F1AP_ID,
    UNKNOWN_OR_INCONSISTENT_PAIR_OF_UE_F1AP_ID,
    INTERACTION_WITH_OTHER_PROCEDURE,
    NOT_SUPPORTED_QCI_VALUE,
    ACTION_DESIRABLE_FOR_RADIO_REASONS,
    NO_RADIO_RESOURCES_AVAILABLE,
    PROCEDURE_CANCELLED,
    NORMAL_RELEASE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum CauseTransport {
    UNSPECIFIED,
    TRANSPORT_RESOURCE_UNAVAILABLE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum Cell_Direction {
    DL_ONLY,
    UL_ONLY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4095", extensible = true)]
pub struct Cell_Portion_ID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum CellBarred {
    BARRED,
    NOT_BARRED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "100", extensible = true)]
pub struct CellCapacityClassValue(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63", extensible = true)]
pub struct CellCoverageState(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct CellGroupConfig(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 5)]
pub struct CellMeasurementResultItem {
    pub cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub radio_resource_status: Option<RadioResourceStatus>,
    #[asn(optional_idx = 1)]
    pub composite_available_capacity_group: Option<CompositeAvailableCapacityGroup>,
    #[asn(optional_idx = 2)]
    pub slice_available_capacity: Option<SliceAvailableCapacity>,
    #[asn(optional_idx = 3)]
    pub numberof_active_u_es: Option<NumberofActiveUEs>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<CellMeasurementResultItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct CellMeasurementResultList(pub Vec<CellMeasurementResultItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum CellSize {
    VERYSMALL,
    SMALL,
    MEDIUM,
    LARGE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct CellToReportItem {
    pub cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub ssb_to_report_list: Option<SSBToReportList>,
    #[asn(optional_idx = 1)]
    pub slice_to_report_list: Option<SliceToReportList>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<CellToReportItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct CellToReportList(pub Vec<CellToReportItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct CellTrafficTrace {
    pub protocol_i_es: CellTrafficTraceProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct CellType {
    pub cell_size: CellSize,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<CellTypeIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum CellULConfigured {
    NONE,
    UL,
    SUL,
    UL_AND_SUL,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Cells_Broadcast_Cancelled_Item {
    pub nrcgi: NRCGI,
    pub number_of_broadcasts: NumberOfBroadcasts,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Cells_Broadcast_Cancelled_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Cells_Broadcast_Cancelled_List(pub Vec<Cells_Broadcast_Cancelled_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Cells_Broadcast_Completed_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Cells_Broadcast_Completed_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Cells_Broadcast_Completed_List(pub Vec<Cells_Broadcast_Completed_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Cells_Failed_to_be_Activated_List(pub Vec<Cells_Failed_to_be_Activated_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Cells_Failed_to_be_Activated_List_Item {
    pub nrcgi: NRCGI,
    pub cause: Cause,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Cells_Failed_to_be_Activated_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Cells_Status_Item {
    pub nrcgi: NRCGI,
    pub service_status: Service_Status,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Cells_Status_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "512"
)]
pub struct Cells_Status_List(pub Vec<Cells_Status_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Cells_To_Be_Broadcast_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Cells_To_Be_Broadcast_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Cells_To_Be_Broadcast_List(pub Vec<Cells_To_Be_Broadcast_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Cells_to_be_Activated_List(pub Vec<Cells_to_be_Activated_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct Cells_to_be_Activated_List_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub nrpci: Option<NRPCI>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Cells_to_be_Activated_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Cells_to_be_Barred_Item {
    pub nrcgi: NRCGI,
    pub cell_barred: CellBarred,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Cells_to_be_Barred_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Cells_to_be_Barred_List(pub Vec<Cells_to_be_Barred_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Cells_to_be_Deactivated_List(pub Vec<Cells_to_be_Deactivated_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Cells_to_be_Deactivated_List_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Cells_to_be_Deactivated_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct CellsForSON_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub neighbour_nr_cells_for_son_list: Option<NeighbourNR_CellsForSON_List>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<CellsForSON_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct CellsForSON_List(pub Vec<CellsForSON_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100", extensible = true)]
pub struct ChannelOccupancyTimePercentage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct Child_IAB_Nodes_NA_Resource_List(pub Vec<Child_IAB_Nodes_NA_Resource_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct Child_IAB_Nodes_NA_Resource_List_Item {
    pub gnb_cu_ue_f1ap_id: GNB_CU_UE_F1AP_ID,
    pub gnb_du_ue_f1ap_id: GNB_DU_UE_F1AP_ID,
    #[asn(optional_idx = 0)]
    pub na_resource_configuration_list: Option<NA_Resource_Configuration_List>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Child_IAB_Nodes_NA_Resource_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct Child_Node_Cells_List(pub Vec<Child_Node_Cells_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 10)]
pub struct Child_Node_Cells_List_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub iab_du_cell_resource_configuration_mode_info:
        Option<IAB_DU_Cell_Resource_Configuration_Mode_Info>,
    #[asn(optional_idx = 1)]
    pub iab_stc_info: Option<IAB_STC_Info>,
    #[asn(optional_idx = 2)]
    pub rach_config_common: Option<RACH_Config_Common>,
    #[asn(optional_idx = 3)]
    pub rach_config_common_iab: Option<RACH_Config_Common_IAB>,
    #[asn(optional_idx = 4)]
    pub csi_rs_configuration: Option<Child_Node_Cells_List_ItemCSI_RS_Configuration>,
    #[asn(optional_idx = 5)]
    pub sr_configuration: Option<Child_Node_Cells_List_ItemSR_Configuration>,
    #[asn(optional_idx = 6)]
    pub pdcch_config_sib1: Option<Child_Node_Cells_List_ItemPDCCH_ConfigSIB1>,
    #[asn(optional_idx = 7)]
    pub scs_common: Option<Child_Node_Cells_List_ItemSCS_Common>,
    #[asn(optional_idx = 8)]
    pub multiplexing_info: Option<MultiplexingInfo>,
    #[asn(optional_idx = 9)]
    pub ie_extensions: Option<Child_Node_Cells_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct Child_Nodes_List(pub Vec<Child_Nodes_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct Child_Nodes_List_Item {
    pub gnb_cu_ue_f1ap_id: GNB_CU_UE_F1AP_ID,
    pub gnb_du_ue_f1ap_id: GNB_DU_UE_F1AP_ID,
    #[asn(optional_idx = 0)]
    pub child_node_cells_list: Option<Child_Node_Cells_List>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Child_Nodes_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum Choice_TRP_Beam_Antenna_Info_Item {
    #[asn(key = 0, extended = false)]
    Reference(TRPID),
    #[asn(key = 1, extended = false)]
    Explicit(TRP_BeamAntennaExplicitInformation),
    #[asn(key = 2, extended = false)]
    NoChange(Choice_TRP_Beam_Antenna_Info_Item_noChange),
    #[asn(key = 3, extended = false)]
    Choice_extension(Choice_TRP_Beam_Antenna_Info_Item_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct CompositeAvailableCapacity {
    #[asn(optional_idx = 0)]
    pub cell_capacity_class_value: Option<CellCapacityClassValue>,
    pub capacity_value: CapacityValue,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<CompositeAvailableCapacityIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct CompositeAvailableCapacityGroup {
    pub composite_available_capacity_downlink: CompositeAvailableCapacity,
    pub composite_available_capacity_uplink: CompositeAvailableCapacity,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<CompositeAvailableCapacityGroupIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct ConditionalInterDUMobilityInformation {
    pub cho_trigger: CHOtrigger_InterDU,
    #[asn(optional_idx = 0)]
    pub targetg_nb_duuef1apid: Option<GNB_DU_UE_F1AP_ID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<ConditionalInterDUMobilityInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct ConditionalIntraDUMobilityInformation {
    pub cho_trigger: CHOtrigger_IntraDU,
    #[asn(optional_idx = 0)]
    pub target_cells_tocancel: Option<TargetCellList>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<ConditionalIntraDUMobilityInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "2", sz_ub = "2")]
pub struct Configured_EPS_TAC(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum ConfiguredTACIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "511", extensible = true)]
pub struct CoordinateID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct Coverage_Modification_Item {
    pub nrcgi: NRCGI,
    pub cell_coverage_state: CellCoverageState,
    #[asn(optional_idx = 0)]
    pub ssb_coverage_modification_list: Option<SSBCoverageModification_List>,
    #[asn(optional_idx = 1)]
    pub ie_extension: Option<Coverage_Modification_ItemIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Coverage_Modification_List(pub Vec<Coverage_Modification_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Coverage_Modification_Notification {
    pub coverage_modification_list: Coverage_Modification_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Coverage_Modification_NotificationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum Criticality {
    REJECT,
    IGNORE,
    NOTIFY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 6)]
pub struct CriticalityDiagnostics {
    #[asn(optional_idx = 0)]
    pub procedure_code: Option<ProcedureCode>,
    #[asn(optional_idx = 1)]
    pub triggering_message: Option<TriggeringMessage>,
    #[asn(optional_idx = 2)]
    pub procedure_criticality: Option<Criticality>,
    #[asn(optional_idx = 3)]
    pub transaction_id: Option<TransactionID>,
    #[asn(optional_idx = 4)]
    pub i_es_criticality_diagnostics: Option<CriticalityDiagnostics_IE_List>,
    #[asn(optional_idx = 5)]
    pub ie_extensions: Option<CriticalityDiagnosticsIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct CriticalityDiagnostics_IE_Item {
    pub ie_criticality: Criticality,
    pub ie_id: ProtocolIE_ID,
    pub type_of_error: TypeOfError,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<CriticalityDiagnostics_IE_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct CriticalityDiagnostics_IE_List(pub Vec<CriticalityDiagnostics_IE_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum DCBasedDuplicationConfigured {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct DL_PRS {
    pub prsid: DL_PRSPrsid,
    pub dl_prs_resource_set_id: PRS_Resource_Set_ID,
    #[asn(optional_idx = 0)]
    pub dl_prs_resource_id: Option<PRS_Resource_ID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DL_PRSIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "6", extensible = false)]
pub enum DL_PRSMutingPattern {
    #[asn(key = 0, extended = false)]
    Two(DL_PRSMutingPattern_two),
    #[asn(key = 1, extended = false)]
    Four(DL_PRSMutingPattern_four),
    #[asn(key = 2, extended = false)]
    Six(DL_PRSMutingPattern_six),
    #[asn(key = 3, extended = false)]
    Eight(DL_PRSMutingPattern_eight),
    #[asn(key = 4, extended = false)]
    Sixteen(DL_PRSMutingPattern_sixteen),
    #[asn(key = 5, extended = false)]
    Thirty_two(DL_PRSMutingPattern_thirty_two),
    #[asn(key = 6, extended = false)]
    Choice_extension(DL_PRSMutingPattern_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum DL_PRSResourceARPLocation {
    #[asn(key = 0, extended = false)]
    RelativeGeodeticLocation(RelativeGeodeticLocation),
    #[asn(key = 1, extended = false)]
    RelativeCartesianLocation(RelativeCartesianLocation),
    #[asn(key = 2, extended = false)]
    Choice_Extension(DL_PRSResourceARPLocation_choice_Extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum DL_PRSResourceSetARPLocation {
    #[asn(key = 0, extended = false)]
    RelativeGeodeticLocation(RelativeGeodeticLocation),
    #[asn(key = 1, extended = false)]
    RelativeCartesianLocation(RelativeCartesianLocation),
    #[asn(key = 2, extended = false)]
    Choice_Extension(DL_PRSResourceSetARPLocation_choice_Extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct DL_UP_TNL_Address_to_Update_List(pub Vec<DL_UP_TNL_Address_to_Update_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct DL_UP_TNL_Address_to_Update_List_Item {
    pub old_ip_adress: TransportLayerAddress,
    pub new_ip_adress: TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DL_UP_TNL_Address_to_Update_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct DLPRSResourceARP {
    pub dl_prs_resource_id: PRS_Resource_ID,
    pub dl_prs_resource_arp_location: DL_PRSResourceARPLocation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DLPRSResourceARPIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct DLPRSResourceCoordinates {
    pub listof_dl_prs_resource_set_arp: DLPRSResourceCoordinatesListofDL_PRSResourceSetARP,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DLPRSResourceCoordinatesIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct DLPRSResourceID_Item {
    pub dl_prs_resource_id: PRS_Resource_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DLPRSResourceID_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct DLPRSResourceSetARP {
    pub dl_prs_resource_set_id: PRS_Resource_Set_ID,
    pub dl_prs_resource_set_arp_location: DL_PRSResourceSetARPLocation,
    pub listof_dl_prs_resource_arp: DLPRSResourceSetARPListofDL_PRSResourceARP,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DLPRSResourceSetARPIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct DLRRCMessageTransfer {
    pub protocol_i_es: DLRRCMessageTransferProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct DLUPTNLInformation_ToBeSetup_Item {
    pub dluptnl_information: UPTransportLayerInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DLUPTNLInformation_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "2")]
pub struct DLUPTNLInformation_ToBeSetup_List(pub Vec<DLUPTNLInformation_ToBeSetup_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum DRB_Activity {
    ACTIVE,
    NOT_ACTIVE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct DRB_Activity_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub drb_activity: Option<DRB_Activity>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DRB_Activity_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRB_Activity_List(pub Vec<DRB_Activity_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct DRB_Information {
    pub drb_qo_s: QoSFlowLevelQoSParameters,
    pub snssai: SNSSAI,
    #[asn(optional_idx = 0)]
    pub notification_control: Option<NotificationControl>,
    pub flows_mapped_to_drb_list: Flows_Mapped_To_DRB_List,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DRB_InformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct DRB_Notify_Item {
    pub drbid: DRBID,
    pub notification_cause: Notification_Cause,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DRB_Notify_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRB_Notify_List(pub Vec<DRB_Notify_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "32", extensible = true)]
pub struct DRBID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct DRBs_FailedToBeModified_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DRBs_FailedToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_FailedToBeModified_List(pub Vec<DRBs_FailedToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct DRBs_FailedToBeSetup_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DRBs_FailedToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_FailedToBeSetup_List(pub Vec<DRBs_FailedToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct DRBs_FailedToBeSetupMod_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DRBs_FailedToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_FailedToBeSetupMod_List(pub Vec<DRBs_FailedToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct DRBs_Modified_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub lcid: Option<LCID>,
    pub dluptnl_information_to_be_setup_list: DLUPTNLInformation_ToBeSetup_List,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DRBs_Modified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_Modified_List(pub Vec<DRBs_Modified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct DRBs_ModifiedConf_Item {
    pub drbid: DRBID,
    pub uluptnl_information_to_be_setup_list: ULUPTNLInformation_ToBeSetup_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DRBs_ModifiedConf_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_ModifiedConf_List(pub Vec<DRBs_ModifiedConf_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct DRBs_Required_ToBeModified_Item {
    pub drbid: DRBID,
    pub dluptnl_information_to_be_setup_list: DLUPTNLInformation_ToBeSetup_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DRBs_Required_ToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_Required_ToBeModified_List(pub Vec<DRBs_Required_ToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct DRBs_Required_ToBeReleased_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DRBs_Required_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_Required_ToBeReleased_List(pub Vec<DRBs_Required_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct DRBs_Setup_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub lcid: Option<LCID>,
    pub dluptnl_information_to_be_setup_list: DLUPTNLInformation_ToBeSetup_List,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DRBs_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_Setup_List(pub Vec<DRBs_Setup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct DRBs_SetupMod_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub lcid: Option<LCID>,
    pub dluptnl_information_to_be_setup_list: DLUPTNLInformation_ToBeSetup_List,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<DRBs_SetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_SetupMod_List(pub Vec<DRBs_SetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct DRBs_ToBeModified_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub qo_s_information: Option<QoSInformation>,
    pub uluptnl_information_to_be_setup_list: ULUPTNLInformation_ToBeSetup_List,
    #[asn(optional_idx = 1)]
    pub ul_configuration: Option<ULConfiguration>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<DRBs_ToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_ToBeModified_List(pub Vec<DRBs_ToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct DRBs_ToBeReleased_Item {
    pub drbid: DRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DRBs_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_ToBeReleased_List(pub Vec<DRBs_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct DRBs_ToBeSetup_Item {
    pub drbid: DRBID,
    pub qo_s_information: QoSInformation,
    pub uluptnl_information_to_be_setup_list: ULUPTNLInformation_ToBeSetup_List,
    pub rlc_mode: RLCMode,
    #[asn(optional_idx = 0)]
    pub ul_configuration: Option<ULConfiguration>,
    #[asn(optional_idx = 1)]
    pub duplication_activation: Option<DuplicationActivation>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<DRBs_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_ToBeSetup_List(pub Vec<DRBs_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct DRBs_ToBeSetupMod_Item {
    pub drbid: DRBID,
    pub qo_s_information: QoSInformation,
    pub uluptnl_information_to_be_setup_list: ULUPTNLInformation_ToBeSetup_List,
    pub rlc_mode: RLCMode,
    #[asn(optional_idx = 0)]
    pub ul_configuration: Option<ULConfiguration>,
    #[asn(optional_idx = 1)]
    pub duplication_activation: Option<DuplicationActivation>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<DRBs_ToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DRBs_ToBeSetupMod_List(pub Vec<DRBs_ToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct DRX_Config(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "10239")]
pub struct DRX_LongCycleStartOffset(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum DRXConfigurationIndicator {
    RELEASE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct DRXCycle {
    pub long_drx_cycle_length: LongDRXCycleLength,
    #[asn(optional_idx = 0)]
    pub short_drx_cycle_length: Option<ShortDRXCycleLength>,
    #[asn(optional_idx = 1)]
    pub short_drx_cycle_timer: Option<ShortDRXCycleTimer>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<DRXCycleIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "6", sz_ub = "6")]
pub struct DSCP(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "0", sz_ub = "64")]
pub struct DSInformationList(pub Vec<DSCP>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum DU_RX_MT_RX {
    SUPPORTED,
    NOT_SUPPORTED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum DU_RX_MT_RX_Extend {
    SUPPORTED,
    NOT_SUPPORTED,
    SUPPORTED_AND_FDM_REQUIRED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum DU_RX_MT_TX {
    SUPPORTED,
    NOT_SUPPORTED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum DU_RX_MT_TX_Extend {
    SUPPORTED,
    NOT_SUPPORTED,
    SUPPORTED_AND_FDM_REQUIRED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum DU_TX_MT_RX {
    SUPPORTED,
    NOT_SUPPORTED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum DU_TX_MT_RX_Extend {
    SUPPORTED,
    NOT_SUPPORTED,
    SUPPORTED_AND_FDM_REQUIRED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum DU_TX_MT_TX {
    SUPPORTED,
    NOT_SUPPORTED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum DU_TX_MT_TX_Extend {
    SUPPORTED,
    NOT_SUPPORTED,
    SUPPORTED_AND_FDM_REQUIRED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct DUCURIMInformation {
    pub victimg_nb_set_id: GNBSetID,
    pub rimrs_detection_status: RIMRSDetectionStatus,
    pub aggressor_cell_list: AggressorCellList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<DUCURIMInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct DUCURadioInformationTransfer {
    pub protocol_i_es: DUCURadioInformationTransferProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum DUCURadioInformationType {
    #[asn(key = 0, extended = false)]
    RIM(DUCURIMInformation),
    #[asn(key = 1, extended = false)]
    Choice_extension(DUCURadioInformationType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum DUF_Slot_Config_Item {
    #[asn(key = 0, extended = false)]
    ExplicitFormat(ExplicitFormat),
    #[asn(key = 1, extended = false)]
    ImplicitFormat(ImplicitFormat),
    #[asn(key = 2, extended = false)]
    Choice_extension(DUF_Slot_Config_Item_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "320"
)]
pub struct DUF_Slot_Config_List(pub Vec<DUF_Slot_Config_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "254")]
pub struct DUFSlotformatIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "7")]
pub enum DUFTransmissionPeriodicity {
    MS0P5,
    MS0P625,
    MS1,
    MS1P25,
    MS2,
    MS2P5,
    MS5,
    MS10,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct DUtoCURRCContainer(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct DUtoCURRCInformation {
    pub cell_group_config: CellGroupConfig,
    #[asn(optional_idx = 0)]
    pub meas_gap_config: Option<MeasGapConfig>,
    #[asn(optional_idx = 1)]
    pub requested_p_max_fr1: Option<DUtoCURRCInformationRequestedP_MaxFR1>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<DUtoCURRCInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct DeactivateTrace {
    pub protocol_i_es: DeactivateTraceProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Dedicated_SIDelivery_NeededUE_Item {
    pub gnb_cu_ue_f1ap_id: GNB_CU_UE_F1AP_ID,
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Dedicated_SIDelivery_NeededUE_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct Dedicated_SIDelivery_NeededUE_List(pub Vec<Dedicated_SIDelivery_NeededUE_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum DuplicationActivation {
    ACTIVE,
    INACTIVE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum DuplicationIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum DuplicationState {
    ACTIVE,
    INACTIVE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 5)]
pub struct Dynamic5QIDescriptor {
    pub qo_s_priority_level: Dynamic5QIDescriptorQoSPriorityLevel,
    pub packet_delay_budget: PacketDelayBudget,
    pub packet_error_rate: PacketErrorRate,
    #[asn(optional_idx = 0)]
    pub five_qi: Option<Dynamic5QIDescriptorFiveQI>,
    #[asn(optional_idx = 1)]
    pub delay_critical: Option<Dynamic5QIDescriptorDelayCritical>,
    #[asn(optional_idx = 2)]
    pub averaging_window: Option<AveragingWindow>,
    #[asn(optional_idx = 3)]
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<Dynamic5QIDescriptorIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct DynamicPQIDescriptor {
    #[asn(optional_idx = 0)]
    pub resource_type: Option<DynamicPQIDescriptorResourceType>,
    pub qo_s_priority_level: DynamicPQIDescriptorQoSPriorityLevel,
    pub packet_delay_budget: PacketDelayBudget,
    pub packet_error_rate: PacketErrorRate,
    #[asn(optional_idx = 1)]
    pub averaging_window: Option<AveragingWindow>,
    #[asn(optional_idx = 2)]
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<DynamicPQIDescriptorIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct E_CID_MeasuredResults_Item {
    pub e_cid_measured_results_value: E_CID_MeasuredResults_Value,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<E_CID_MeasuredResults_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct E_CID_MeasuredResults_List(pub Vec<E_CID_MeasuredResults_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum E_CID_MeasuredResults_Value {
    #[asn(key = 0, extended = false)]
    ValueAngleofArrivalNR(UL_AoA),
    #[asn(key = 1, extended = false)]
    Choice_extension(E_CID_MeasuredResults_Value_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct E_CID_MeasurementQuantities(pub Vec<E_CID_MeasurementQuantities_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct E_CID_MeasurementQuantities_Item {
    pub e_ci_dmeasurement_quantities_value: E_CID_MeasurementQuantitiesValue,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<E_CID_MeasurementQuantities_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum E_CID_MeasurementQuantitiesValue {
    DEFAULT,
    ANGLE_OF_ARRIVAL_NR,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct E_CID_MeasurementResult {
    #[asn(optional_idx = 0)]
    pub geographical_coordinates: Option<GeographicalCoordinates>,
    #[asn(optional_idx = 1)]
    pub measured_results_list: Option<E_CID_MeasuredResults_List>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<E_CID_MeasurementResultIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum E_CID_ReportCharacteristics {
    ON_DEMAND,
    PERIODIC,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct E_CIDMeasurementFailureIndication {
    pub protocol_i_es: E_CIDMeasurementFailureIndicationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct E_CIDMeasurementInitiationFailure {
    pub protocol_i_es: E_CIDMeasurementInitiationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct E_CIDMeasurementInitiationRequest {
    pub protocol_i_es: E_CIDMeasurementInitiationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct E_CIDMeasurementInitiationResponse {
    pub protocol_i_es: E_CIDMeasurementInitiationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct E_CIDMeasurementReport {
    pub protocol_i_es: E_CIDMeasurementReportProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct E_CIDMeasurementTerminationCommand {
    pub protocol_i_es: E_CIDMeasurementTerminationCommandProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "28", sz_ub = "28")]
pub struct EUTRA_Cell_ID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct EUTRA_Coex_FDD_Info {
    #[asn(optional_idx = 0)]
    pub ul_earfcn: Option<ExtendedEARFCN>,
    pub dl_earfcn: ExtendedEARFCN,
    #[asn(optional_idx = 1)]
    pub ul_transmission_bandwidth: Option<EUTRA_Transmission_Bandwidth>,
    pub dl_transmission_bandwidth: EUTRA_Transmission_Bandwidth,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<EUTRA_Coex_FDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = true)]
pub enum EUTRA_Coex_Mode_Info {
    #[asn(key = 0, extended = false)]
    FDD(EUTRA_Coex_FDD_Info),
    #[asn(key = 1, extended = false)]
    TDD(EUTRA_Coex_TDD_Info),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct EUTRA_Coex_TDD_Info {
    pub earfcn: ExtendedEARFCN,
    pub transmission_bandwidth: EUTRA_Transmission_Bandwidth,
    pub subframe_assignment: EUTRA_SubframeAssignment,
    pub special_subframe_info: EUTRA_SpecialSubframe_Info,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<EUTRA_Coex_TDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum EUTRA_CyclicPrefixDL {
    NORMAL,
    EXTENDED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum EUTRA_CyclicPrefixUL {
    NORMAL,
    EXTENDED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct EUTRA_FDD_Info {
    pub ul_offset_to_point_a: OffsetToPointA,
    pub dl_offset_to_point_a: OffsetToPointA,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<EUTRA_FDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum EUTRA_Mode_Info {
    #[asn(key = 0, extended = false)]
    EUTRAFDD(EUTRA_FDD_Info),
    #[asn(key = 1, extended = false)]
    EUTRATDD(EUTRA_TDD_Info),
    #[asn(key = 2, extended = false)]
    Choice_extension(EUTRA_Mode_Info_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct EUTRA_NR_CellResourceCoordinationReq_Container(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct EUTRA_NR_CellResourceCoordinationReqAck_Container(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct EUTRA_PRACH_Configuration {
    pub root_sequence_index: EUTRA_PRACH_ConfigurationRootSequenceIndex,
    pub zero_correlation_index: EUTRA_PRACH_ConfigurationZeroCorrelationIndex,
    pub high_speed_flag: EUTRA_PRACH_ConfigurationHighSpeedFlag,
    pub prach_freq_offset: EUTRA_PRACH_ConfigurationPrach_FreqOffset,
    #[asn(optional_idx = 0)]
    pub prach_config_index: Option<EUTRA_PRACH_ConfigurationPrach_ConfigIndex>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<EUTRA_PRACH_ConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct EUTRA_SpecialSubframe_Info {
    pub special_subframe_patterns: EUTRA_SpecialSubframePatterns,
    pub cyclic_prefix_dl: EUTRA_CyclicPrefixDL,
    pub cyclic_prefix_ul: EUTRA_CyclicPrefixUL,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<EUTRA_SpecialSubframe_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "10")]
pub enum EUTRA_SpecialSubframePatterns {
    SSP0,
    SSP1,
    SSP2,
    SSP3,
    SSP4,
    SSP5,
    SSP6,
    SSP7,
    SSP8,
    SSP9,
    SSP10,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "6")]
pub enum EUTRA_SubframeAssignment {
    SA0,
    SA1,
    SA2,
    SA3,
    SA4,
    SA5,
    SA6,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct EUTRA_TDD_Info {
    pub offset_to_point_a: OffsetToPointA,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<EUTRA_TDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "5")]
pub enum EUTRA_Transmission_Bandwidth {
    BW6,
    BW15,
    BW25,
    BW50,
    BW75,
    BW100,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct EUTRACells_List(pub Vec<EUTRACells_List_item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct EUTRACells_List_item {
    pub eutra_cell_id: EUTRA_Cell_ID,
    pub served_eutra_cells_information: Served_EUTRA_Cells_Information,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<EUTRACells_List_itemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct EUTRANQoS {
    pub qci: QCI,
    pub allocation_and_retention_priority: AllocationAndRetentionPriority,
    #[asn(optional_idx = 0)]
    pub gbr_qos_information: Option<GBR_QosInformation>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<EUTRANQoSIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct EgressBHRLCCHItem {
    pub next_hop_bap_address: BAPAddress,
    pub bhrlc_channel_id: BHRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<EgressBHRLCCHItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "2")]
pub struct EgressBHRLCCHList(pub Vec<EgressBHRLCCHItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum EgressNonF1terminatingTopologyIndicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Endpoint_IP_address_and_port {
    pub endpoint_ip_address: TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Endpoint_IP_address_and_portIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-100", ub = "-50", extensible = true)]
pub struct EnergyDetectionThreshold(pub i8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ErrorIndication {
    pub protocol_i_es: ErrorIndicationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum EventType {
    ON_DEMAND,
    PERIODIC,
    STOP,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum ExecuteDuplication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Expected_Azimuth_AoA {
    pub expected_azimuth_ao_a_value: Expected_Value_AoA,
    pub expected_azimuth_ao_a_uncertainty: Uncertainty_range_AoA,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Expected_Azimuth_AoAIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct Expected_UL_AoA {
    pub expected_azimuth_ao_a: Expected_Azimuth_AoA,
    #[asn(optional_idx = 0)]
    pub expected_zenith_ao_a: Option<Expected_Zenith_AoA>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Expected_UL_AoAIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3599")]
pub struct Expected_Value_AoA(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1799")]
pub struct Expected_Value_ZoA(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Expected_Zenith_AoA {
    pub expected_zenith_ao_a_value: Expected_Value_ZoA,
    pub expected_zenith_ao_a_uncertainty: Uncertainty_range_ZoA,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Expected_Zenith_AoAIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Expected_ZoA_only {
    pub expected_zo_a_only: Expected_Zenith_AoA,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Expected_ZoA_onlyIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct ExplicitFormat {
    pub permutation: Permutation,
    #[asn(optional_idx = 0)]
    pub noof_downlink_symbols: Option<NoofDownlinkSymbols>,
    #[asn(optional_idx = 1)]
    pub noof_uplink_symbols: Option<NoofUplinkSymbols>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<ExplicitFormatIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct Extended_GNB_CU_Name {
    #[asn(optional_idx = 0)]
    pub gnb_cu_name_visible_string: Option<GNB_CU_NameVisibleString>,
    #[asn(optional_idx = 1)]
    pub gnb_cu_name_utf8_string: Option<GNB_CU_NameUTF8String>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<Extended_GNB_CU_NameIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct Extended_GNB_DU_Name {
    #[asn(optional_idx = 0)]
    pub gnb_du_name_visible_string: Option<GNB_DU_NameVisibleString>,
    #[asn(optional_idx = 1)]
    pub gnb_du_name_utf8_string: Option<GNB_DU_NameUTF8String>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<Extended_GNB_DU_NameIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct ExtendedAdditionalPathList(pub Vec<ExtendedAdditionalPathList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct ExtendedAdditionalPathList_Item {
    pub relative_time_of_path: RelativePathDelay,
    #[asn(optional_idx = 0)]
    pub path_quality: Option<TRPMeasurementQuality>,
    #[asn(optional_idx = 1)]
    pub multiple_ul_ao_a: Option<MultipleULAoA>,
    #[asn(optional_idx = 2)]
    pub path_power: Option<UL_SRS_RSRPP>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<ExtendedAdditionalPathList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ExtendedAvailablePLMN_Item {
    pub plmn_identity: PLMN_Identity,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ExtendedAvailablePLMN_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "6")]
pub struct ExtendedAvailablePLMN_List(pub Vec<ExtendedAvailablePLMN_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "262143")]
pub struct ExtendedEARFCN(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "65535", extensible = true)]
pub struct ExtendedPacketDelayBudget(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct ExtendedServedPLMNs_Item {
    pub plmn_identity: PLMN_Identity,
    #[asn(optional_idx = 0)]
    pub tai_slice_support_list: Option<SliceSupportList>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<ExtendedServedPLMNs_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "6")]
pub struct ExtendedServedPLMNs_List(pub Vec<ExtendedServedPLMNs_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ExtendedSliceSupportList(pub Vec<SliceSupportItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum F1AP_PDU {
    #[asn(key = 0, extended = false)]
    InitiatingMessage(InitiatingMessage),
    #[asn(key = 1, extended = false)]
    SuccessfulOutcome(SuccessfulOutcome),
    #[asn(key = 2, extended = false)]
    UnsuccessfulOutcome(UnsuccessfulOutcome),
    #[asn(key = 3, extended = false)]
    Choice_extension(F1AP_PDU_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum F1CPathNRDC {
    MCG,
    SCG,
    BOTH,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum F1CPathNSA {
    LTE,
    NR,
    BOTH,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct F1CTransferPath {
    pub f1c_path_nsa: F1CPathNSA,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<F1CTransferPathIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct F1CTransferPathNRDC {
    pub f1c_path_nrdc: F1CPathNRDC,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<F1CTransferPathNRDCIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct F1RemovalFailure {
    pub protocol_i_es: F1RemovalFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct F1RemovalRequest {
    pub protocol_i_es: F1RemovalRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct F1RemovalResponse {
    pub protocol_i_es: F1RemovalResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct F1SetupFailure {
    pub protocol_i_es: F1SetupFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct F1SetupRequest {
    pub protocol_i_es: F1SetupRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct F1SetupResponse {
    pub protocol_i_es: F1SetupResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct FDD_Info {
    pub ul_nr_freq_info: NRFreqInfo,
    pub dl_nr_freq_info: NRFreqInfo,
    pub ul_transmission_bandwidth: Transmission_Bandwidth,
    pub dl_transmission_bandwidth: Transmission_Bandwidth,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<FDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct FDD_InfoRel16 {
    #[asn(optional_idx = 0)]
    pub ul_freq_info: Option<FreqInfoRel16>,
    #[asn(optional_idx = 1)]
    pub sul_freq_info: Option<FreqInfoRel16>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<FDD_InfoRel16IE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "6")]
pub enum FR1_Bandwidth {
    BW5,
    BW10,
    BW20,
    BW40,
    BW50,
    BW80,
    BW100,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum FR2_Bandwidth {
    BW50,
    BW100,
    BW200,
    BW400,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 6)]
pub struct FiveG_ProSeAuthorized {
    #[asn(optional_idx = 0)]
    pub five_g_pro_se_direct_discovery: Option<FiveG_ProSeDirectDiscovery>,
    #[asn(optional_idx = 1)]
    pub five_g_pro_se_direct_communication: Option<FiveG_ProSeDirectCommunication>,
    #[asn(optional_idx = 2)]
    pub five_g_pro_se_layer2_u_eto_network_relay: Option<FiveG_ProSeLayer2UEtoNetworkRelay>,
    #[asn(optional_idx = 3)]
    pub five_g_pro_se_layer3_u_eto_network_relay: Option<FiveG_ProSeLayer3UEtoNetworkRelay>,
    #[asn(optional_idx = 4)]
    pub five_g_pro_se_layer2_remote_ue: Option<FiveG_ProSeLayer2RemoteUE>,
    #[asn(optional_idx = 5)]
    pub ie_extensions: Option<FiveG_ProSeAuthorizedIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum FiveG_ProSeDirectCommunication {
    AUTHORIZED,
    NOT_AUTHORIZED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum FiveG_ProSeDirectDiscovery {
    AUTHORIZED,
    NOT_AUTHORIZED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum FiveG_ProSeLayer2RemoteUE {
    AUTHORIZED,
    NOT_AUTHORIZED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum FiveG_ProSeLayer2UEtoNetworkRelay {
    AUTHORIZED,
    NOT_AUTHORIZED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum FiveG_ProSeLayer3UEtoNetworkRelay {
    AUTHORIZED,
    NOT_AUTHORIZED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "3", sz_ub = "3")]
pub struct FiveGS_TAC(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Flows_Mapped_To_DRB_Item {
    pub qo_s_flow_identifier: QoSFlowIdentifier,
    pub qo_s_flow_level_qo_s_parameters: QoSFlowLevelQoSParameters,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Flows_Mapped_To_DRB_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct Flows_Mapped_To_DRB_List(pub Vec<Flows_Mapped_To_DRB_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct FlowsMappedToSLDRB_Item {
    pub pc5_qo_s_flow_identifier: PC5QoSFlowIdentifier,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<FlowsMappedToSLDRB_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "2048"
)]
pub struct FlowsMappedToSLDRB_List(pub Vec<FlowsMappedToSLDRB_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct FreqBandNrItem {
    pub freq_band_indicator_nr: FreqBandNrItemFreqBandIndicatorNr,
    pub supported_sul_band_list: FreqBandNrItemSupportedSULBandList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<FreqBandNrItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum FreqDomainLength {
    #[asn(key = 0, extended = false)]
    L839(L839Info),
    #[asn(key = 1, extended = false)]
    L139(L139Info),
    #[asn(key = 2, extended = false)]
    Choice_extension(FreqDomainLength_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct FreqInfoRel16 {
    #[asn(optional_idx = 0)]
    pub nrarfcn: Option<FreqInfoRel16NRARFCN>,
    #[asn(optional_idx = 1)]
    pub frequency_shift7p5khz: Option<FrequencyShift7p5khz>,
    #[asn(optional_idx = 2)]
    pub carrier_list: Option<NRCarrierList>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<FreqInfoRel16IE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Frequency_Domain_HSNA_Configuration_Item {
    pub rb_set_index: Frequency_Domain_HSNA_Configuration_ItemRBSetIndex,
    pub frequency_domain_hsna_slot_configuration_list:
        Frequency_Domain_HSNA_Slot_Configuration_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Frequency_Domain_HSNA_Configuration_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct Frequency_Domain_HSNA_Configuration_List(
    pub Vec<Frequency_Domain_HSNA_Configuration_Item>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 5)]
pub struct Frequency_Domain_HSNA_Slot_Configuration_Item {
    #[asn(optional_idx = 0)]
    pub slot_index: Option<Frequency_Domain_HSNA_Slot_Configuration_ItemSlotIndex>,
    #[asn(optional_idx = 1)]
    pub hsna_downlink: Option<HSNADownlink>,
    #[asn(optional_idx = 2)]
    pub hsna_uplink: Option<HSNAUplink>,
    #[asn(optional_idx = 3)]
    pub hsna_flexible: Option<HSNAFlexible>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<Frequency_Domain_HSNA_Slot_Configuration_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "5120"
)]
pub struct Frequency_Domain_HSNA_Slot_Configuration_List(
    pub Vec<Frequency_Domain_HSNA_Slot_Configuration_Item>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum FrequencyShift7p5khz {
    FALSE,
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum FullConfiguration {
    FULL,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct GBR_QoSFlowInformation {
    pub max_flow_bit_rate_downlink: BitRate,
    pub max_flow_bit_rate_uplink: BitRate,
    pub guaranteed_flow_bit_rate_downlink: BitRate,
    pub guaranteed_flow_bit_rate_uplink: BitRate,
    #[asn(optional_idx = 0)]
    pub max_packet_loss_rate_downlink: Option<MaxPacketLossRate>,
    #[asn(optional_idx = 1)]
    pub max_packet_loss_rate_uplink: Option<MaxPacketLossRate>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<GBR_QoSFlowInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct GBR_QosInformation {
    pub e_rab_maximum_bitrate_dl: BitRate,
    pub e_rab_maximum_bitrate_ul: BitRate,
    pub e_rab_guaranteed_bitrate_dl: BitRate,
    pub e_rab_guaranteed_bitrate_ul: BitRate,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GBR_QosInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4294967295")]
pub struct GNB_CU_MBS_F1AP_ID(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "PrintableString",
    sz_extensible = true,
    sz_lb = "1",
    sz_ub = "150"
)]
pub struct GNB_CU_Name(pub String);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "UTF8String", sz_extensible = true, sz_lb = "1", sz_ub = "150")]
pub struct GNB_CU_NameUTF8String(pub String);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "VisibleString",
    sz_extensible = true,
    sz_lb = "1",
    sz_ub = "150"
)]
pub struct GNB_CU_NameVisibleString(pub String);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct GNB_CU_TNL_Association_Failed_To_Setup_Item {
    pub tnl_association_transport_layer_address: CP_TransportLayerAddress,
    pub cause: Cause,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GNB_CU_TNL_Association_Failed_To_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct GNB_CU_TNL_Association_Failed_To_Setup_List(
    pub Vec<GNB_CU_TNL_Association_Failed_To_Setup_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct GNB_CU_TNL_Association_Setup_Item {
    pub tnl_association_transport_layer_address: CP_TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GNB_CU_TNL_Association_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct GNB_CU_TNL_Association_Setup_List(pub Vec<GNB_CU_TNL_Association_Setup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct GNB_CU_TNL_Association_To_Add_Item {
    pub tnl_association_transport_layer_address: CP_TransportLayerAddress,
    pub tnl_association_usage: TNLAssociationUsage,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GNB_CU_TNL_Association_To_Add_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct GNB_CU_TNL_Association_To_Add_List(pub Vec<GNB_CU_TNL_Association_To_Add_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct GNB_CU_TNL_Association_To_Remove_Item {
    pub tnl_association_transport_layer_address: CP_TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GNB_CU_TNL_Association_To_Remove_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct GNB_CU_TNL_Association_To_Remove_List(
    pub Vec<GNB_CU_TNL_Association_To_Remove_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct GNB_CU_TNL_Association_To_Update_Item {
    pub tnl_association_transport_layer_address: CP_TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub tnl_association_usage: Option<TNLAssociationUsage>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<GNB_CU_TNL_Association_To_Update_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct GNB_CU_TNL_Association_To_Update_List(
    pub Vec<GNB_CU_TNL_Association_To_Update_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4294967295")]
pub struct GNB_CU_UE_F1AP_ID(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct GNB_CUSystemInformation {
    pub sibtypetobeupdatedlist: GNB_CUSystemInformationSibtypetobeupdatedlist,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GNB_CUSystemInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct GNB_DU_Cell_Resource_Configuration {
    pub subcarrier_spacing: SubcarrierSpacing,
    #[asn(optional_idx = 0)]
    pub duf_transmission_periodicity: Option<DUFTransmissionPeriodicity>,
    #[asn(optional_idx = 1)]
    pub duf_slot_config_list: Option<DUF_Slot_Config_List>,
    pub hsna_transmission_periodicity: HSNATransmissionPeriodicity,
    #[asn(optional_idx = 2)]
    pub hs_nsa_slot_config_list: Option<HSNASlotConfigList>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<GNB_DU_Cell_Resource_ConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "68719476735")]
pub struct GNB_DU_ID(pub u64);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4294967295")]
pub struct GNB_DU_MBS_F1AP_ID(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "PrintableString",
    sz_extensible = true,
    sz_lb = "1",
    sz_ub = "150"
)]
pub struct GNB_DU_Name(pub String);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "UTF8String", sz_extensible = true, sz_lb = "1", sz_ub = "150")]
pub struct GNB_DU_NameUTF8String(pub String);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "VisibleString",
    sz_extensible = true,
    sz_lb = "1",
    sz_ub = "150"
)]
pub struct GNB_DU_NameVisibleString(pub String);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct GNB_DU_Served_Cells_Item {
    pub served_cell_information: Served_Cell_Information,
    #[asn(optional_idx = 0)]
    pub gnb_du_system_information: Option<GNB_DU_System_Information>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<GNB_DU_Served_Cells_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct GNB_DU_Served_Cells_List(pub Vec<GNB_DU_Served_Cells_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct GNB_DU_System_Information {
    pub mib_message: MIB_message,
    pub sib1_message: SIB1_message,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GNB_DU_System_InformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct GNB_DU_TNL_Association_To_Remove_Item {
    pub tnl_association_transport_layer_address: CP_TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub tnl_association_transport_layer_addressg_nbcu: Option<CP_TransportLayerAddress>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<GNB_DU_TNL_Association_To_Remove_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct GNB_DU_TNL_Association_To_Remove_List(
    pub Vec<GNB_DU_TNL_Association_To_Remove_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4294967295")]
pub struct GNB_DU_UE_F1AP_ID(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum GNB_DUConfigurationQuery {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct GNB_RxTxTimeDiff {
    pub rx_tx_time_diff: GNBRxTxTimeDiffMeas,
    #[asn(optional_idx = 0)]
    pub additional_path_list: Option<AdditionalPath_List>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<GNB_RxTxTimeDiffIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBCUConfigurationUpdate {
    pub protocol_i_es: GNBCUConfigurationUpdateProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBCUConfigurationUpdateAcknowledge {
    pub protocol_i_es: GNBCUConfigurationUpdateAcknowledgeProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBCUConfigurationUpdateFailure {
    pub protocol_i_es: GNBCUConfigurationUpdateFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4095", extensible = true)]
pub struct GNBCUMeasurementID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUConfigurationUpdate {
    pub protocol_i_es: GNBDUConfigurationUpdateProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUConfigurationUpdateAcknowledge {
    pub protocol_i_es: GNBDUConfigurationUpdateAcknowledgeProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUConfigurationUpdateFailure {
    pub protocol_i_es: GNBDUConfigurationUpdateFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4095", extensible = true)]
pub struct GNBDUMeasurementID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum GNBDUOverloadInformation {
    OVERLOADED,
    NOT_OVERLOADED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUResourceConfiguration {
    pub protocol_i_es: GNBDUResourceConfigurationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUResourceConfigurationAcknowledge {
    pub protocol_i_es: GNBDUResourceConfigurationAcknowledgeProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUResourceConfigurationFailure {
    pub protocol_i_es: GNBDUResourceConfigurationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUResourceCoordinationRequest {
    pub protocol_i_es: GNBDUResourceCoordinationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUResourceCoordinationResponse {
    pub protocol_i_es: GNBDUResourceCoordinationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct GNBDUStatusIndication {
    pub protocol_i_es: GNBDUStatusIndicationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct GNBDUUESliceMaximumBitRateItem {
    pub snssai: SNSSAI,
    pub ue_slice_maximum_bit_rate_ul: BitRate,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GNBDUUESliceMaximumBitRateItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct GNBDUUESliceMaximumBitRateList(pub Vec<GNBDUUESliceMaximumBitRateItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "6", extensible = false)]
pub enum GNBRxTxTimeDiffMeas {
    #[asn(key = 0, extended = false)]
    K0(GNBRxTxTimeDiffMeas_k0),
    #[asn(key = 1, extended = false)]
    K1(GNBRxTxTimeDiffMeas_k1),
    #[asn(key = 2, extended = false)]
    K2(GNBRxTxTimeDiffMeas_k2),
    #[asn(key = 3, extended = false)]
    K3(GNBRxTxTimeDiffMeas_k3),
    #[asn(key = 4, extended = false)]
    K4(GNBRxTxTimeDiffMeas_k4),
    #[asn(key = 5, extended = false)]
    K5(GNBRxTxTimeDiffMeas_k5),
    #[asn(key = 6, extended = false)]
    Choice_extension(GNBRxTxTimeDiffMeas_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "22", sz_ub = "22")]
pub struct GNBSetID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "4", sz_ub = "4")]
pub struct GTP_TEID(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct GTPTLA_Item {
    pub gtp_transport_layer_address: TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GTPTLA_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct GTPTLAs(pub Vec<GTPTLA_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct GTPTunnel {
    pub transport_layer_address: TransportLayerAddress,
    pub gtp_teid: GTP_TEID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<GTPTunnelIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct GeographicalCoordinates {
    pub trp_position_definition_type: TRPPositionDefinitionType,
    #[asn(optional_idx = 0)]
    pub dlprs_resource_coordinates: Option<DLPRSResourceCoordinates>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<GeographicalCoordinatesIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum HSNADownlink {
    HARD,
    SOFT,
    NOTAVAILABLE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum HSNAFlexible {
    HARD,
    SOFT,
    NOTAVAILABLE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct HSNASlotConfigItem {
    #[asn(optional_idx = 0)]
    pub hsna_downlink: Option<HSNADownlink>,
    #[asn(optional_idx = 1)]
    pub hsna_uplink: Option<HSNAUplink>,
    #[asn(optional_idx = 2)]
    pub hsna_flexible: Option<HSNAFlexible>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<HSNASlotConfigItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "5120"
)]
pub struct HSNASlotConfigList(pub Vec<HSNASlotConfigItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "11")]
pub enum HSNATransmissionPeriodicity {
    MS0P5,
    MS0P625,
    MS1,
    MS1P25,
    MS2,
    MS2P5,
    MS5,
    MS10,
    MS20,
    MS40,
    MS80,
    MS160,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum HSNAUplink {
    HARD,
    SOFT,
    NOTAVAILABLE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct HandoverPreparationInformation(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct HardwareLoadIndicator {
    pub dl_hardware_load_indicator: HardwareLoadIndicatorDLHardwareLoadIndicator,
    pub ul_hardware_load_indicator: HardwareLoadIndicatorULHardwareLoadIndicator,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<HardwareLoadIndicatorIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct IAB_Allocated_TNL_Address_Item {
    pub iabtnl_address: IABTNLAddress,
    #[asn(optional_idx = 0)]
    pub iabtnl_address_usage: Option<IABTNLAddressUsage>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<IAB_Allocated_TNL_Address_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct IAB_Allocated_TNL_Address_List(pub Vec<IAB_Allocated_TNL_Address_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum IAB_Barred {
    BARRED,
    NOT_BARRED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct IAB_Congestion_Indication_Item {
    pub child_node_identifier: BAPAddress,
    #[asn(optional_idx = 0)]
    pub bhrlcch_list: Option<BHRLCCHList>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<IAB_Congestion_Indication_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct IAB_Congestion_Indication_List(pub Vec<IAB_Congestion_Indication_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct IAB_DU_Cell_Resource_Configuration_FDD_Info {
    pub gnb_du_cell_resource_configuration_fdd_ul: GNB_DU_Cell_Resource_Configuration,
    pub gnb_du_cell_resource_configuration_fdd_dl: GNB_DU_Cell_Resource_Configuration,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IAB_DU_Cell_Resource_Configuration_FDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum IAB_DU_Cell_Resource_Configuration_Mode_Info {
    #[asn(key = 0, extended = false)]
    FDD(IAB_DU_Cell_Resource_Configuration_FDD_Info),
    #[asn(key = 1, extended = false)]
    TDD(IAB_DU_Cell_Resource_Configuration_TDD_Info),
    #[asn(key = 2, extended = false)]
    Choice_extension(IAB_DU_Cell_Resource_Configuration_Mode_Info_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct IAB_DU_Cell_Resource_Configuration_TDD_Info {
    pub gnb_du_cell_resourc_configuration_tdd: GNB_DU_Cell_Resource_Configuration,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IAB_DU_Cell_Resource_Configuration_TDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct IAB_Info_IAB_DU {
    #[asn(optional_idx = 0)]
    pub multiplexing_info: Option<MultiplexingInfo>,
    #[asn(optional_idx = 1)]
    pub iab_stc_info: Option<IAB_STC_Info>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<IAB_Info_IAB_DUIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct IAB_Info_IAB_donor_CU {
    #[asn(optional_idx = 0)]
    pub iab_stc_info: Option<IAB_STC_Info>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<IAB_Info_IAB_donor_CUIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct IAB_MT_Cell_List(pub Vec<IAB_MT_Cell_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IAB_MT_Cell_List_Item {
    pub nr_cell_identity: NRCellIdentity,
    pub du_rx_mt_rx: DU_RX_MT_RX,
    pub du_tx_mt_tx: DU_TX_MT_TX,
    pub du_rx_mt_tx: DU_RX_MT_TX,
    pub du_tx_mt_rx: DU_TX_MT_RX,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IAB_MT_Cell_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 7)]
pub struct IAB_MT_Cell_NA_Resource_Configuration_FDD_Info {
    pub gnb_du_cell_na_resource_configuration_fdd_ul: GNB_DU_Cell_Resource_Configuration,
    pub gnb_du_cell_na_resource_configuration_fdd_dl: GNB_DU_Cell_Resource_Configuration,
    #[asn(optional_idx = 0)]
    pub ul_freq_info: Option<NRFreqInfo>,
    #[asn(optional_idx = 1)]
    pub ul_transmission_bandwidth: Option<Transmission_Bandwidth>,
    #[asn(optional_idx = 2)]
    pub ul_nr_carrier_list: Option<NRCarrierList>,
    #[asn(optional_idx = 3)]
    pub dl_freq_info: Option<NRFreqInfo>,
    #[asn(optional_idx = 4)]
    pub dl_transmission_bandwidth: Option<Transmission_Bandwidth>,
    #[asn(optional_idx = 5)]
    pub dl_nr_carrier_list: Option<NRCarrierList>,
    #[asn(optional_idx = 6)]
    pub ie_extensions: Option<IAB_MT_Cell_NA_Resource_Configuration_FDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum IAB_MT_Cell_NA_Resource_Configuration_Mode_Info {
    #[asn(key = 0, extended = false)]
    FDD(IAB_MT_Cell_NA_Resource_Configuration_FDD_Info),
    #[asn(key = 1, extended = false)]
    TDD(IAB_MT_Cell_NA_Resource_Configuration_TDD_Info),
    #[asn(key = 2, extended = false)]
    Choice_extension(IAB_MT_Cell_NA_Resource_Configuration_Mode_Info_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct IAB_MT_Cell_NA_Resource_Configuration_TDD_Info {
    pub gnb_du_cell_na_resourc_configuration_tdd: GNB_DU_Cell_Resource_Configuration,
    #[asn(optional_idx = 0)]
    pub nr_freq_info: Option<NRFreqInfo>,
    #[asn(optional_idx = 1)]
    pub transmission_bandwidth: Option<Transmission_Bandwidth>,
    #[asn(optional_idx = 2)]
    pub nr_carrier_list: Option<NRCarrierList>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<IAB_MT_Cell_NA_Resource_Configuration_TDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IAB_STC_Info {
    pub iab_stc_info_list: IAB_STC_Info_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IAB_STC_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IAB_STC_Info_Item {
    pub ssb_freq_info: SSB_freqInfo,
    pub ssb_subcarrier_spacing: SSB_subcarrierSpacing,
    pub ssb_transmission_periodicity: SSB_transmissionPeriodicity,
    pub ssb_transmission_timing_offset: SSB_transmissionTimingOffset,
    pub ssb_transmission_bitmap: SSB_transmissionBitmap,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IAB_STC_Info_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "45")]
pub struct IAB_STC_Info_List(pub Vec<IAB_STC_Info_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IAB_TNL_Addresses_Exception {
    pub iabtnl_address_list: IABTNLAddressList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IAB_TNL_Addresses_ExceptionIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IAB_TNL_Addresses_To_Remove_Item {
    pub iabtnl_address: IABTNLAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IAB_TNL_Addresses_To_Remove_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct IAB_TNL_Addresses_To_Remove_List(pub Vec<IAB_TNL_Addresses_To_Remove_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum IABConditionalRRCMessageDeliveryIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IABCongestionIndication {
    pub iab_congestion_indication_list: IAB_Congestion_Indication_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IABCongestionIndicationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum IABIPv6RequestType {
    #[asn(key = 0, extended = false)]
    IPv6Address(IABTNLAddressesRequested),
    #[asn(key = 1, extended = false)]
    IPv6Prefix(IABTNLAddressesRequested),
    #[asn(key = 2, extended = false)]
    Choice_extension(IABIPv6RequestType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum IABTNLAddress {
    #[asn(key = 0, extended = false)]
    IPv4Address(IABTNLAddress_iPv4Address),
    #[asn(key = 1, extended = false)]
    IPv6Address(IABTNLAddress_iPv6Address),
    #[asn(key = 2, extended = false)]
    IPv6Prefix(IABTNLAddress_iPv6Prefix),
    #[asn(key = 3, extended = false)]
    Choice_extension(IABTNLAddress_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IABTNLAddress_Item {
    pub iabtnl_address: IABTNLAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IABTNLAddress_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct IABTNLAddressFailure {
    pub protocol_i_es: IABTNLAddressFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct IABTNLAddressList(pub Vec<IABTNLAddress_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct IABTNLAddressRequest {
    pub protocol_i_es: IABTNLAddressRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct IABTNLAddressResponse {
    pub protocol_i_es: IABTNLAddressResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum IABTNLAddressUsage {
    F1_C,
    F1_U,
    NON_F1,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 5)]
pub struct IABTNLAddressesRequested {
    #[asn(optional_idx = 0)]
    pub tnl_addresses_or_prefixes_requested_all_traffic:
        Option<IABTNLAddressesRequestedTNLAddressesOrPrefixesRequestedAllTraffic>,
    #[asn(optional_idx = 1)]
    pub tnl_addresses_or_prefixes_requested_f1_c:
        Option<IABTNLAddressesRequestedTNLAddressesOrPrefixesRequestedF1_C>,
    #[asn(optional_idx = 2)]
    pub tnl_addresses_or_prefixes_requested_f1_u:
        Option<IABTNLAddressesRequestedTNLAddressesOrPrefixesRequestedF1_U>,
    #[asn(optional_idx = 3)]
    pub tnl_addresses_or_prefixes_requested_no_nf1:
        Option<IABTNLAddressesRequestedTNLAddressesOrPrefixesRequestedNoNF1>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<IABTNLAddressesRequestedIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct IABUPConfigurationUpdateFailure {
    pub protocol_i_es: IABUPConfigurationUpdateFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct IABUPConfigurationUpdateRequest {
    pub protocol_i_es: IABUPConfigurationUpdateRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct IABUPConfigurationUpdateResponse {
    pub protocol_i_es: IABUPConfigurationUpdateResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IABv4AddressesRequested {
    pub ia_bv4_addresses_requested: IABTNLAddressesRequested,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IABv4AddressesRequestedIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct IPHeaderInformation {
    pub destination_iabtnl_address: IABTNLAddress,
    #[asn(optional_idx = 0)]
    pub ds_information_list: Option<DSInformationList>,
    #[asn(optional_idx = 1)]
    pub i_pv6_flow_label: Option<IPHeaderInformationIPv6FlowLabel>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<IPHeaderInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct IPtolayer2TrafficMappingInfo {
    #[asn(optional_idx = 0)]
    pub i_ptolayer2_traffic_mapping_info_to_add: Option<IPtolayer2TrafficMappingInfoList>,
    #[asn(optional_idx = 1)]
    pub i_ptolayer2_traffic_mapping_info_to_remove: Option<MappingInformationtoRemove>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<IPtolayer2TrafficMappingInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct IPtolayer2TrafficMappingInfo_Item {
    pub mapping_information_index: MappingInformationIndex,
    pub ip_header_information: IPHeaderInformation,
    pub bh_info: BHInfo,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IPtolayer2TrafficMappingInfo_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "67108864"
)]
pub struct IPtolayer2TrafficMappingInfoList(pub Vec<IPtolayer2TrafficMappingInfo_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum IgnorePRACHConfiguration {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum IgnoreResourceCoordinationContainer {
    YES,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ImplicitFormat {
    pub duf_slotformat_index: DUFSlotformatIndex,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ImplicitFormatIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum InactivityMonitoringRequest {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum InactivityMonitoringResponse {
    NOT_SUPPORTED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum IngressNonF1terminatingTopologyIndicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct InitialULRRCMessageTransfer {
    pub protocol_i_es: InitialULRRCMessageTransferProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct InitiatingMessage {
    #[asn(key_field = true)]
    pub procedure_code: ProcedureCode,
    pub criticality: Criticality,
    pub value: InitiatingMessageValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct IntendedTDD_DL_ULConfig {
    pub nrscs: IntendedTDD_DL_ULConfigNRSCS,
    pub nrcp: IntendedTDD_DL_ULConfigNRCP,
    pub nrdlul_tx_periodicity: IntendedTDD_DL_ULConfigNRDLULTxPeriodicity,
    pub slot_configuration_list: Slot_Configuration_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<IntendedTDD_DL_ULConfigIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum InterFrequencyConfig_NoGap {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct InterfacesToTrace(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct L1151Info {
    pub prach_scs_for_l1151: L1151InfoPrachSCSForL1151,
    pub root_sequence_index: L1151InfoRootSequenceIndex,
    #[asn(optional_idx = 0)]
    pub ie_extension: Option<L1151InfoIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct L139Info {
    pub prach_scs: L139InfoPrachSCS,
    #[asn(optional_idx = 0)]
    pub root_sequence_index: Option<L139InfoRootSequenceIndex>,
    #[asn(optional_idx = 1)]
    pub ie_extension: Option<L139InfoIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct L571Info {
    pub prach_scs_for_l571: L571InfoPrachSCSForL571,
    pub root_sequence_index: L571InfoRootSequenceIndex,
    #[asn(optional_idx = 0)]
    pub ie_extension: Option<L571InfoIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct L839Info {
    pub root_sequence_index: L839InfoRootSequenceIndex,
    pub restricted_set_config: L839InfoRestrictedSetConfig,
    #[asn(optional_idx = 0)]
    pub ie_extension: Option<L839InfoIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "32", extensible = true)]
pub struct LCID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct LCS_to_GCS_Translation {
    pub alpha: LCS_to_GCS_TranslationAlpha,
    pub beta: LCS_to_GCS_TranslationBeta,
    pub gamma: LCS_to_GCS_TranslationGamma,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<LCS_to_GCS_TranslationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct LCStoGCSTranslation {
    pub alpha: LCStoGCSTranslationAlpha,
    #[asn(optional_idx = 0)]
    pub alpha_fine: Option<LCStoGCSTranslationAlpha_fine>,
    pub beta: LCStoGCSTranslationBeta,
    #[asn(optional_idx = 1)]
    pub beta_fine: Option<LCStoGCSTranslationBeta_fine>,
    pub gamma: LCStoGCSTranslationGamma,
    #[asn(optional_idx = 2)]
    pub gamma_fine: Option<LCStoGCSTranslationGamma_fine>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<LCStoGCSTranslationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "3")]
pub struct LCStoGCSTranslationList(pub Vec<LCStoGCSTranslation>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "65536", extensible = true)]
pub struct LMF_MeasurementID(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256", extensible = true)]
pub struct LMF_UE_MeasurementID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct LTEUESidelinkAggregateMaximumBitrate {
    pub uelte_sidelink_aggregate_maximum_bitrate: BitRate,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<LTEUESidelinkAggregateMaximumBitrateIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct LTEV2XServicesAuthorized {
    #[asn(optional_idx = 0)]
    pub vehicle_ue: Option<VehicleUE>,
    #[asn(optional_idx = 1)]
    pub pedestrian_ue: Option<PedestrianUE>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<LTEV2XServicesAuthorizedIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum LastUsedCellIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum LoS_NLoSIndicatorHard {
    N_LO_S,
    LO_S,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "10")]
pub struct LoS_NLoSIndicatorSoft(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum LoS_NLoSInformation {
    #[asn(key = 0, extended = false)]
    LoS_NLoSIndicatorSoft(LoS_NLoSIndicatorSoft),
    #[asn(key = 1, extended = false)]
    LoS_NLoSIndicatorHard(LoS_NLoSIndicatorHard),
    #[asn(key = 2, extended = false)]
    Choice_Extension(LoS_NLoSInformation_choice_Extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct LocationDependentMBSF1UInformation(pub Vec<LocationDependentMBSF1UInformation_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct LocationDependentMBSF1UInformation_Item {
    pub mbs_area_session_id: MBS_Area_Session_ID,
    pub mbs_f1u_info_at_cu: UPTransportLayerInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<LocationDependentMBSF1UInformation_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct LocationMeasurementInformation(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct LocationUncertainty {
    pub horizontal_uncertainty: LocationUncertaintyHorizontalUncertainty,
    pub horizontal_confidence: LocationUncertaintyHorizontalConfidence,
    pub vertical_uncertainty: LocationUncertaintyVerticalUncertainty,
    pub vertical_confidence: LocationUncertaintyVerticalConfidence,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<LocationUncertaintyIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "19")]
pub enum LongDRXCycleLength {
    MS10,
    MS20,
    MS32,
    MS40,
    MS60,
    MS64,
    MS70,
    MS80,
    MS128,
    MS160,
    MS256,
    MS320,
    MS512,
    MS640,
    MS1024,
    MS1280,
    MS2048,
    MS2560,
    MS5120,
    MS10240,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum LowerLayerPresenceStatusChange {
    SUSPEND_LOWER_LAYERS,
    RESUME_LOWER_LAYERS,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum M2Configuration {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum M5_Links_to_log {
    UPLINK,
    DOWNLINK,
    BOTH_UPLINK_AND_DOWNLINK,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct M5Configuration {
    pub m5period: M5period,
    pub m5_links_to_log: M5_Links_to_log,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<M5ConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "7")]
pub enum M5ReportAmount {
    R1,
    R2,
    R4,
    R8,
    R16,
    R32,
    R64,
    INFINITY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "4")]
pub enum M5period {
    MS1024,
    MS2048,
    MS5120,
    MS10240,
    MIN1,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum M6_Links_to_log {
    UPLINK,
    DOWNLINK,
    BOTH_UPLINK_AND_DOWNLINK,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct M6Configuration {
    pub m6report_interval: M6report_Interval,
    pub m6_links_to_log: M6_Links_to_log,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<M6ConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "7")]
pub enum M6ReportAmount {
    R1,
    R2,
    R4,
    R8,
    R16,
    R32,
    R64,
    INFINITY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "12")]
pub enum M6report_Interval {
    MS120,
    MS240,
    MS640,
    MS1024,
    MS2048,
    MS5120,
    MS10240,
    MS20480,
    MS40960,
    MIN1,
    MIN6,
    MIN12,
    MIN30,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum M7_Links_to_log {
    DOWNLINK,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct M7Configuration {
    pub m7period: M7period,
    pub m7_links_to_log: M7_Links_to_log,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<M7ConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "7")]
pub enum M7ReportAmount {
    R1,
    R2,
    R4,
    R8,
    R16,
    R32,
    R64,
    INFINITY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "60", extensible = true)]
pub struct M7period(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535", extensible = true)]
pub struct MBS_Area_Session_ID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MBS_Broadcast_Cell_Item {
    pub nrcgi: NRCGI,
    pub mtch_neighbour_cell: MBS_Broadcast_Cell_ItemMtch_neighbourCell,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MBS_Broadcast_Cell_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct MBS_Broadcast_Cell_List(pub Vec<MBS_Broadcast_Cell_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MBS_Broadcast_NeighbourCellList(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MBS_CUtoDURRCInformation {
    pub mbs_broadcast_cell_list: MBS_Broadcast_Cell_List,
    pub mrb_pdcp_config_broadcast: MBS_CUtoDURRCInformationMRB_PDCP_Config_Broadcast,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MBS_CUtoDURRCInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct MBS_Flows_Mapped_To_MRB_Item {
    pub mbs_qo_s_flow_identifier: QoSFlowIdentifier,
    pub mbs_qo_s_flow_level_qo_s_parameters: QoSFlowLevelQoSParameters,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MBS_Flows_Mapped_To_MRB_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct MBS_Flows_Mapped_To_MRB_List(pub Vec<MBS_Flows_Mapped_To_MRB_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "3", sz_ub = "3")]
pub struct MBS_FrequencySelectionArea_Identity(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum MBS_ServiceArea {
    #[asn(key = 0, extended = false)]
    Locationindependent(MBS_ServiceAreaInformation),
    #[asn(key = 1, extended = false)]
    Locationdependent(MBS_ServiceAreaInformationList),
    #[asn(key = 2, extended = false)]
    Choice_Extensions(MBS_ServiceArea_choice_Extensions),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct MBS_ServiceAreaCellList(pub Vec<NRCGI>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct MBS_ServiceAreaInformation {
    #[asn(optional_idx = 0)]
    pub mbs_service_area_cell_list: Option<MBS_ServiceAreaCellList>,
    #[asn(optional_idx = 1)]
    pub mbs_service_area_tai_list: Option<MBS_ServiceAreaTAIList>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<MBS_ServiceAreaInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MBS_ServiceAreaInformationItem {
    pub mbs_area_session_id: MBS_Area_Session_ID,
    pub mbs_service_area_information: MBS_ServiceAreaInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MBS_ServiceAreaInformationItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct MBS_ServiceAreaInformationList(pub Vec<MBS_ServiceAreaInformationItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct MBS_ServiceAreaTAIList(pub Vec<MBS_ServiceAreaTAIList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MBS_ServiceAreaTAIList_Item {
    pub plmn_id: PLMN_Identity,
    pub five5_tac: FiveGS_TAC,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MBS_ServiceAreaTAIList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct MBS_Session_ID {
    pub tmgi: TMGI,
    #[asn(optional_idx = 0)]
    pub nid: Option<NID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<MBS_Session_IDIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MBSF1UInformation {
    pub mbs_f1u_info: UPTransportLayerInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MBSF1UInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MBSInterestIndication(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct MBSMulticastF1UContextDescriptor {
    pub multicast_f1u_context_reference_f1: MulticastF1UContextReferenceF1,
    pub mc_f1u_ctxtusage: MBSMulticastF1UContextDescriptorMc_F1UCtxtusage,
    #[asn(optional_idx = 0)]
    pub mbs_area_session: Option<MBS_Area_Session_ID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<MBSMulticastF1UContextDescriptorIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum MBSPTPRetransmissionTunnelRequired {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum MDT_Activation {
    IMMEDIATE_MDT_ONLY,
    IMMEDIATE_MDT_AND_TRACE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 5)]
pub struct MDTConfiguration {
    pub mdt_activation: MDT_Activation,
    pub measurements_to_activate: MeasurementsToActivate,
    #[asn(optional_idx = 0)]
    pub m2_configuration: Option<M2Configuration>,
    #[asn(optional_idx = 1)]
    pub m5_configuration: Option<M5Configuration>,
    #[asn(optional_idx = 2)]
    pub m6_configuration: Option<M6Configuration>,
    #[asn(optional_idx = 3)]
    pub m7_configuration: Option<M7Configuration>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<MDTConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct MDTPLMNList(pub Vec<PLMN_Identity>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "0", sz_ub = "16")]
pub struct MDTPLMNModificationList(pub Vec<PLMN_Identity>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum MDTPollutedMeasurementIndicator {
    I_DC,
    NO_IDC,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MIB_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MIMOPRBusageInformation {
    pub dl_gbr_prb_usage_for_mimo: MIMOPRBusageInformationDl_GBR_PRB_usage_for_MIMO,
    pub ul_gbr_prb_usage_for_mimo: MIMOPRBusageInformationUl_GBR_PRB_usage_for_MIMO,
    pub dl_non_gbr_prb_usage_for_mimo: MIMOPRBusageInformationDl_non_GBR_PRB_usage_for_MIMO,
    pub ul_non_gbr_prb_usage_for_mimo: MIMOPRBusageInformationUl_non_GBR_PRB_usage_for_MIMO,
    pub dl_total_prb_usage_for_mimo: MIMOPRBusageInformationDl_Total_PRB_usage_for_MIMO,
    pub ul_total_prb_usage_for_mimo: MIMOPRBusageInformationUl_Total_PRB_usage_for_MIMO,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MIMOPRBusageInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "512", extensible = true)]
pub struct MRB_ID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum MRB_ProgressInformation {
    #[asn(key = 0, extended = false)]
    Pdcp_SN12(MRB_ProgressInformation_pdcp_SN12),
    #[asn(key = 1, extended = false)]
    Pdcp_SN18(MRB_ProgressInformation_pdcp_SN18),
    #[asn(key = 2, extended = false)]
    Choice_extension(MRB_ProgressInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MUSIM_GapConfig(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "26", sz_ub = "26")]
pub struct MappingInformationIndex(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "67108864"
)]
pub struct MappingInformationtoRemove(pub Vec<MappingInformationIndex>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "64", sz_ub = "64")]
pub struct MaskedIMEISV(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4095", extensible = true)]
pub struct MaxDataBurstVolume(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1000")]
pub struct MaxPacketLossRate(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MeasConfig(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MeasGapConfig(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MeasGapSharingConfig(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "4", extensible = false)]
pub enum MeasuredResultsValue {
    #[asn(key = 0, extended = false)]
    UL_AngleOfArrival(UL_AoA),
    #[asn(key = 1, extended = false)]
    UL_SRS_RSRP(UL_SRS_RSRP),
    #[asn(key = 2, extended = false)]
    UL_RTOA(UL_RTOA_Measurement),
    #[asn(key = 3, extended = false)]
    GNB_RxTxTimeDiff(GNB_RxTxTimeDiff),
    #[asn(key = 4, extended = false)]
    Choice_extension(MeasuredResultsValue_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MeasurementActivation {
    pub protocol_i_es: MeasurementActivationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct MeasurementBeamInfo {
    #[asn(optional_idx = 0)]
    pub prs_resource_id: Option<PRS_Resource_ID>,
    #[asn(optional_idx = 1)]
    pub prs_resource_set_id: Option<PRS_Resource_Set_ID>,
    #[asn(optional_idx = 2)]
    pub ssb_index: Option<SSB_Index>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<MeasurementBeamInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum MeasurementBeamInfoRequest {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "16", sz_ub = "16")]
pub struct MeasurementCharacteristicsRequestIndicator(
    pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "11")]
pub enum MeasurementPeriodicity {
    MS120,
    MS240,
    MS480,
    MS640,
    MS1024,
    MS2048,
    MS5120,
    MS10240,
    MIN1,
    MIN6,
    MIN12,
    MIN30,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "8")]
pub enum MeasurementPeriodicityExtended {
    MS160,
    MS320,
    MS1280,
    MS2560,
    MS61440,
    MS81920,
    MS368640,
    MS737280,
    MS1843200,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MeasurementPreconfigurationConfirm {
    pub protocol_i_es: MeasurementPreconfigurationConfirmProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MeasurementPreconfigurationRefuse {
    pub protocol_i_es: MeasurementPreconfigurationRefuseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MeasurementPreconfigurationRequired {
    pub protocol_i_es: MeasurementPreconfigurationRequiredProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum MeasurementTimeOccasion {
    O1,
    O4,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MeasurementTimingConfiguration(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct MeasurementsToActivate(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "16", sz_ub = "16")]
pub struct MessageIdentifier(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextModificationFailure {
    pub protocol_i_es: MulticastContextModificationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextModificationRequest {
    pub protocol_i_es: MulticastContextModificationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextModificationResponse {
    pub protocol_i_es: MulticastContextModificationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextReleaseCommand {
    pub protocol_i_es: MulticastContextReleaseCommandProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextReleaseComplete {
    pub protocol_i_es: MulticastContextReleaseCompleteProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextReleaseRequest {
    pub protocol_i_es: MulticastContextReleaseRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextSetupFailure {
    pub protocol_i_es: MulticastContextSetupFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextSetupRequest {
    pub protocol_i_es: MulticastContextSetupRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastContextSetupResponse {
    pub protocol_i_es: MulticastContextSetupResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastDistributionReleaseCommand {
    pub protocol_i_es: MulticastDistributionReleaseCommandProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastDistributionReleaseComplete {
    pub protocol_i_es: MulticastDistributionReleaseCompleteProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastDistributionSetupFailure {
    pub protocol_i_es: MulticastDistributionSetupFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastDistributionSetupRequest {
    pub protocol_i_es: MulticastDistributionSetupRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastDistributionSetupResponse {
    pub protocol_i_es: MulticastDistributionSetupResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct MulticastF1UContext_FailedToBeSetup_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<MulticastF1UContext_FailedToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastF1UContext_FailedToBeSetup_List(
    pub Vec<MulticastF1UContext_FailedToBeSetup_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MulticastF1UContext_Setup_Item {
    pub mrb_id: MRB_ID,
    pub mbs_f1u_info_at_cu: UPTransportLayerInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MulticastF1UContext_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastF1UContext_Setup_List(pub Vec<MulticastF1UContext_Setup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct MulticastF1UContext_ToBeSetup_Item {
    pub mrb_id: MRB_ID,
    pub mbs_f1u_info_at_du: UPTransportLayerInformation,
    #[asn(optional_idx = 0)]
    pub mbs_progress_information: Option<MRB_ProgressInformation>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<MulticastF1UContext_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastF1UContext_ToBeSetup_List(pub Vec<MulticastF1UContext_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "4", sz_ub = "4")]
pub struct MulticastF1UContextReferenceF1(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastGroupPaging {
    pub protocol_i_es: MulticastGroupPagingProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct MulticastMBSSessionList(pub Vec<MulticastMBSSessionList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MulticastMBSSessionList_Item {
    pub mbs_session_id: MBS_Session_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MulticastMBSSessionList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct MulticastMRBs_FailedToBeModified_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<MulticastMRBs_FailedToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_FailedToBeModified_List(
    pub Vec<MulticastMRBs_FailedToBeModified_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct MulticastMRBs_FailedToBeSetup_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<MulticastMRBs_FailedToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_FailedToBeSetup_List(pub Vec<MulticastMRBs_FailedToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct MulticastMRBs_FailedToBeSetupMod_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<MulticastMRBs_FailedToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_FailedToBeSetupMod_List(
    pub Vec<MulticastMRBs_FailedToBeSetupMod_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MulticastMRBs_Modified_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MulticastMRBs_Modified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_Modified_List(pub Vec<MulticastMRBs_Modified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MulticastMRBs_Setup_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MulticastMRBs_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_Setup_List(pub Vec<MulticastMRBs_Setup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MulticastMRBs_SetupMod_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MulticastMRBs_SetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_SetupMod_List(pub Vec<MulticastMRBs_SetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct MulticastMRBs_ToBeModified_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub mrb_qo_s_information: Option<QoSInformation>,
    #[asn(optional_idx = 1)]
    pub mbs_flows_mapped_to_mrb_list: Option<MBS_Flows_Mapped_To_MRB_List>,
    #[asn(optional_idx = 2)]
    pub mbs_dl_pdcp_sn_length: Option<PDCPSNLength>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<MulticastMRBs_ToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_ToBeModified_List(pub Vec<MulticastMRBs_ToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MulticastMRBs_ToBeReleased_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MulticastMRBs_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_ToBeReleased_List(pub Vec<MulticastMRBs_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastMRBs_ToBeSetup_Item {
    pub mrb_id: MRB_ID,
    pub mrb_qo_s_information: QoSInformation,
    pub mbs_flows_mapped_to_mrb_list: MBS_Flows_Mapped_To_MRB_List,
    pub mbs_dl_pdcp_sn_length: PDCPSNLength,
    pub ie_extensions: MulticastMRBs_ToBeSetup_ItemIE_Extensions,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_ToBeSetup_List(pub Vec<MulticastMRBs_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct MulticastMRBs_ToBeSetupMod_Item {
    pub mrb_id: MRB_ID,
    pub mrb_qo_s_information: QoSInformation,
    pub mbs_flows_mapped_to_mrb_list: MBS_Flows_Mapped_To_MRB_List,
    pub mbs_dl_pdcp_sn_length: PDCPSNLength,
    pub ie_extensions: MulticastMRBs_ToBeSetupMod_ItemIE_Extensions,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct MulticastMRBs_ToBeSetupMod_List(pub Vec<MulticastMRBs_ToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct MultipleULAoA {
    pub multiple_ul_ao_a: MultipleULAoA_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MultipleULAoAIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum MultipleULAoA_Item {
    #[asn(key = 0, extended = false)]
    UL_AoA(UL_AoA),
    #[asn(key = 1, extended = false)]
    Ul_ZoA(ZoAInformation),
    #[asn(key = 2, extended = false)]
    Choice_extension(MultipleULAoA_Item_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct MultipleULAoA_List(pub Vec<MultipleULAoA_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct MultiplexingInfo {
    pub iab_mt_cell_list: IAB_MT_Cell_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<MultiplexingInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct NA_Resource_Configuration_Item {
    #[asn(optional_idx = 0)]
    pub na_downlink: Option<NADownlink>,
    #[asn(optional_idx = 1)]
    pub na_uplink: Option<NAUplink>,
    #[asn(optional_idx = 2)]
    pub na_flexible: Option<NAFlexible>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<NA_Resource_Configuration_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "5120"
)]
pub struct NA_Resource_Configuration_List(pub Vec<NA_Resource_Configuration_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum NADownlink {
    TRUE,
    FALSE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum NAFlexible {
    TRUE,
    FALSE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum NAUplink {
    TRUE,
    FALSE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct NGRANAllocationAndRetentionPriority {
    pub priority_level: PriorityLevel,
    pub pre_emption_capability: Pre_emptionCapability,
    pub pre_emption_vulnerability: Pre_emptionVulnerability,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NGRANAllocationAndRetentionPriorityIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct NGRANHighAccuracyAccessPointPosition {
    pub latitude: NGRANHighAccuracyAccessPointPositionLatitude,
    pub longitude: NGRANHighAccuracyAccessPointPositionLongitude,
    pub altitude: NGRANHighAccuracyAccessPointPositionAltitude,
    pub uncertainty_semi_major: NGRANHighAccuracyAccessPointPositionUncertaintySemi_major,
    pub uncertainty_semi_minor: NGRANHighAccuracyAccessPointPositionUncertaintySemi_minor,
    pub orientation_of_major_axis: NGRANHighAccuracyAccessPointPositionOrientationOfMajorAxis,
    pub horizontal_confidence: NGRANHighAccuracyAccessPointPositionHorizontalConfidence,
    pub uncertainty_altitude: NGRANHighAccuracyAccessPointPositionUncertaintyAltitude,
    pub vertical_confidence: NGRANHighAccuracyAccessPointPositionVerticalConfidence,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NGRANHighAccuracyAccessPointPositionIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "44", sz_ub = "44")]
pub struct NID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NPN_Broadcast_Information_PNI_NPN {
    pub broadcast_pni_npn_id_information: BroadcastPNI_NPN_ID_List,
    #[asn(optional_idx = 0)]
    pub ie_extension: Option<NPN_Broadcast_Information_PNI_NPNIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NPN_Broadcast_Information_SNPN {
    pub broadcast_snpnid_list: BroadcastSNPN_ID_List,
    #[asn(optional_idx = 0)]
    pub ie_extension: Option<NPN_Broadcast_Information_SNPNIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum NPNBroadcastInformation {
    #[asn(key = 0, extended = false)]
    SNPN_Broadcast_Information(NPN_Broadcast_Information_SNPN),
    #[asn(key = 1, extended = false)]
    PNI_NPN_Broadcast_Information(NPN_Broadcast_Information_PNI_NPN),
    #[asn(key = 2, extended = false)]
    Choice_extension(NPNBroadcastInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum NPNSupportInfo {
    #[asn(key = 0, extended = false)]
    SNPN_Information(NID),
    #[asn(key = 1, extended = false)]
    Choice_extension(NPNSupportInfo_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NR_CGI_List_For_Restart_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NR_CGI_List_For_Restart_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct NR_CGI_List_For_Restart_List(pub Vec<NR_CGI_List_For_Restart_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum NR_Mode_Info {
    #[asn(key = 0, extended = false)]
    FDD(FDD_Info),
    #[asn(key = 1, extended = false)]
    TDD(TDD_Info),
    #[asn(key = 2, extended = false)]
    Choice_extension(NR_Mode_Info_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum NR_ModeInfoRel16 {
    #[asn(key = 0, extended = false)]
    FDD(FDD_InfoRel16),
    #[asn(key = 1, extended = false)]
    TDD(TDD_InfoRel16),
    #[asn(key = 2, extended = false)]
    Choice_extension(NR_ModeInfoRel16_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct NR_PRSBeamInformation {
    pub nr_prs_beam_information_list: NR_PRSBeamInformationList,
    #[asn(optional_idx = 0)]
    pub lc_sto_gcs_translation_list: Option<LCStoGCSTranslationList>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<NR_PRSBeamInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct NR_PRSBeamInformationItem {
    pub prs_resource_set_id: PRS_Resource_Set_ID,
    pub prs_angle_list: PRSAngleList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NR_PRSBeamInformationItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "2")]
pub struct NR_PRSBeamInformationList(pub Vec<NR_PRSBeamInformationItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7690")]
pub struct NR_TADV(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NR_U_Channel_Info_Item {
    pub nr_u_channel_id: NR_U_Channel_Info_ItemNr_U_channel_ID,
    pub nr_arfcn: NR_U_Channel_Info_ItemNR_ARFCN,
    pub bandwidth: NR_U_Channel_Info_ItemBandwidth,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NR_U_Channel_Info_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct NR_U_Channel_Info_List(pub Vec<NR_U_Channel_Info_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NR_U_Channel_Item {
    pub nr_u_channel_id: NR_U_Channel_ItemNR_U_ChannelID,
    pub channel_occupancy_time_percentage_dl: ChannelOccupancyTimePercentage,
    pub energy_detection_threshold: EnergyDetectionThreshold,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NR_U_Channel_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct NR_U_Channel_List(pub Vec<NR_U_Channel_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NRCGI {
    pub plmn_identity: PLMN_Identity,
    pub nr_cell_identity: NRCellIdentity,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NRCGIIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NRCarrierItem {
    pub carrier_scs: NRSCS,
    pub offset_to_carrier: NRCarrierItemOffsetToCarrier,
    pub carrier_bandwidth: NRCarrierItemCarrierBandwidth,
    #[asn(optional_idx = 0)]
    pub ie_extension: Option<NRCarrierItemIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "5")]
pub struct NRCarrierList(pub Vec<NRCarrierItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "36", sz_ub = "36")]
pub struct NRCellIdentity(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct NRFreqInfo {
    pub nrarfcn: NRFreqInfoNRARFCN,
    #[asn(optional_idx = 0)]
    pub sul_information: Option<SUL_Information>,
    pub freq_band_list_nr: NRFreqInfoFreqBandListNr,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<NRFreqInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "28")]
pub enum NRNRB {
    NRB11,
    NRB18,
    NRB24,
    NRB25,
    NRB31,
    NRB32,
    NRB38,
    NRB51,
    NRB52,
    NRB65,
    NRB66,
    NRB78,
    NRB79,
    NRB93,
    NRB106,
    NRB107,
    NRB121,
    NRB132,
    NRB133,
    NRB135,
    NRB160,
    NRB162,
    NRB189,
    NRB216,
    NRB217,
    NRB245,
    NRB264,
    NRB270,
    NRB273,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1007")]
pub struct NRPCI(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct NRPRACHConfig {
    #[asn(optional_idx = 0)]
    pub ul_prach_config_list: Option<NRPRACHConfigList>,
    #[asn(optional_idx = 1)]
    pub sul_prach_config_list: Option<NRPRACHConfigList>,
    #[asn(optional_idx = 2)]
    pub ie_extension: Option<NRPRACHConfigIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NRPRACHConfigItem {
    pub nrscs: NRSCS,
    pub prach_freq_startfrom_carrier: NRPRACHConfigItemPrachFreqStartfromCarrier,
    pub prach_fdm: NRPRACHConfigItemPrachFDM,
    pub prach_config_index: NRPRACHConfigItemPrachConfigIndex,
    pub ssb_per_rach_occasion: NRPRACHConfigItemSsb_perRACH_Occasion,
    pub freq_domain_length: FreqDomainLength,
    pub zero_correl_zone_config: NRPRACHConfigItemZeroCorrelZoneConfig,
    #[asn(optional_idx = 0)]
    pub ie_extension: Option<NRPRACHConfigItemIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "0", sz_ub = "16")]
pub struct NRPRACHConfigList(pub Vec<NRPRACHConfigItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "15")]
pub enum NRPaging_Time_Window {
    S1,
    S2,
    S3,
    S4,
    S5,
    S6,
    S7,
    S8,
    S9,
    S10,
    S11,
    S12,
    S13,
    S14,
    S15,
    S16,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "12")]
pub enum NRPaging_eDRX_Cycle_Idle {
    HFQUARTER,
    HFHALF,
    HF1,
    HF2,
    HF4,
    HF8,
    HF16,
    HF32,
    HF64,
    HF128,
    HF256,
    HF512,
    HF1024,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum NRPaging_eDRX_Cycle_Inactive {
    HFQUARTER,
    HFHALF,
    HF1,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct NRPagingeDRXInformation {
    pub nrpaging_e_drx_cycle_idle: NRPaging_eDRX_Cycle_Idle,
    #[asn(optional_idx = 0)]
    pub nrpaging_time_window: Option<NRPaging_Time_Window>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<NRPagingeDRXInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NRPagingeDRXInformationforRRCINACTIVE {
    pub nrpaging_e_drx_cycle_inactive: NRPaging_eDRX_Cycle_Inactive,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NRPagingeDRXInformationforRRCINACTIVEIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum NRRedCapUEIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum NRSCS {
    SCS15,
    SCS30,
    SCS60,
    SCS120,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct NRUERLFReportContainer(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct NRUESidelinkAggregateMaximumBitrate {
    pub uenr_sidelink_aggregate_maximum_bitrate: BitRate,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NRUESidelinkAggregateMaximumBitrateIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct NRV2XServicesAuthorized {
    #[asn(optional_idx = 0)]
    pub vehicle_ue: Option<VehicleUE>,
    #[asn(optional_idx = 1)]
    pub pedestrian_ue: Option<PedestrianUE>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<NRV2XServicesAuthorizedIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255", extensible = true)]
pub struct NSAG_ID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NSAGSupportItem {
    pub nsag_id: NSAG_ID,
    pub nsag_slice_support: ExtendedSliceSupportList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NSAGSupportItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct NSAGSupportList(pub Vec<NSAGSupportItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "191")]
pub struct NZP_CSI_RS_ResourceID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct NeedForGapNCSGInfoEUTRA(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct NeedForGapNCSGInfoNR(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct NeedForGapsInfoNR(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum NeedforGap {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct Neighbour_Cell_Information_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub intended_tdd_dl_ul_config: Option<IntendedTDD_DL_ULConfig>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Neighbour_Cell_Information_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Neighbour_Cell_Information_List(pub Vec<Neighbour_Cell_Information_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct Neighbour_Node_Cells_List(pub Vec<Neighbour_Node_Cells_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 12)]
pub struct Neighbour_Node_Cells_List_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub gnb_cu_ue_f1ap_id: Option<GNB_CU_UE_F1AP_ID>,
    #[asn(optional_idx = 1)]
    pub gnb_du_ue_f1ap_id: Option<GNB_DU_UE_F1AP_ID>,
    #[asn(optional_idx = 2)]
    pub peer_parent_node_indicator:
        Option<Neighbour_Node_Cells_List_ItemPeer_Parent_Node_Indicator>,
    #[asn(optional_idx = 3)]
    pub iab_du_cell_resource_configuration_mode_info:
        Option<IAB_DU_Cell_Resource_Configuration_Mode_Info>,
    #[asn(optional_idx = 4)]
    pub iab_stc_info: Option<IAB_STC_Info>,
    #[asn(optional_idx = 5)]
    pub rach_config_common: Option<RACH_Config_Common>,
    #[asn(optional_idx = 6)]
    pub rach_config_common_iab: Option<RACH_Config_Common_IAB>,
    #[asn(optional_idx = 7)]
    pub csi_rs_configuration: Option<Neighbour_Node_Cells_List_ItemCSI_RS_Configuration>,
    #[asn(optional_idx = 8)]
    pub sr_configuration: Option<Neighbour_Node_Cells_List_ItemSR_Configuration>,
    #[asn(optional_idx = 9)]
    pub pdcch_config_sib1: Option<Neighbour_Node_Cells_List_ItemPDCCH_ConfigSIB1>,
    #[asn(optional_idx = 10)]
    pub scs_common: Option<Neighbour_Node_Cells_List_ItemSCS_Common>,
    #[asn(optional_idx = 11)]
    pub ie_extensions: Option<Neighbour_Node_Cells_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct NeighbourNR_CellsForSON_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub nr_mode_info_rel16: Option<NR_ModeInfoRel16>,
    #[asn(optional_idx = 1)]
    pub ssb_positions_in_burst: Option<SSB_PositionsInBurst>,
    #[asn(optional_idx = 2)]
    pub nrprach_config: Option<NRPRACHConfig>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<NeighbourNR_CellsForSON_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct NeighbourNR_CellsForSON_List(pub Vec<NeighbourNR_CellsForSON_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct NetworkAccessRateReduction {
    pub protocol_i_es: NetworkAccessRateReductionProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct NonDynamic5QIDescriptor {
    pub five_qi: NonDynamic5QIDescriptorFiveQI,
    #[asn(optional_idx = 0)]
    pub qo_s_priority_level: Option<NonDynamic5QIDescriptorQoSPriorityLevel>,
    #[asn(optional_idx = 1)]
    pub averaging_window: Option<AveragingWindow>,
    #[asn(optional_idx = 2)]
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<NonDynamic5QIDescriptorIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct NonDynamicPQIDescriptor {
    pub five_qi: NonDynamicPQIDescriptorFiveQI,
    #[asn(optional_idx = 0)]
    pub qo_s_priority_level: Option<NonDynamicPQIDescriptorQoSPriorityLevel>,
    #[asn(optional_idx = 1)]
    pub averaging_window: Option<AveragingWindow>,
    #[asn(optional_idx = 2)]
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<NonDynamicPQIDescriptorIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum NonF1terminatingTopologyIndicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum NonUPTrafficType {
    UE_ASSOCIATED,
    NON_UE_ASSOCIATED,
    NON_F1,
    BAP_CONTROL_PDU,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "14")]
pub struct NoofDownlinkSymbols(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "14")]
pub struct NoofUplinkSymbols(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum Notification_Cause {
    FULFILLED,
    NOT_FULFILLED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum NotificationControl {
    ACTIVE,
    NOT_ACTIVE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct NotificationInformation {
    pub message_identifier: MessageIdentifier,
    pub serial_number: SerialNumber,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NotificationInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct Notify {
    pub protocol_i_es: NotifyProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct NumDLULSymbols {
    pub num_dl_symbols: NumDLULSymbolsNumDLSymbols,
    pub num_ul_symbols: NumDLULSymbolsNumULSymbols,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<NumDLULSymbolsIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535")]
pub struct NumberOfBroadcasts(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "4")]
pub enum NumberOfTRPRxTEG {
    TWO,
    THREE,
    FOUR,
    SIX,
    EIGHT,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "4")]
pub enum NumberOfTRPRxTxTEG {
    WO,
    THREE,
    FOUR,
    SIX,
    EIGHT,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "16777215", extensible = true)]
pub struct NumberofActiveUEs(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535")]
pub struct NumberofBroadcastRequest(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "2199", extensible = true)]
pub struct OffsetToPointA(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 6)]
pub struct OnDemandPRS_Info {
    pub on_demand_prs_request_allowed: OnDemandPRS_InfoOnDemandPRSRequestAllowed,
    #[asn(optional_idx = 0)]
    pub allowed_resource_set_periodicity_values:
        Option<OnDemandPRS_InfoAllowedResourceSetPeriodicityValues>,
    #[asn(optional_idx = 1)]
    pub allowed_prs_bandwidth_values: Option<OnDemandPRS_InfoAllowedPRSBandwidthValues>,
    #[asn(optional_idx = 2)]
    pub allowed_resource_repetition_factor_values:
        Option<OnDemandPRS_InfoAllowedResourceRepetitionFactorValues>,
    #[asn(optional_idx = 3)]
    pub allowed_resource_number_of_symbols_values:
        Option<OnDemandPRS_InfoAllowedResourceNumberOfSymbolsValues>,
    #[asn(optional_idx = 4)]
    pub allowed_comb_size_values: Option<OnDemandPRS_InfoAllowedCombSizeValues>,
    #[asn(optional_idx = 5)]
    pub ie_extensions: Option<OnDemandPRS_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum PC5_QoS_Characteristics {
    #[asn(key = 0, extended = false)]
    Non_Dynamic_PQI(NonDynamicPQIDescriptor),
    #[asn(key = 1, extended = false)]
    Dynamic_PQI(DynamicPQIDescriptor),
    #[asn(key = 2, extended = false)]
    Choice_extension(PC5_QoS_Characteristics_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PC5FlowBitRates {
    pub guaranteed_flow_bit_rate: BitRate,
    pub maximum_flow_bit_rate: BitRate,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PC5FlowBitRatesIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "2048")]
pub struct PC5QoSFlowIdentifier(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct PC5QoSParameters {
    pub pc5_qo_s_characteristics: PC5_QoS_Characteristics,
    #[asn(optional_idx = 0)]
    pub pc5_qo_s_flow_bit_rates: Option<PC5FlowBitRates>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PC5QoSParametersIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct PC5RLCChannelFailedToBeModifiedItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    #[asn(optional_idx = 1)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<PC5RLCChannelFailedToBeModifiedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelFailedToBeModifiedList(pub Vec<PC5RLCChannelFailedToBeModifiedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct PC5RLCChannelFailedToBeSetupItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    #[asn(optional_idx = 1)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<PC5RLCChannelFailedToBeSetupItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelFailedToBeSetupList(pub Vec<PC5RLCChannelFailedToBeSetupItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "512", extensible = true)]
pub struct PC5RLCChannelID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct PC5RLCChannelModifiedItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PC5RLCChannelModifiedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelModifiedList(pub Vec<PC5RLCChannelModifiedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum PC5RLCChannelQoSInformation {
    #[asn(key = 0, extended = false)]
    PC5RLCChannelQoS(QoSFlowLevelQoSParameters),
    #[asn(key = 1, extended = false)]
    PC5ControlPlaneTrafficType(PC5RLCChannelQoSInformation_pC5ControlPlaneTrafficType),
    #[asn(key = 2, extended = false)]
    Choice_extension(PC5RLCChannelQoSInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct PC5RLCChannelRequiredToBeModifiedItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PC5RLCChannelRequiredToBeModifiedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelRequiredToBeModifiedList(pub Vec<PC5RLCChannelRequiredToBeModifiedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct PC5RLCChannelRequiredToBeReleasedItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PC5RLCChannelRequiredToBeReleasedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelRequiredToBeReleasedList(pub Vec<PC5RLCChannelRequiredToBeReleasedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct PC5RLCChannelSetupItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PC5RLCChannelSetupItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelSetupList(pub Vec<PC5RLCChannelSetupItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct PC5RLCChannelToBeModifiedItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    #[asn(optional_idx = 1)]
    pub pc5rlc_channel_qo_s_information: Option<PC5RLCChannelQoSInformation>,
    #[asn(optional_idx = 2)]
    pub rlc_mode: Option<RLCMode>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<PC5RLCChannelToBeModifiedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelToBeModifiedList(pub Vec<PC5RLCChannelToBeModifiedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct PC5RLCChannelToBeReleasedItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PC5RLCChannelToBeReleasedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelToBeReleasedList(pub Vec<PC5RLCChannelToBeReleasedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct PC5RLCChannelToBeSetupItem {
    pub pc5rlc_channel_id: PC5RLCChannelID,
    #[asn(optional_idx = 0)]
    pub remote_ue_local_id: Option<RemoteUELocalID>,
    pub pc5rlc_channel_qo_s_information: PC5RLCChannelQoSInformation,
    pub rlc_mode: RLCMode,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PC5RLCChannelToBeSetupItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PC5RLCChannelToBeSetupList(pub Vec<PC5RLCChannelToBeSetupItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "62500", extensible = true)]
pub struct PDC_TADV_NR(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct PDCCH_BlindDetectionSCG(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PDCMeasuredResults_Item {
    pub pdc_measured_results_value: PDCMeasuredResults_Value,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PDCMeasuredResults_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum PDCMeasuredResults_Value {
    #[asn(key = 0, extended = false)]
    PDC_TADV_NR(PDC_TADV_NR),
    #[asn(key = 1, extended = false)]
    RxTxTimeDiff(GNBRxTxTimeDiffMeas),
    #[asn(key = 2, extended = false)]
    Choice_extension(PDCMeasuredResults_Value_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct PDCMeasuredResultsList(pub Vec<PDCMeasuredResults_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PDCMeasurementFailureIndication {
    pub protocol_i_es: PDCMeasurementFailureIndicationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PDCMeasurementInitiationFailure {
    pub protocol_i_es: PDCMeasurementInitiationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PDCMeasurementInitiationRequest {
    pub protocol_i_es: PDCMeasurementInitiationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PDCMeasurementInitiationResponse {
    pub protocol_i_es: PDCMeasurementInitiationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "11")]
pub enum PDCMeasurementPeriodicity {
    MS80,
    MS120,
    MS160,
    MS240,
    MS320,
    MS480,
    MS640,
    MS1024,
    MS1280,
    MS2048,
    MS2560,
    MS5120,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct PDCMeasurementQuantities(pub Vec<PDCMeasurementQuantities_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PDCMeasurementQuantities_Item {
    pub pd_cmeasurement_quantities_value: PDCMeasurementQuantitiesValue,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PDCMeasurementQuantities_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PDCMeasurementQuantitiesValue {
    NR_PDC_TADV,
    G_NB_RX_TX,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PDCMeasurementReport {
    pub protocol_i_es: PDCMeasurementReportProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PDCMeasurementResult {
    pub pdc_measured_results_list: PDCMeasuredResultsList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PDCMeasurementResultIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PDCMeasurementTerminationCommand {
    pub protocol_i_es: PDCMeasurementTerminationCommandProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4095")]
pub struct PDCP_SN(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PDCPSNLength {
    TWELVE_BITS,
    EIGHTEEN_BITS,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PDCReportType {
    ON_DEMAND,
    PERIODIC,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct PDUSessionID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PEIPSAssistanceInfo {
    pub cn_subgroup_id: CNSubgroupID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PEIPSAssistanceInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum PEISubgroupingSupportIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9", extensible = true)]
pub struct PER_Exponent(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9", extensible = true)]
pub struct PER_Scalar(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "3", sz_ub = "3")]
pub struct PLMN_Identity(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct PRS_ID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "4")]
pub struct PRS_Measurement_Info_List(pub Vec<PRS_Measurement_Info_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PRS_Measurement_Info_List_Item {
    pub point_a: PRS_Measurement_Info_List_ItemPointA,
    pub meas_prs_periodicity: PRS_Measurement_Info_List_ItemMeasPRSPeriodicity,
    pub meas_prs_offset: PRS_Measurement_Info_List_ItemMeasPRSOffset,
    pub measurement_prs_length: PRS_Measurement_Info_List_ItemMeasurementPRSLength,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRS_Measurement_Info_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct PRS_Resource_ID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7")]
pub struct PRS_Resource_Set_ID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PRSAngleItem {
    pub nr_prs_azimuth: PRSAngleItemNR_PRS_Azimuth,
    pub nr_prs_azimuth_fine: PRSAngleItemNR_PRS_Azimuth_fine,
    pub nr_prs_elevation: PRSAngleItemNR_PRS_Elevation,
    pub nr_prs_elevation_fine: PRSAngleItemNR_PRS_Elevation_fine,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSAngleItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct PRSAngleList(pub Vec<PRSAngleItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PRSConfigRequestType {
    CONFIGURE,
    OFF,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PRSConfiguration {
    pub prs_resource_set_list: PRSResourceSet_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PRSConfigurationFailure {
    pub protocol_i_es: PRSConfigurationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PRSConfigurationRequest {
    pub protocol_i_es: PRSConfigurationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PRSConfigurationResponse {
    pub protocol_i_es: PRSConfigurationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct PRSInformationPos {
    pub prs_id_pos: PRSInformationPosPRS_IDPos,
    pub prs_resource_set_id_pos: PRSInformationPosPRS_Resource_Set_IDPos,
    #[asn(optional_idx = 0)]
    pub prs_resource_id_pos: Option<PRSInformationPosPRS_Resource_IDPos>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PRSInformationPosIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct PRSMuting {
    #[asn(optional_idx = 0)]
    pub prs_muting_option1: Option<PRSMutingOption1>,
    #[asn(optional_idx = 1)]
    pub prs_muting_option2: Option<PRSMutingOption2>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<PRSMutingIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PRSMutingOption1 {
    pub muting_pattern: DL_PRSMutingPattern,
    pub muting_bit_repetition_factor: PRSMutingOption1MutingBitRepetitionFactor,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSMutingOption1IE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PRSMutingOption2 {
    pub muting_pattern: DL_PRSMutingPattern,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSMutingOption2IE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct PRSResource_Item {
    pub prs_resource_id: PRS_Resource_ID,
    pub sequence_id: PRSResource_ItemSequenceID,
    pub re_offset: PRSResource_ItemREOffset,
    pub resource_slot_offset: PRSResource_ItemResourceSlotOffset,
    pub resource_symbol_offset: PRSResource_ItemResourceSymbolOffset,
    #[asn(optional_idx = 0)]
    pub qcl_info: Option<PRSResource_QCLInfo>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PRSResource_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct PRSResource_List(pub Vec<PRSResource_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum PRSResource_QCLInfo {
    #[asn(key = 0, extended = false)]
    QCLSourceSSB(PRSResource_QCLSourceSSB),
    #[asn(key = 1, extended = false)]
    QCLSourcePRS(PRSResource_QCLSourcePRS),
    #[asn(key = 2, extended = false)]
    Choice_extension(PRSResource_QCLInfo_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct PRSResource_QCLSourcePRS {
    pub qcl_source_prs_resource_set_id: PRS_Resource_Set_ID,
    #[asn(optional_idx = 0)]
    pub qcl_source_prs_resource_id: Option<PRS_Resource_ID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PRSResource_QCLSourcePRSIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct PRSResource_QCLSourceSSB {
    pub pci_nr: PRSResource_QCLSourceSSBPCI_NR,
    #[asn(optional_idx = 0)]
    pub ssb_index: Option<SSB_Index>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PRSResource_QCLSourceSSBIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct PRSResourceSet_Item {
    pub prs_resource_set_id: PRS_Resource_Set_ID,
    pub subcarrier_spacing: PRSResourceSet_ItemSubcarrierSpacing,
    pub pr_sbandwidth: PRSResourceSet_ItemPRSbandwidth,
    pub start_prb: PRSResourceSet_ItemStartPRB,
    pub point_a: PRSResourceSet_ItemPointA,
    pub comb_size: PRSResourceSet_ItemCombSize,
    pub cp_type: PRSResourceSet_ItemCPType,
    pub resource_set_periodicity: PRSResourceSet_ItemResourceSetPeriodicity,
    pub resource_set_slot_offset: PRSResourceSet_ItemResourceSetSlotOffset,
    pub resource_repetition_factor: PRSResourceSet_ItemResourceRepetitionFactor,
    pub resource_time_gap: PRSResourceSet_ItemResourceTimeGap,
    pub resource_numberof_symbols: PRSResourceSet_ItemResourceNumberofSymbols,
    #[asn(optional_idx = 0)]
    pub prs_muting: Option<PRSMuting>,
    pub prs_resource_transmit_power: PRSResourceSet_ItemPRSResourceTransmitPower,
    pub prs_resource_list: PRSResource_List,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PRSResourceSet_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct PRSResourceSet_List(pub Vec<PRSResourceSet_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct PRSTRPItem {
    pub trp_id: TRPID,
    #[asn(optional_idx = 0)]
    pub requested_dlprs_transmission_characteristics:
        Option<RequestedDLPRSTransmissionCharacteristics>,
    #[asn(optional_idx = 1)]
    pub prs_transmission_off_information: Option<PRSTransmissionOffInformation>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<PRSTRPItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSTRPList(pub Vec<PRSTRPItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum PRSTransmissionOffIndication {
    #[asn(key = 0, extended = false)]
    PRSTransmissionOffPerTRP(PRSTransmissionOffIndication_pRSTransmissionOffPerTRP),
    #[asn(key = 1, extended = false)]
    PRSTransmissionOffPerResourceSet(PRSTransmissionOffPerResourceSet),
    #[asn(key = 2, extended = false)]
    PRSTransmissionOffPerResource(PRSTransmissionOffPerResource),
    #[asn(key = 3, extended = false)]
    Choice_extension(PRSTransmissionOffIndication_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PRSTransmissionOffIndicationPerResource_Item {
    pub prs_resource_id: PRS_Resource_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSTransmissionOffIndicationPerResource_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PRSTransmissionOffInformation {
    pub prs_transmission_off_indication: PRSTransmissionOffIndication,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSTransmissionOffInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct PRSTransmissionOffPerResource(pub Vec<PRSTransmissionOffPerResource_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PRSTransmissionOffPerResource_Item {
    pub prs_resource_set_id: PRS_Resource_Set_ID,
    pub prs_transmission_off_indication_per_resource_list:
        PRSTransmissionOffPerResource_ItemPRSTransmissionOffIndicationPerResourceList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSTransmissionOffPerResource_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct PRSTransmissionOffPerResourceSet(pub Vec<PRSTransmissionOffPerResourceSet_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PRSTransmissionOffPerResourceSet_Item {
    pub prs_resource_set_id: PRS_Resource_Set_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSTransmissionOffPerResourceSet_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PRSTransmissionTRPItem {
    pub trp_id: TRPID,
    pub prs_configuration: PRSConfiguration,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PRSTransmissionTRPItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSTransmissionTRPList(pub Vec<PRSTransmissionTRPItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PWS_Failed_NR_CGI_Item {
    pub nrcgi: NRCGI,
    pub number_of_broadcasts: NumberOfBroadcasts,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PWS_Failed_NR_CGI_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PWS_Failed_NR_CGI_List(pub Vec<PWS_Failed_NR_CGI_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PWSCancelRequest {
    pub protocol_i_es: PWSCancelRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PWSCancelResponse {
    pub protocol_i_es: PWSCancelResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PWSFailureIndication {
    pub protocol_i_es: PWSFailureIndicationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PWSRestartIndication {
    pub protocol_i_es: PWSRestartIndicationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PWSSystemInformation {
    pub si_btype: SIBType_PWS,
    pub si_bmessage: PWSSystemInformationSIBmessage,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PWSSystemInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1023", extensible = true)]
pub struct PacketDelayBudget(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PacketErrorRate {
    pub per_scalar: PER_Scalar,
    pub per_exponent: PER_Exponent,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PacketErrorRateIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct Paging {
    pub protocol_i_es: PagingProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum PagingCause {
    VOICE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PagingCell_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PagingCell_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct PagingCell_list(pub Vec<PagingCell_list_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum PagingDRX {
    V32,
    V64,
    V128,
    V256,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum PagingIdentity {
    #[asn(key = 0, extended = false)]
    RANUEPagingIdentity(RANUEPagingIdentity),
    #[asn(key = 1, extended = false)]
    CNUEPagingIdentity(CNUEPagingIdentity),
    #[asn(key = 2, extended = false)]
    Choice_extension(PagingIdentity_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum PagingOrigin {
    NON_3GPP,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "7")]
pub enum PagingPriority {
    PRIOLEVEL1,
    PRIOLEVEL2,
    PRIOLEVEL3,
    PRIOLEVEL4,
    PRIOLEVEL5,
    PRIOLEVEL6,
    PRIOLEVEL7,
    PRIOLEVEL8,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct Parent_IAB_Nodes_NA_Resource_Configuration_Item {
    #[asn(optional_idx = 0)]
    pub na_downlink: Option<NADownlink>,
    #[asn(optional_idx = 1)]
    pub na_uplink: Option<NAUplink>,
    #[asn(optional_idx = 2)]
    pub na_flexible: Option<NAFlexible>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<Parent_IAB_Nodes_NA_Resource_Configuration_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "5120"
)]
pub struct Parent_IAB_Nodes_NA_Resource_Configuration_List(
    pub Vec<Parent_IAB_Nodes_NA_Resource_Configuration_Item>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PartialSuccessCell {
    pub broadcast_cell_list: BroadcastCellList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PartialSuccessCellIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct PathSwitchConfiguration {
    pub target_relay_ueid: PathSwitchConfigurationTargetRelayUEID,
    pub remote_ue_local_id: RemoteUELocalID,
    pub t420: PathSwitchConfigurationT420,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PathSwitchConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PathlossReferenceInfo {
    pub pathloss_reference_signal: PathlossReferenceSignal,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PathlossReferenceInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum PathlossReferenceSignal {
    #[asn(key = 0, extended = false)]
    SSB(SSB),
    #[asn(key = 1, extended = false)]
    DL_PRS(DL_PRS),
    #[asn(key = 2, extended = false)]
    Choice_extension(PathlossReferenceSignal_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PedestrianUE {
    AUTHORIZED,
    NOT_AUTHORIZED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "640000", extensible = true)]
pub struct Periodicity(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct PeriodicityList(pub Vec<PeriodicityList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PeriodicityList_Item {
    pub periodicity_srs: PeriodicitySRS,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PeriodicityList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "24")]
pub enum PeriodicitySRS {
    MS0P125,
    MS0P25,
    MS0P5,
    MS0P625,
    MS1,
    MS1P25,
    MS2,
    MS2P5,
    MS4,
    MS5,
    MS8,
    MS10,
    MS16,
    MS20,
    MS32,
    MS40,
    MS64,
    MS80,
    MS160,
    MS320,
    MS640,
    MS1280,
    MS2560,
    MS5120,
    MS10240,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum Permutation {
    DFU,
    UFD,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Ph_InfoMCG(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Ph_InfoSCG(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct PlayoutDelayForMediaStartup(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "16", sz_ub = "16")]
pub struct PortNumber(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct PosAssistance_Information(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct PosAssistanceInformationFailureList(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PosBroadcast {
    START,
    STOP,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum PosConextRevIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct PosMeasGapPreConfigList {
    #[asn(optional_idx = 0)]
    pub pos_meas_gap_pre_config_to_add_mod_list:
        Option<PosMeasGapPreConfigListPosMeasGapPreConfigToAddModList>,
    #[asn(optional_idx = 1)]
    pub pos_meas_gap_pre_config_to_release_list:
        Option<PosMeasGapPreConfigListPosMeasGapPreConfigToReleaseList>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<PosMeasGapPreConfigListIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "7")]
pub enum PosMeasurementAmount {
    MA0,
    MA1,
    MA2,
    MA4,
    MA8,
    MA16,
    MA32,
    MA64,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "13")]
pub enum PosMeasurementPeriodicityNR_AoA {
    MS160,
    MS320,
    MS640,
    MS1280,
    MS2560,
    MS5120,
    MS10240,
    MS20480,
    MS40960,
    MS61440,
    MS81920,
    MS368640,
    MS737280,
    MS1843200,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "16384"
)]
pub struct PosMeasurementQuantities(pub Vec<PosMeasurementQuantities_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct PosMeasurementQuantities_Item {
    pub pos_measurement_type: PosMeasurementType,
    #[asn(optional_idx = 0)]
    pub timing_reporting_granularity_factor:
        Option<PosMeasurementQuantities_ItemTimingReportingGranularityFactor>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PosMeasurementQuantities_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "16384"
)]
pub struct PosMeasurementResult(pub Vec<PosMeasurementResultItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct PosMeasurementResultItem {
    pub measured_results_value: MeasuredResultsValue,
    pub time_stamp: TimeStamp,
    #[asn(optional_idx = 0)]
    pub measurement_quality: Option<TRPMeasurementQuality>,
    #[asn(optional_idx = 1)]
    pub measurement_beam_info: Option<MeasurementBeamInfo>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<PosMeasurementResultItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct PosMeasurementResultList(pub Vec<PosMeasurementResultList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PosMeasurementResultList_Item {
    pub pos_measurement_result: PosMeasurementResult,
    pub trpid: TRPID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PosMeasurementResultList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum PosMeasurementType {
    GNB_RX_TX,
    UL_SRS_RSRP,
    UL_AOA,
    UL_RTOA,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PosReportCharacteristics {
    ONDEMAND,
    PERIODIC,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum PosResourceSetType {
    #[asn(key = 0, extended = false)]
    Periodic(PosResourceSetTypePR),
    #[asn(key = 1, extended = false)]
    Semi_persistent(PosResourceSetTypeSP),
    #[asn(key = 2, extended = false)]
    Aperiodic(PosResourceSetTypeAP),
    #[asn(key = 3, extended = false)]
    Choice_extension(PosResourceSetType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PosResourceSetTypeAP {
    pub srs_resource_trigger_list: PosResourceSetTypeAPSRSResourceTrigger_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PosResourceSetTypeAPIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PosResourceSetTypePR {
    pub posperiodic_set: PosResourceSetTypePRPosperiodicSet,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PosResourceSetTypePRIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PosResourceSetTypeSP {
    pub possemi_persistent_set: PosResourceSetTypeSPPossemi_persistentSet,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PosResourceSetTypeSPIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PosSRSInfo {
    pub pos_srs_resource_id: SRSPosResourceID,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct PosSRSResource_Item {
    pub srs_pos_resource_id: SRSPosResourceID,
    pub transmission_comb_pos: TransmissionCombPos,
    pub start_position: PosSRSResource_ItemStartPosition,
    pub nrof_symbols: PosSRSResource_ItemNrofSymbols,
    pub freq_domain_shift: PosSRSResource_ItemFreqDomainShift,
    pub c_srs: PosSRSResource_ItemC_SRS,
    pub group_or_sequence_hopping: PosSRSResource_ItemGroupOrSequenceHopping,
    pub resource_type_pos: ResourceTypePos,
    pub sequence_id: PosSRSResource_ItemSequenceId,
    #[asn(optional_idx = 0)]
    pub spatial_relation_pos: Option<SpatialRelationPos>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<PosSRSResource_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct PosSRSResource_List(pub Vec<PosSRSResource_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct PosSRSResourceID_List(pub Vec<SRSPosResourceID>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct PosSRSResourceSet_Item {
    pub possrs_resource_set_id: PosSRSResourceSet_ItemPossrsResourceSetID,
    pub poss_rs_resource_id_list: PosSRSResourceID_List,
    pub posresource_set_type: PosResourceSetType,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<PosSRSResourceSet_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct PosSRSResourceSet_List(pub Vec<PosSRSResourceSet_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningActivationFailure {
    pub protocol_i_es: PositioningActivationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningActivationRequest {
    pub protocol_i_es: PositioningActivationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningActivationResponse {
    pub protocol_i_es: PositioningActivationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningAssistanceInformationControl {
    pub protocol_i_es: PositioningAssistanceInformationControlProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningAssistanceInformationFeedback {
    pub protocol_i_es: PositioningAssistanceInformationFeedbackProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "16384"
)]
pub struct PositioningBroadcastCells(pub Vec<NRCGI>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningDeactivation {
    pub protocol_i_es: PositioningDeactivationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningInformationFailure {
    pub protocol_i_es: PositioningInformationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningInformationRequest {
    pub protocol_i_es: PositioningInformationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningInformationResponse {
    pub protocol_i_es: PositioningInformationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningInformationUpdate {
    pub protocol_i_es: PositioningInformationUpdateProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningMeasurementAbort {
    pub protocol_i_es: PositioningMeasurementAbortProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningMeasurementFailure {
    pub protocol_i_es: PositioningMeasurementFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningMeasurementFailureIndication {
    pub protocol_i_es: PositioningMeasurementFailureIndicationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningMeasurementReport {
    pub protocol_i_es: PositioningMeasurementReportProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningMeasurementRequest {
    pub protocol_i_es: PositioningMeasurementRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningMeasurementResponse {
    pub protocol_i_es: PositioningMeasurementResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PositioningMeasurementUpdate {
    pub protocol_i_es: PositioningMeasurementUpdateProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Potential_SpCell_Item {
    pub potential_sp_cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Potential_SpCell_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "0", sz_ub = "64")]
pub struct Potential_SpCell_List(pub Vec<Potential_SpCell_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum Pre_emptionCapability {
    SHALL_NOT_TRIGGER_PRE_EMPTION,
    MAY_TRIGGER_PRE_EMPTION,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum Pre_emptionVulnerability {
    NOT_PRE_EMPTABLE,
    PRE_EMPTABLE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum Presence {
    OPTIONAL,
    CONDITIONAL,
    MANDATORY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PrimaryPathIndication {
    TRUE,
    FALSE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "15")]
pub struct PriorityLevel(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PrivacyIndicator {
    IMMEDIATE_MDT,
    LOGGED_MDT,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum PrivateIE_ID {
    #[asn(key = 0, extended = false)]
    Local(PrivateIE_ID_local),
    #[asn(key = 1, extended = false)]
    Global(PrivateIE_ID_global),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct PrivateMessage {
    pub private_i_es: PrivateMessagePrivateIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct ProcedureCode(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Protected_EUTRA_Resources_Item {
    pub spectrum_sharing_group_id: SpectrumSharingGroupID,
    pub eutra_cells_list: EUTRACells_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Protected_EUTRA_Resources_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct Protected_EUTRA_Resources_List(pub Vec<Protected_EUTRA_Resources_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct ProtectedEUTRAResourceIndication(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535")]
pub struct ProtocolExtensionID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535")]
pub struct ProtocolIE_ID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct QCI(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct QoEInformation {
    pub qo_e_information_list: QoEInformationList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<QoEInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct QoEInformationList(pub Vec<QoEInformationList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct QoEInformationList_Item {
    #[asn(optional_idx = 0)]
    pub qo_e_metrics: Option<QoEMetrics>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<QoEInformationList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct QoEInformationTransfer {
    pub protocol_i_es: QoEInformationTransferProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct QoEMetrics {
    #[asn(optional_idx = 0)]
    pub app_layer_buffer_level_list: Option<AppLayerBufferLevelList>,
    #[asn(optional_idx = 1)]
    pub playout_delay_for_media_startup: Option<PlayoutDelayForMediaStartup>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<QoEMetricsIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum QoS_Characteristics {
    #[asn(key = 0, extended = false)]
    Non_Dynamic_5QI(NonDynamic5QIDescriptor),
    #[asn(key = 1, extended = false)]
    Dynamic_5QI(Dynamic5QIDescriptor),
    #[asn(key = 2, extended = false)]
    Choice_extension(QoS_Characteristics_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct QoSFlowIdentifier(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct QoSFlowLevelQoSParameters {
    pub qo_s_characteristics: QoS_Characteristics,
    pub ngra_nallocation_retention_priority: NGRANAllocationAndRetentionPriority,
    #[asn(optional_idx = 0)]
    pub gbr_qo_s_flow_information: Option<GBR_QoSFlowInformation>,
    #[asn(optional_idx = 1)]
    pub reflective_qo_s_attribute: Option<QoSFlowLevelQoSParametersReflective_QoS_Attribute>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<QoSFlowLevelQoSParametersIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum QoSFlowMappingIndication {
    UL,
    DL,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum QoSInformation {
    #[asn(key = 0, extended = false)]
    EUTRANQoS(EUTRANQoS),
    #[asn(key = 1, extended = false)]
    Choice_extension(QoSInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "8", extensible = true)]
pub struct QoSParaSetIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "8", extensible = true)]
pub struct QoSParaSetNotifyIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum QosMonitoringRequest {
    UL,
    DL,
    BOTH,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RACH_Config_Common(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RACH_Config_Common_IAB(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RACHReportContainer(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct RACHReportInformationItem {
    pub rach_report_container: RACHReportContainer,
    #[asn(optional_idx = 0)]
    pub ue_assitant_identifier: Option<GNB_DU_UE_F1AP_ID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<RACHReportInformationItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct RACHReportInformationList(pub Vec<RACHReportInformationItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "65536", extensible = true)]
pub struct RAN_MeasurementID(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256", extensible = true)]
pub struct RAN_UE_MeasurementID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "16", extensible = true)]
pub struct RAN_UE_PDC_MeasID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct RANAC(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct RANUEID(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct RANUEPagingIdentity {
    pub irnti: RANUEPagingIdentityIRNTI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RANUEPagingIdentityIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum RAT_FrequencyPriorityInformation {
    #[asn(key = 0, extended = false)]
    ENDC(SubscriberProfileIDforRFP),
    #[asn(key = 1, extended = false)]
    NGRAN(RAT_FrequencySelectionPriority),
    #[asn(key = 2, extended = false)]
    Choice_extension(RAT_FrequencyPriorityInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256", extensible = true)]
pub struct RAT_FrequencySelectionPriority(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct RBSetConfiguration {
    pub subcarrier_spacing: SubcarrierSpacing,
    pub rb_set_size: RBSetSize,
    pub n_umber_r_bsets: RBSetConfigurationNUmberRBsets,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RBSetConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "5")]
pub enum RBSetSize {
    RB2,
    RB4,
    RB8,
    RB16,
    RB32,
    RB64,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum RIMRSDetectionStatus {
    RS_DETECTED,
    RS_DISAPPEARED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct RLC_Status {
    pub reestablishment_indication: Reestablishment_Indication,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RLC_StatusIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct RLCDuplicationInformation {
    pub rlc_duplication_state_list: RLCDuplicationStateList,
    #[asn(optional_idx = 0)]
    pub primary_path_indication: Option<PrimaryPathIndication>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<RLCDuplicationInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct RLCDuplicationState_Item {
    pub duplication_state: DuplicationState,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RLCDuplicationState_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "3")]
pub struct RLCDuplicationStateList(pub Vec<RLCDuplicationState_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct RLCFailureIndication {
    pub assocated_lcid: LCID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RLCFailureIndicationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum RLCMode {
    RLC_AM,
    RLC_UM_BIDIRECTIONAL,
    RLC_UM_UNIDIRECTIONAL_UL,
    RLC_UM_UNIDIRECTIONAL_DL,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct RLFReportInformationItem {
    pub nruerlf_report_container: NRUERLFReportContainer,
    #[asn(optional_idx = 0)]
    pub ue_assitant_identifier: Option<GNB_DU_UE_F1AP_ID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<RLFReportInformationItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct RLFReportInformationList(pub Vec<RLFReportInformationItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct RRC_Version {
    pub latest_rrc_version: RRC_VersionLatest_RRC_Version,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RRC_VersionIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RRCContainer(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RRCContainer_RRCSetupComplete(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct RRCDeliveryReport {
    pub protocol_i_es: RRCDeliveryReportProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct RRCDeliveryStatus {
    pub delivery_status: PDCP_SN,
    pub triggering_message: PDCP_SN,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RRCDeliveryStatusIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum RRCDeliveryStatusRequest {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum RRCReconfigurationCompleteIndicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct RadioResourceStatus {
    pub ssb_area_radio_resource_status_list: SSBAreaRadioResourceStatusList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RadioResourceStatusIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum Re_routingEnableIndicator {
    TRUE,
    FALSE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum RedCapIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct Redcap_Bcast_Information(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum Reestablishment_Indication {
    REESTABLISHED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum ReferencePoint {
    #[asn(key = 0, extended = false)]
    CoordinateID(CoordinateID),
    #[asn(key = 1, extended = false)]
    ReferencePointCoordinate(AccessPointPosition),
    #[asn(key = 2, extended = false)]
    ReferencePointCoordinateHA(NGRANHighAccuracyAccessPointPosition),
    #[asn(key = 3, extended = false)]
    Choice_Extension(ReferencePoint_choice_Extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1023")]
pub struct ReferenceSFN(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "5", extensible = false)]
pub enum ReferenceSignal {
    #[asn(key = 0, extended = false)]
    NZP_CSI_RS(NZP_CSI_RS_ResourceID),
    #[asn(key = 1, extended = false)]
    SSB(SSB),
    #[asn(key = 2, extended = false)]
    SRS(SRSResourceID),
    #[asn(key = 3, extended = false)]
    PositioningSRS(SRSPosResourceID),
    #[asn(key = 4, extended = false)]
    DL_PRS(DL_PRS),
    #[asn(key = 5, extended = false)]
    Choice_extension(ReferenceSignal_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct ReferenceTime(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ReferenceTimeInformationReport {
    pub protocol_i_es: ReferenceTimeInformationReportProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ReferenceTimeInformationReportingControl {
    pub protocol_i_es: ReferenceTimeInformationReportingControlProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum RegistrationRequest {
    START,
    STOP,
    ADD,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct RelativeCartesianLocation {
    pub xy_zunit: RelativeCartesianLocationXYZunit,
    pub xvalue: RelativeCartesianLocationXvalue,
    pub yvalue: RelativeCartesianLocationYvalue,
    pub zvalue: RelativeCartesianLocationZvalue,
    pub location_uncertainty: LocationUncertainty,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RelativeCartesianLocationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct RelativeGeodeticLocation {
    pub milli_arc_second_units: RelativeGeodeticLocationMilli_Arc_SecondUnits,
    pub height_units: RelativeGeodeticLocationHeightUnits,
    pub delta_latitude: RelativeGeodeticLocationDeltaLatitude,
    pub delta_longitude: RelativeGeodeticLocationDeltaLongitude,
    pub delta_height: RelativeGeodeticLocationDeltaHeight,
    pub location_uncertainty: LocationUncertainty,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RelativeGeodeticLocationIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "6", extensible = false)]
pub enum RelativePathDelay {
    #[asn(key = 0, extended = false)]
    K0(RelativePathDelay_k0),
    #[asn(key = 1, extended = false)]
    K1(RelativePathDelay_k1),
    #[asn(key = 2, extended = false)]
    K2(RelativePathDelay_k2),
    #[asn(key = 3, extended = false)]
    K3(RelativePathDelay_k3),
    #[asn(key = 4, extended = false)]
    K4(RelativePathDelay_k4),
    #[asn(key = 5, extended = false)]
    K5(RelativePathDelay_k5),
    #[asn(key = 6, extended = false)]
    Choice_extension(RelativePathDelay_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "64", sz_ub = "64")]
pub struct RelativeTime1900(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255", extensible = true)]
pub struct RemoteUELocalID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "131071", extensible = true)]
pub struct RepetitionPeriod(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "32", sz_ub = "32")]
pub struct ReportCharacteristics(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "4")]
pub enum ReportingPeriodicity {
    MS500,
    MS1000,
    MS2000,
    MS5000,
    MS10000,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "512", extensible = true)]
pub struct ReportingPeriodicityValue(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct ReportingRequestType {
    pub event_type: EventType,
    #[asn(optional_idx = 0)]
    pub reporting_periodicity_value: Option<ReportingPeriodicityValue>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<ReportingRequestTypeIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum RequestType {
    OFFER,
    EXECUTION,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Requested_PDCCH_BlindDetectionSCG(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RequestedBandCombinationIndex(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct RequestedDLPRSResource_Item {
    #[asn(optional_idx = 0)]
    pub qcl_info: Option<PRSResource_QCLInfo>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<RequestedDLPRSResource_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct RequestedDLPRSResource_List(pub Vec<RequestedDLPRSResource_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 7)]
pub struct RequestedDLPRSResourceSet_Item {
    pub pr_sbandwidth: RequestedDLPRSResourceSet_ItemPRSbandwidth,
    #[asn(optional_idx = 0)]
    pub comb_size: Option<RequestedDLPRSResourceSet_ItemCombSize>,
    #[asn(optional_idx = 1)]
    pub resource_set_periodicity: Option<RequestedDLPRSResourceSet_ItemResourceSetPeriodicity>,
    #[asn(optional_idx = 2)]
    pub resource_repetition_factor: Option<RequestedDLPRSResourceSet_ItemResourceRepetitionFactor>,
    #[asn(optional_idx = 3)]
    pub resource_numberof_symbols: Option<RequestedDLPRSResourceSet_ItemResourceNumberofSymbols>,
    #[asn(optional_idx = 4)]
    pub requested_dlprs_resource_list: Option<RequestedDLPRSResource_List>,
    #[asn(optional_idx = 5)]
    pub resource_set_start_time_and_duration: Option<StartTimeAndDuration>,
    #[asn(optional_idx = 6)]
    pub ie_extensions: Option<RequestedDLPRSResourceSet_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct RequestedDLPRSResourceSet_List(pub Vec<RequestedDLPRSResourceSet_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct RequestedDLPRSTransmissionCharacteristics {
    pub requested_dlprs_resource_set_list: RequestedDLPRSResourceSet_List,
    #[asn(optional_idx = 0)]
    pub numberof_frequency_layers:
        Option<RequestedDLPRSTransmissionCharacteristicsNumberofFrequencyLayers>,
    #[asn(optional_idx = 1)]
    pub start_time_and_duration: Option<StartTimeAndDuration>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<RequestedDLPRSTransmissionCharacteristicsIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RequestedFeatureSetEntryIndex(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RequestedP_MaxFR2(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 4)]
pub struct RequestedSRSTransmissionCharacteristics {
    #[asn(optional_idx = 0)]
    pub number_of_transmissions:
        Option<RequestedSRSTransmissionCharacteristicsNumberOfTransmissions>,
    pub resource_type: RequestedSRSTransmissionCharacteristicsResourceType,
    pub bandwidth_srs: BandwidthSRS,
    #[asn(optional_idx = 1)]
    pub srs_resource_set_list: Option<SRSResourceSetList>,
    #[asn(optional_idx = 2)]
    pub ssb_information: Option<SSBInformation>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<RequestedSRSTransmissionCharacteristicsIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct Reset {
    pub protocol_i_es: ResetProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ResetAcknowledge {
    pub protocol_i_es: ResetAcknowledgeProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum ResetAll {
    RESET_ALL,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum ResetType {
    #[asn(key = 0, extended = false)]
    F1_Interface(ResetAll),
    #[asn(key = 1, extended = false)]
    PartOfF1_Interface(UE_associatedLogicalF1_ConnectionListRes),
    #[asn(key = 2, extended = false)]
    Choice_extension(ResetType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct ResourceCoordinationEUTRACellInfo {
    pub eutra_mode_info: EUTRA_Coex_Mode_Info,
    pub eutra_prach_configuration: EUTRA_PRACH_Configuration,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceCoordinationEUTRACellInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct ResourceCoordinationTransferContainer(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct ResourceCoordinationTransferInformation {
    pub me_nb_cell_id: EUTRA_Cell_ID,
    #[asn(optional_idx = 0)]
    pub resource_coordination_eutra_cell_info: Option<ResourceCoordinationEUTRACellInfo>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<ResourceCoordinationTransferInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum ResourceSetType {
    #[asn(key = 0, extended = false)]
    Periodic(ResourceSetTypePeriodic),
    #[asn(key = 1, extended = false)]
    Semi_persistent(ResourceSetTypeSemi_persistent),
    #[asn(key = 2, extended = false)]
    Aperiodic(ResourceSetTypeAperiodic),
    #[asn(key = 3, extended = false)]
    Choice_extension(ResourceSetType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceSetTypeAperiodic {
    pub srs_resource_trigger_list: ResourceSetTypeAperiodicSRSResourceTrigger_List,
    pub slotoffset: ResourceSetTypeAperiodicSlotoffset,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceSetTypeAperiodicIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceSetTypePeriodic {
    pub periodic_set: ResourceSetTypePeriodicPeriodicSet,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceSetTypePeriodicIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceSetTypeSemi_persistent {
    pub semi_persistent_set: ResourceSetTypeSemi_persistentSemi_persistentSet,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceSetTypeSemi_persistentIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ResourceStatusFailure {
    pub protocol_i_es: ResourceStatusFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ResourceStatusRequest {
    pub protocol_i_es: ResourceStatusRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ResourceStatusResponse {
    pub protocol_i_es: ResourceStatusResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ResourceStatusUpdate {
    pub protocol_i_es: ResourceStatusUpdateProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum ResourceType {
    #[asn(key = 0, extended = false)]
    Periodic(ResourceTypePeriodic),
    #[asn(key = 1, extended = false)]
    Semi_persistent(ResourceTypeSemi_persistent),
    #[asn(key = 2, extended = false)]
    Aperiodic(ResourceTypeAperiodic),
    #[asn(key = 3, extended = false)]
    Choice_extension(ResourceType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceTypeAperiodic {
    pub aperiodic_resource_type: ResourceTypeAperiodicAperiodicResourceType,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceTypeAperiodicIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceTypeAperiodicPos {
    pub slot_offset: ResourceTypeAperiodicPosSlotOffset,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceTypeAperiodicPosIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceTypePeriodic {
    pub periodicity: ResourceTypePeriodicPeriodicity,
    pub offset: ResourceTypePeriodicOffset,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceTypePeriodicIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceTypePeriodicPos {
    pub periodicity: ResourceTypePeriodicPosPeriodicity,
    pub offset: ResourceTypePeriodicPosOffset,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceTypePeriodicPosIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum ResourceTypePos {
    #[asn(key = 0, extended = false)]
    Periodic(ResourceTypePeriodicPos),
    #[asn(key = 1, extended = false)]
    Semi_persistent(ResourceTypeSemi_persistentPos),
    #[asn(key = 2, extended = false)]
    Aperiodic(ResourceTypeAperiodicPos),
    #[asn(key = 3, extended = false)]
    Choice_extension(ResourceTypePos_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceTypeSemi_persistent {
    pub periodicity: ResourceTypeSemi_persistentPeriodicity,
    pub offset: ResourceTypeSemi_persistentOffset,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceTypeSemi_persistentIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct ResourceTypeSemi_persistentPos {
    pub periodicity: ResourceTypeSemi_persistentPosPeriodicity,
    pub offset: ResourceTypeSemi_persistentPosOffset,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResourceTypeSemi_persistentPosIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct ResponseTime {
    pub time: ResponseTimeTime,
    pub time_unit: ResponseTimeTimeUnit,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ResponseTimeIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct RoutingID(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct RxTEG {
    pub trp_rx_tegid: RxTEGTRP_Rx_TEGID,
    pub trp_tx_tegid: RxTEGTRP_Tx_TEGID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<RxTEGIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct RxTxTEG {
    pub trp_rx_tx_tegid: RxTxTEGTRP_RxTx_TEGID,
    #[asn(optional_idx = 0)]
    pub trp_tx_tegid: Option<RxTxTEGTRP_Tx_TEGID>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<RxTxTEGIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum SCGActivationRequest {
    ACTIVATE_SCG,
    DEACTIVATE_SCG,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum SCGActivationStatus {
    SCG_ACTIVATED,
    SCG_DEACTIVATED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum SCGIndicator {
    RELEASED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "319")]
pub struct SCS_480(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "639")]
pub struct SCS_960(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SCS_SpecificCarrier {
    pub offset_to_carrier: SCS_SpecificCarrierOffsetToCarrier,
    pub subcarrier_spacing: SCS_SpecificCarrierSubcarrierSpacing,
    pub carrier_bandwidth: SCS_SpecificCarrierCarrierBandwidth,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SCS_SpecificCarrierIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SCell_FailedtoSetup_Item {
    pub s_cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SCell_FailedtoSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct SCell_FailedtoSetup_List(pub Vec<SCell_FailedtoSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SCell_FailedtoSetupMod_Item {
    pub s_cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SCell_FailedtoSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct SCell_FailedtoSetupMod_List(pub Vec<SCell_FailedtoSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SCell_ToBeRemoved_Item {
    pub s_cell_id: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SCell_ToBeRemoved_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct SCell_ToBeRemoved_List(pub Vec<SCell_ToBeRemoved_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SCell_ToBeSetup_Item {
    pub s_cell_id: NRCGI,
    pub s_cell_index: SCellIndex,
    #[asn(optional_idx = 0)]
    pub s_cell_ul_configured: Option<CellULConfigured>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SCell_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct SCell_ToBeSetup_List(pub Vec<SCell_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SCell_ToBeSetupMod_Item {
    pub s_cell_id: NRCGI,
    pub s_cell_index: SCellIndex,
    #[asn(optional_idx = 0)]
    pub s_cell_ul_configured: Option<CellULConfigured>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SCell_ToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct SCell_ToBeSetupMod_List(pub Vec<SCell_ToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "31", extensible = true)]
pub struct SCellIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SDT_MAC_PHY_CG_Config(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum SDT_Termination_Request {
    RADIO_LINK_PROBLEM,
    NORMAL,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "72")]
pub struct SDTBearerConfig_List(pub Vec<SDTBearerConfig_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SDTBearerConfig_List_Item {
    pub sdt_bearer_type: SDTBearerType,
    pub sdtrlc_bearer_configuration: SDTRLCBearerConfiguration,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SDTBearerConfig_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SDTBearerConfigurationInfo {
    pub sdt_bearer_config_list: SDTBearerConfig_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SDTBearerConfigurationInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum SDTBearerConfigurationQueryIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum SDTBearerType {
    #[asn(key = 0, extended = false)]
    SRB(SRBID),
    #[asn(key = 1, extended = false)]
    DRB(DRBID),
    #[asn(key = 2, extended = false)]
    Choice_extension(SDTBearerType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct SDTInformation {
    pub sdt_indicator: SDTInformationSdtIndicator,
    #[asn(optional_idx = 0)]
    pub sdt_assistant_information: Option<SDTInformationSdtAssistantInformation>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SDTInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SDTRLCBearerConfiguration(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SFN_Offset {
    pub sfn_time_offset: SFN_OffsetSFN_Time_Offset,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SFN_OffsetIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SIB1_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SIB10_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SIB12_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SIB13_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SIB14_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SIB15_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SIB17_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SIB20_message(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "6", ub = "8", extensible = true)]
pub struct SIBType_PWS(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "32", extensible = true)]
pub struct SItype(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SItype_Item {
    pub s_itype: SItype,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SItype_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct SItype_List(pub Vec<SItype_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SL_ConfigDedicatedEUTRA_Info(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SL_PHY_MAC_RLC_Config(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SL_RLC_ChannelToAddModList(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "512", extensible = true)]
pub struct SLDRBID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct SLDRBInformation {
    pub sldrb_qo_s: PC5QoSParameters,
    pub flows_mapped_to_sldrb_list: FlowsMappedToSLDRB_List,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct SLDRBs_FailedToBeModified_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SLDRBs_FailedToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_FailedToBeModified_List(pub Vec<SLDRBs_FailedToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct SLDRBs_FailedToBeSetup_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SLDRBs_FailedToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_FailedToBeSetup_List(pub Vec<SLDRBs_FailedToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct SLDRBs_FailedToBeSetupMod_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SLDRBs_FailedToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_FailedToBeSetupMod_List(pub Vec<SLDRBs_FailedToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SLDRBs_Modified_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRBs_Modified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_Modified_List(pub Vec<SLDRBs_Modified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SLDRBs_ModifiedConf_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRBs_ModifiedConf_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_ModifiedConf_List(pub Vec<SLDRBs_ModifiedConf_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SLDRBs_Required_ToBeModified_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRBs_Required_ToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_Required_ToBeModified_List(pub Vec<SLDRBs_Required_ToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SLDRBs_Required_ToBeReleased_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRBs_Required_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_Required_ToBeReleased_List(pub Vec<SLDRBs_Required_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SLDRBs_Setup_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRBs_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_Setup_List(pub Vec<SLDRBs_Setup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SLDRBs_SetupMod_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRBs_SetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_SetupMod_List(pub Vec<SLDRBs_SetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct SLDRBs_ToBeModified_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub sldrb_information: Option<SLDRBInformation>,
    #[asn(optional_idx = 1)]
    pub rlc_mode: Option<RLCMode>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<SLDRBs_ToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_ToBeModified_List(pub Vec<SLDRBs_ToBeModified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SLDRBs_ToBeReleased_Item {
    pub sldrbid: SLDRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRBs_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_ToBeReleased_List(pub Vec<SLDRBs_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SLDRBs_ToBeSetup_Item {
    pub sldrbid: SLDRBID,
    pub sldrb_information: SLDRBInformation,
    pub rlc_mode: RLCMode,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRBs_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_ToBeSetup_List(pub Vec<SLDRBs_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct SLDRBs_ToBeSetupMod_Item {
    pub sldrbid: SLDRBID,
    pub sldrb_information: SLDRBInformation,
    #[asn(optional_idx = 0)]
    pub rlc_mode: Option<RLCMode>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SLDRBs_ToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct SLDRBs_ToBeSetupMod_List(pub Vec<SLDRBs_ToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum SLDRXConfigurationIndicator {
    RELEASE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SLDRXCycleItem {
    pub rxueid: SLDRXCycleItemRXUEID,
    pub sldrx_information: SLDRXInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SLDRXCycleItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "19")]
pub enum SLDRXCycleLength {
    MS10,
    MS20,
    MS32,
    MS40,
    MS60,
    MS64,
    MS70,
    MS80,
    MS128,
    MS160,
    MS256,
    MS320,
    MS512,
    MS640,
    MS1024,
    MS1280,
    MS2048,
    MS2560,
    MS5120,
    MS10240,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct SLDRXCycleList(pub Vec<SLDRXCycleItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum SLDRXInformation {
    #[asn(key = 0, extended = false)]
    SLDRXCycle(SLDRXCycleLength),
    #[asn(key = 1, extended = false)]
    NosLDRX(SLDRXConfigurationIndicator),
    #[asn(key = 2, extended = false)]
    Choice_extension(SLDRXInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct SNSSAI {
    pub sst: SNSSAISST,
    #[asn(optional_idx = 0)]
    pub sd: Option<SNSSAISD>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SNSSAIIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SNSSAI_Item {
    pub snssai: SNSSAI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SNSSAI_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct SNSSAI_list(pub Vec<SNSSAI_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct SNSSAIAvailableCapacity_Item {
    pub snssai: SNSSAI,
    #[asn(optional_idx = 0)]
    pub slice_available_capacity_value_downlink:
        Option<SNSSAIAvailableCapacity_ItemSliceAvailableCapacityValueDownlink>,
    #[asn(optional_idx = 1)]
    pub slice_available_capacity_value_uplink:
        Option<SNSSAIAvailableCapacity_ItemSliceAvailableCapacityValueUplink>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<SNSSAIAvailableCapacity_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct SNSSAIAvailableCapacity_List(pub Vec<SNSSAIAvailableCapacity_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SNSSAIRadioResourceStatus_Item {
    pub snssai: SNSSAI,
    pub snssa_idl_gbrpr_busage: SNSSAIRadioResourceStatus_ItemSNSSAIdlGBRPRBusage,
    pub snssa_iul_gbrpr_busage: SNSSAIRadioResourceStatus_ItemSNSSAIulGBRPRBusage,
    pub snssa_idl_non_gbrpr_busage: SNSSAIRadioResourceStatus_ItemSNSSAIdlNonGBRPRBusage,
    pub snssa_iul_non_gbrpr_busage: SNSSAIRadioResourceStatus_ItemSNSSAIulNonGBRPRBusage,
    pub snssa_idl_total_pr_ballocation: SNSSAIRadioResourceStatus_ItemSNSSAIdlTotalPRBallocation,
    pub snssa_iul_total_pr_ballocation: SNSSAIRadioResourceStatus_ItemSNSSAIulTotalPRBallocation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SNSSAIRadioResourceStatus_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct SNSSAIRadioResourceStatus_List(pub Vec<SNSSAIRadioResourceStatus_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3", extensible = true)]
pub struct SRBID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SRBs_FailedToBeSetup_Item {
    pub srbid: SRBID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SRBs_FailedToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_FailedToBeSetup_List(pub Vec<SRBs_FailedToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SRBs_FailedToBeSetupMod_Item {
    pub srbid: SRBID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SRBs_FailedToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_FailedToBeSetupMod_List(pub Vec<SRBs_FailedToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SRBs_Modified_Item {
    pub srbid: SRBID,
    pub lcid: LCID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRBs_Modified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_Modified_List(pub Vec<SRBs_Modified_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SRBs_Required_ToBeReleased_Item {
    pub srbid: SRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRBs_Required_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_Required_ToBeReleased_List(pub Vec<SRBs_Required_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SRBs_Setup_Item {
    pub srbid: SRBID,
    pub lcid: LCID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRBs_Setup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_Setup_List(pub Vec<SRBs_Setup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SRBs_SetupMod_Item {
    pub srbid: SRBID,
    pub lcid: LCID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRBs_SetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_SetupMod_List(pub Vec<SRBs_SetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SRBs_ToBeReleased_Item {
    pub srbid: SRBID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRBs_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_ToBeReleased_List(pub Vec<SRBs_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SRBs_ToBeSetup_Item {
    pub srbid: SRBID,
    #[asn(optional_idx = 0)]
    pub duplication_indication: Option<DuplicationIndication>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SRBs_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_ToBeSetup_List(pub Vec<SRBs_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SRBs_ToBeSetupMod_Item {
    pub srbid: SRBID,
    #[asn(optional_idx = 0)]
    pub duplication_indication: Option<DuplicationIndication>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SRBs_ToBeSetupMod_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct SRBs_ToBeSetupMod_List(pub Vec<SRBs_ToBeSetupMod_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct SRSCarrier_List(pub Vec<SRSCarrier_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct SRSCarrier_List_Item {
    pub point_a: SRSCarrier_List_ItemPointA,
    pub uplink_channel_bw_per_scs_list: UplinkChannelBW_PerSCS_List,
    pub active_ulbwp: ActiveULBWP,
    #[asn(optional_idx = 0)]
    pub pci: Option<NRPCI>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SRSCarrier_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 5)]
pub struct SRSConfig {
    #[asn(optional_idx = 0)]
    pub srs_resource_list: Option<SRSResource_List>,
    #[asn(optional_idx = 1)]
    pub pos_srs_resource_list: Option<PosSRSResource_List>,
    #[asn(optional_idx = 2)]
    pub srs_resource_set_list: Option<SRSResourceSet_List>,
    #[asn(optional_idx = 3)]
    pub pos_srs_resource_set_list: Option<PosSRSResourceSet_List>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<SRSConfigIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SRSConfiguration {
    pub srs_carrier_list: SRSCarrier_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRSConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct SRSInfo {
    pub srs_resource: SRSResourceID,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum SRSPortIndex {
    ID1000,
    ID1001,
    ID1002,
    ID1003,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SRSPosRRCInactiveConfig(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct SRSPosResourceID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SRSResource {
    pub srs_resource_id: SRSResourceID,
    pub nrof_srs_ports: SRSResourceNrofSRS_Ports,
    pub transmission_comb: TransmissionComb,
    pub start_position: SRSResourceStartPosition,
    pub nrof_symbols: SRSResourceNrofSymbols,
    pub repetition_factor: SRSResourceRepetitionFactor,
    pub freq_domain_position: SRSResourceFreqDomainPosition,
    pub freq_domain_shift: SRSResourceFreqDomainShift,
    pub c_srs: SRSResourceC_SRS,
    pub b_srs: SRSResourceB_SRS,
    pub b_hop: SRSResourceB_hop,
    pub group_or_sequence_hopping: SRSResourceGroupOrSequenceHopping,
    pub resource_type: ResourceType,
    pub sequence_id: SRSResourceSequenceId,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRSResourceIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct SRSResource_List(pub Vec<SRSResource>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct SRSResourceID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct SRSResourceID_List(pub Vec<SRSResourceID>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SRSResourceSet {
    pub srs_resource_set_id: SRSResourceSetID,
    pub srs_resource_id_list: SRSResourceID_List,
    pub resource_set_type: ResourceSetType,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRSResourceSetIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct SRSResourceSet_List(pub Vec<SRSResourceSet>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "15", extensible = true)]
pub struct SRSResourceSetID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 5)]
pub struct SRSResourceSetItem {
    #[asn(optional_idx = 0)]
    pub num_sr_sresourcesperset: Option<SRSResourceSetItemNumSRSresourcesperset>,
    #[asn(optional_idx = 1)]
    pub periodicity_list: Option<PeriodicityList>,
    #[asn(optional_idx = 2)]
    pub spatial_relation_info: Option<SpatialRelationInfo>,
    #[asn(optional_idx = 3)]
    pub pathloss_reference_info: Option<PathlossReferenceInfo>,
    #[asn(optional_idx = 4)]
    pub ie_extensions: Option<SRSResourceSetItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct SRSResourceSetList(pub Vec<SRSResourceSetItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SRSResourceTrigger {
    pub aperiodic_srs_resource_trigger_list: AperiodicSRSResourceTriggerList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRSResourceTriggerIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum SRSResourceTypeChoice {
    #[asn(key = 0, extended = false)]
    SRSResourceInfo(SRSInfo),
    #[asn(key = 1, extended = false)]
    PosSRSResourceInfo(PosSRSInfo),
    #[asn(key = 2, extended = false)]
    Choice_extension(SRSResourceTypeChoice_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SRSResourcetype {
    pub srs_resource_type_choice: SRSResourceTypeChoice,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SRSResourcetypeIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum SRSType {
    #[asn(key = 0, extended = false)]
    SemipersistentSRS(SemipersistentSRS),
    #[asn(key = 1, extended = false)]
    AperiodicSRS(AperiodicSRS),
    #[asn(key = 2, extended = false)]
    Choice_extension(SRSType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct SSB {
    pub pci_nr: NRPCI,
    #[asn(optional_idx = 0)]
    pub ssb_index: Option<SSB_Index>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SSBIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct SSB_Index(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum SSB_PositionsInBurst {
    #[asn(key = 0, extended = false)]
    ShortBitmap(SSB_PositionsInBurst_shortBitmap),
    #[asn(key = 1, extended = false)]
    MediumBitmap(SSB_PositionsInBurst_mediumBitmap),
    #[asn(key = 2, extended = false)]
    LongBitmap(SSB_PositionsInBurst_longBitmap),
    #[asn(key = 3, extended = false)]
    Choice_extension(SSB_PositionsInBurst_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct SSB_TF_Configuration {
    pub ssb_frequency: SSB_TF_ConfigurationSSB_frequency,
    pub ssb_subcarrier_spacing: SSB_TF_ConfigurationSSB_subcarrier_spacing,
    pub ssb_transmit_power: SSB_TF_ConfigurationSSB_Transmit_power,
    pub ssb_periodicity: SSB_TF_ConfigurationSSB_periodicity,
    pub ssb_half_frame_offset: SSB_TF_ConfigurationSSB_half_frame_offset,
    pub ssb_sfn_offset: SSB_TF_ConfigurationSSB_SFN_offset,
    #[asn(optional_idx = 0)]
    pub ssb_position_in_burst: Option<SSB_PositionsInBurst>,
    #[asn(optional_idx = 1)]
    pub sfn_initialisation_time: Option<RelativeTime1900>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<SSB_TF_ConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct SSB_freqInfo(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "6")]
pub enum SSB_subcarrierSpacing {
    K_HZ15,
    K_HZ30,
    K_HZ120,
    K_HZ240,
    SPARE3,
    SPARE2,
    SPARE1,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum SSB_transmissionBitmap {
    #[asn(key = 0, extended = false)]
    ShortBitmap(SSB_transmissionBitmap_shortBitmap),
    #[asn(key = 1, extended = false)]
    MediumBitmap(SSB_transmissionBitmap_mediumBitmap),
    #[asn(key = 2, extended = false)]
    LongBitmap(SSB_transmissionBitmap_longBitmap),
    #[asn(key = 3, extended = false)]
    Choice_extension(SSB_transmissionBitmap_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "6")]
pub enum SSB_transmissionPeriodicity {
    SF10,
    SF20,
    SF40,
    SF80,
    SF160,
    SF320,
    SF640,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "127", extensible = true)]
pub struct SSB_transmissionTimingOffset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SSBAreaCapacityValueItem {
    pub ssb_index: SSBAreaCapacityValueItemSSBIndex,
    pub ssb_area_capacity_value: SSBAreaCapacityValueItemSSBAreaCapacityValue,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SSBAreaCapacityValueItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct SSBAreaCapacityValueList(pub Vec<SSBAreaCapacityValueItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct SSBAreaRadioResourceStatusItem {
    pub ssb_index: SSBAreaRadioResourceStatusItemSSBIndex,
    pub ssb_area_dlgbrpr_busage: SSBAreaRadioResourceStatusItemSSBAreaDLGBRPRBusage,
    pub ssb_area_ulgbrpr_busage: SSBAreaRadioResourceStatusItemSSBAreaULGBRPRBusage,
    pub ssb_area_d_lnon_gbrpr_busage: SSBAreaRadioResourceStatusItemSSBAreaDLnon_GBRPRBusage,
    pub ssb_area_u_lnon_gbrpr_busage: SSBAreaRadioResourceStatusItemSSBAreaULnon_GBRPRBusage,
    pub ssb_area_dl_total_pr_busage: SSBAreaRadioResourceStatusItemSSBAreaDLTotalPRBusage,
    pub ssb_area_ul_total_pr_busage: SSBAreaRadioResourceStatusItemSSBAreaULTotalPRBusage,
    #[asn(optional_idx = 0)]
    pub d_lscheduling_pdcchcc_eusage:
        Option<SSBAreaRadioResourceStatusItemDLschedulingPDCCHCCEusage>,
    #[asn(optional_idx = 1)]
    pub u_lscheduling_pdcchcc_eusage:
        Option<SSBAreaRadioResourceStatusItemULschedulingPDCCHCCEusage>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<SSBAreaRadioResourceStatusItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct SSBAreaRadioResourceStatusList(pub Vec<SSBAreaRadioResourceStatusItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SSBCoverageModification_Item {
    pub ssb_index: SSBCoverageModification_ItemSSBIndex,
    pub ssb_coverage_state: SSBCoverageState,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SSBCoverageModification_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct SSBCoverageModification_List(pub Vec<SSBCoverageModification_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "15", extensible = true)]
pub struct SSBCoverageState(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SSBInformation {
    pub ssb_information_list: SSBInformationList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SSBInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SSBInformationItem {
    pub ssb_configuration: SSB_TF_Configuration,
    pub pci_nr: NRPCI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SSBInformationItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "255"
)]
pub struct SSBInformationList(pub Vec<SSBInformationItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SSBToReportItem {
    pub ssb_index: SSBToReportItemSSBIndex,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SSBToReportItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct SSBToReportList(pub Vec<SSBToReportItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SUL_Information {
    pub sul_nrarfcn: SUL_InformationSUL_NRARFCN,
    pub sul_transmission_bandwidth: Transmission_Bandwidth,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SUL_InformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum SULAccessIndication {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Search_window_information {
    pub expected_propagation_delay: Search_window_informationExpectedPropagationDelay,
    pub delay_uncertainty: Search_window_informationDelayUncertainty,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Search_window_informationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SelectedBandCombinationIndex(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SelectedFeatureSetEntryIndex(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SemipersistentSRS {
    pub srs_resource_set_id: SRSResourceSetID,
    #[asn(optional_idx = 0)]
    pub srs_spatial_relation: Option<SpatialRelationInfo>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SemipersistentSRSIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "16", sz_ub = "16")]
pub struct SerialNumber(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "31", extensible = true)]
pub struct ServCellIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct Served_Cell_Information {
    pub nrcgi: NRCGI,
    pub nrpci: NRPCI,
    #[asn(optional_idx = 0)]
    pub five_gs_tac: Option<FiveGS_TAC>,
    #[asn(optional_idx = 1)]
    pub configured_eps_tac: Option<Configured_EPS_TAC>,
    pub served_plm_ns: ServedPLMNs_List,
    pub nr_mode_info: NR_Mode_Info,
    pub measurement_timing_configuration: Served_Cell_InformationMeasurementTimingConfiguration,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<Served_Cell_InformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct Served_Cells_To_Add_Item {
    pub served_cell_information: Served_Cell_Information,
    #[asn(optional_idx = 0)]
    pub gnb_du_system_information: Option<GNB_DU_System_Information>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Served_Cells_To_Add_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Served_Cells_To_Add_List(pub Vec<Served_Cells_To_Add_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Served_Cells_To_Delete_Item {
    pub old_nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Served_Cells_To_Delete_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Served_Cells_To_Delete_List(pub Vec<Served_Cells_To_Delete_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct Served_Cells_To_Modify_Item {
    pub old_nrcgi: NRCGI,
    pub served_cell_information: Served_Cell_Information,
    #[asn(optional_idx = 0)]
    pub gnb_du_system_information: Option<GNB_DU_System_Information>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Served_Cells_To_Modify_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "512"
)]
pub struct Served_Cells_To_Modify_List(pub Vec<Served_Cells_To_Modify_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Served_EUTRA_Cells_Information {
    pub eutra_mode_info: EUTRA_Mode_Info,
    pub protected_eutra_resource_indication: ProtectedEUTRAResourceIndication,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Served_EUTRA_Cells_InformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct ServedPLMNs_Item {
    pub plmn_identity: PLMN_Identity,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ServedPLMNs_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "6")]
pub struct ServedPLMNs_List(pub Vec<ServedPLMNs_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum Service_State {
    IN_SERVICE,
    OUT_OF_SERVICE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct Service_Status {
    pub service_state: Service_State,
    #[asn(optional_idx = 0)]
    pub switching_off_ongoing: Option<Service_StatusSwitchingOffOngoing>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Service_StatusIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct Serving_Cells_List(pub Vec<Serving_Cells_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct Serving_Cells_List_Item {
    pub nrcgi: NRCGI,
    #[asn(optional_idx = 0)]
    pub iab_mt_cell_na_resource_configuration_mode_info:
        Option<IAB_MT_Cell_NA_Resource_Configuration_Mode_Info>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Serving_Cells_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "64", extensible = true)]
pub struct ServingCellMO(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "22")]
pub enum ShortDRXCycleLength {
    MS2,
    MS3,
    MS4,
    MS5,
    MS6,
    MS7,
    MS8,
    MS10,
    MS14,
    MS16,
    MS20,
    MS30,
    MS32,
    MS35,
    MS40,
    MS64,
    MS80,
    MS128,
    MS160,
    MS256,
    MS320,
    MS512,
    MS640,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "16")]
pub struct ShortDRXCycleTimer(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SibtypetobeupdatedListItem {
    pub si_btype: SibtypetobeupdatedListItemSIBtype,
    pub si_bmessage: SibtypetobeupdatedListItemSIBmessage,
    pub value_tag: SibtypetobeupdatedListItemValueTag,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SibtypetobeupdatedListItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SidelinkConfigurationContainer(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct SidelinkRelayConfiguration {
    pub gnb_du_ue_f1api_dof_relay_ue: GNB_DU_UE_F1AP_ID,
    pub remote_ue_local_id: RemoteUELocalID,
    #[asn(optional_idx = 0)]
    pub sidelink_configuration_container: Option<SidelinkConfigurationContainer>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<SidelinkRelayConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SliceAvailableCapacity {
    pub slice_available_capacity_list: SliceAvailableCapacityList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SliceAvailableCapacityIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SliceAvailableCapacityItem {
    pub plmn_identity: PLMN_Identity,
    pub snssai_available_capacity_list: SNSSAIAvailableCapacity_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SliceAvailableCapacityItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct SliceAvailableCapacityList(pub Vec<SliceAvailableCapacityItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SliceRadioResourceStatus {
    pub slice_radio_resource_status: SliceRadioResourceStatus_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SliceRadioResourceStatusIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SliceRadioResourceStatus_Item {
    pub plmn_identity: PLMN_Identity,
    pub snssai_radio_resource_status_list: SNSSAIRadioResourceStatus_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SliceRadioResourceStatus_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct SliceRadioResourceStatus_List(pub Vec<SliceRadioResourceStatus_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SliceSupportItem {
    pub snssai: SNSSAI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SliceSupportItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1024"
)]
pub struct SliceSupportList(pub Vec<SliceSupportItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SliceToReportItem {
    pub plmn_identity: PLMN_Identity,
    pub snssa_ilist: SNSSAI_list,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SliceToReportItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct SliceToReportList(pub Vec<SliceToReportItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct Slot_Configuration_Item {
    pub slot_index: Slot_Configuration_ItemSlotIndex,
    pub symbol_alloc_in_slot: SymbolAllocInSlot,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Slot_Configuration_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "5120"
)]
pub struct Slot_Configuration_List(pub Vec<Slot_Configuration_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "79")]
pub struct SlotNumber(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SpatialDirectionInformation {
    pub nr_prs_beam_information: NR_PRSBeamInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SpatialDirectionInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SpatialRelationInfo {
    pub spatial_relationfor_resource_id: SpatialRelationforResourceID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SpatialRelationInfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SpatialRelationPerSRSResource {
    pub spatial_relation_per_srs_resource_list: SpatialRelationPerSRSResource_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SpatialRelationPerSRSResourceIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct SpatialRelationPerSRSResource_List(pub Vec<SpatialRelationPerSRSResourceItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SpatialRelationPerSRSResourceItem {
    pub reference_signal: ReferenceSignal,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SpatialRelationPerSRSResourceItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum SpatialRelationPos {
    #[asn(key = 0, extended = false)]
    SSBPos(SSB),
    #[asn(key = 1, extended = false)]
    PRSInformationPos(PRSInformationPos),
    #[asn(key = 2, extended = false)]
    Choice_extension(SpatialRelationPos_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct SpatialRelationforResourceID(pub Vec<SpatialRelationforResourceIDItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SpatialRelationforResourceIDItem {
    pub reference_signal: ReferenceSignal,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SpatialRelationforResourceIDItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256")]
pub struct SpectrumSharingGroupID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct SrsFrequency(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct StartTimeAndDuration {
    #[asn(optional_idx = 0)]
    pub start_time: Option<RelativeTime1900>,
    #[asn(optional_idx = 1)]
    pub duration: Option<StartTimeAndDurationDuration>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<StartTimeAndDurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "7")]
pub enum SubcarrierSpacing {
    K_HZ15,
    K_HZ30,
    K_HZ60,
    K_HZ120,
    K_HZ240,
    SPARE3,
    SPARE2,
    SPARE1,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256", extensible = true)]
pub struct SubscriberProfileIDforRFP(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct SuccessfulHOReportInformation_Item {
    pub successful_ho_report_container:
        SuccessfulHOReportInformation_ItemSuccessfulHOReportContainer,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SuccessfulHOReportInformation_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct SuccessfulHOReportInformationList(pub Vec<SuccessfulHOReportInformation_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SuccessfulOutcome {
    #[asn(key_field = true)]
    pub procedure_code: ProcedureCode,
    pub criticality: Criticality,
    pub value: SuccessfulOutcomeValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct Supported_MBS_FSA_ID_List(pub Vec<MBS_FrequencySelectionArea_Identity>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct SupportedSULFreqBandItem {
    pub freq_band_indicator_nr: SupportedSULFreqBandItemFreqBandIndicatorNr,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<SupportedSULFreqBandItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1920000", extensible = true)]
pub struct SurvivalTime(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum SymbolAllocInSlot {
    #[asn(key = 0, extended = false)]
    All_DL(SymbolAllocInSlot_all_DL),
    #[asn(key = 1, extended = false)]
    All_UL(SymbolAllocInSlot_all_UL),
    #[asn(key = 2, extended = false)]
    Both_DL_and_UL(NumDLULSymbols),
    #[asn(key = 3, extended = false)]
    Choice_extension(SymbolAllocInSlot_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1023")]
pub struct SystemFrameNumber(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "24", sz_ub = "24")]
pub struct SystemInformationAreaID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct SystemInformationDeliveryCommand {
    pub protocol_i_es: SystemInformationDeliveryCommandProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct TDD_Info {
    pub nr_freq_info: NRFreqInfo,
    pub transmission_bandwidth: Transmission_Bandwidth,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TDD_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 4)]
pub struct TDD_InfoRel16 {
    #[asn(optional_idx = 0)]
    pub tdd_freq_info: Option<FreqInfoRel16>,
    #[asn(optional_idx = 1)]
    pub sul_freq_info: Option<FreqInfoRel16>,
    #[asn(optional_idx = 2)]
    pub tdd_ul_dl_config_common_nr: Option<TDD_UL_DLConfigCommonNR>,
    #[asn(optional_idx = 3)]
    pub ie_extensions: Option<TDD_InfoRel16IE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct TDD_UL_DLConfigCommonNR(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "6", sz_ub = "6")]
pub struct TMGI(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum TNLAssociationUsage {
    UE,
    NON_UE,
    BOTH,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TNLCapacityIndicator {
    pub dltnl_offered_capacity: TNLCapacityIndicatorDLTNLOfferedCapacity,
    pub dltnl_available_capacity: TNLCapacityIndicatorDLTNLAvailableCapacity,
    pub ultnl_offered_capacity: TNLCapacityIndicatorULTNLOfferedCapacity,
    pub ultnl_available_capacity: TNLCapacityIndicatorULTNLAvailableCapacity,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TNLCapacityIndicatorIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct TRP_Beam_Power_Item {
    #[asn(optional_idx = 0)]
    pub prs_resource_set_id: Option<PRS_Resource_Set_ID>,
    pub prs_resource_id: PRS_Resource_ID,
    pub relative_power: TRP_Beam_Power_ItemRelativePower,
    #[asn(optional_idx = 1)]
    pub relative_power_fine: Option<TRP_Beam_Power_ItemRelativePowerFine>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<TRP_Beam_Power_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "3600"
)]
pub struct TRP_BeamAntennaAngles(pub Vec<TRP_BeamAntennaAnglesList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct TRP_BeamAntennaAnglesList_Item {
    pub trp_azimuth_angle: TRP_BeamAntennaAnglesList_ItemTrp_azimuth_angle,
    #[asn(optional_idx = 0)]
    pub trp_azimuth_angle_fine: Option<TRP_BeamAntennaAnglesList_ItemTrp_azimuth_angle_fine>,
    pub trp_elevation_angle_list: TRP_BeamAntennaAnglesList_ItemTrp_elevation_angle_list,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<TRP_BeamAntennaAnglesList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct TRP_BeamAntennaExplicitInformation {
    pub trp_beam_antenna_angles: TRP_BeamAntennaAngles,
    #[asn(optional_idx = 0)]
    pub lcs_to_gcs_translation: Option<LCS_to_GCS_Translation>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<TRP_BeamAntennaExplicitInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct TRP_ElevationAngleList_Item {
    pub trp_elevation_angle: TRP_ElevationAngleList_ItemTrp_elevation_angle,
    #[asn(optional_idx = 0)]
    pub trp_elevation_angle_fine: Option<TRP_ElevationAngleList_ItemTrp_elevation_angle_fine>,
    pub trp_beam_power_list: TRP_ElevationAngleList_ItemTrp_beam_power_list,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<TRP_ElevationAngleList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct TRP_MeasurementRequestItem {
    pub trpid: TRPID,
    #[asn(optional_idx = 0)]
    pub search_window_information: Option<Search_window_information>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<TRP_MeasurementRequestItemIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct TRP_MeasurementRequestList(pub Vec<TRP_MeasurementRequestItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct TRP_MeasurementUpdateItem {
    pub trp_id: TRPID,
    #[asn(optional_idx = 0)]
    pub ao_a_window_information: Option<AoA_AssistanceInfo>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<TRP_MeasurementUpdateItemIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct TRP_MeasurementUpdateList(pub Vec<TRP_MeasurementUpdateItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "256"
)]
pub struct TRP_PRS_Info_List(pub Vec<TRP_PRS_Info_List_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct TRP_PRS_Info_List_Item {
    pub trp_id: TRPID,
    pub nr_pci: NRPCI,
    #[asn(optional_idx = 0)]
    pub cgi_nr: Option<NRCGI>,
    pub prs_configuration: PRSConfiguration,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<TRP_PRS_Info_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct TRPBeamAntennaInformation {
    pub choice_trp_beam_antenna_info_item: Choice_TRP_Beam_Antenna_Info_Item,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TRPBeamAntennaInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535", extensible = true)]
pub struct TRPID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TRPInformation {
    pub trpid: TRPID,
    pub trp_information_type_response_list: TRPInformationTypeResponseList,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TRPInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct TRPInformationFailure {
    pub protocol_i_es: TRPInformationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TRPInformationItem {
    pub trp_information: TRPInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TRPInformationItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPInformationListTRPResp(pub Vec<TRPInformationListTRPResp_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct TRPInformationRequest {
    pub protocol_i_es: TRPInformationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct TRPInformationResponse {
    pub protocol_i_es: TRPInformationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "7")]
pub enum TRPInformationTypeItem {
    NR_PCI,
    N_G_RAN_CGI,
    ARFCN,
    P_RS_CONFIG,
    S_SB_CONFIG,
    S_FN_INIT_TIME,
    SPATIAL_DIRECT_INFO,
    GEO_COORD,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct TRPInformationTypeListTRPReq(pub Vec<TRPInformationTypeListTRPReq_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "8", extensible = false)]
pub enum TRPInformationTypeResponseItem {
    #[asn(key = 0, extended = false)]
    PCI_NR(NRPCI),
    #[asn(key = 1, extended = false)]
    NG_RAN_CGI(NRCGI),
    #[asn(key = 2, extended = false)]
    NRARFCN(TRPInformationTypeResponseItem_nRARFCN),
    #[asn(key = 3, extended = false)]
    PRSConfiguration(PRSConfiguration),
    #[asn(key = 4, extended = false)]
    SSBinformation(SSBInformation),
    #[asn(key = 5, extended = false)]
    SFNInitialisationTime(RelativeTime1900),
    #[asn(key = 6, extended = false)]
    SpatialDirectionInformation(SpatialDirectionInformation),
    #[asn(key = 7, extended = false)]
    GeographicalCoordinates(GeographicalCoordinates),
    #[asn(key = 8, extended = false)]
    Choice_extension(TRPInformationTypeResponseItem_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct TRPInformationTypeResponseList(pub Vec<TRPInformationTypeResponseItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPList(pub Vec<TRPListItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TRPListItem {
    pub trpid: TRPID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TRPListItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TRPMeasurementQuality {
    pub tr_pmeasurement_quality_item: TRPMeasurementQuality_Item,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TRPMeasurementQualityIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum TRPMeasurementQuality_Item {
    #[asn(key = 0, extended = false)]
    TimingMeasurementQuality(TimingMeasurementQuality),
    #[asn(key = 1, extended = false)]
    AngleMeasurementQuality(AngleMeasurementQuality),
    #[asn(key = 2, extended = false)]
    Choice_extension(TRPMeasurementQuality_Item_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum TRPPositionDefinitionType {
    #[asn(key = 0, extended = false)]
    Direct(TRPPositionDirect),
    #[asn(key = 1, extended = false)]
    Referenced(TRPPositionReferenced),
    #[asn(key = 2, extended = false)]
    Choice_extension(TRPPositionDefinitionType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TRPPositionDirect {
    pub accuracy: TRPPositionDirectAccuracy,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TRPPositionDirectIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum TRPPositionDirectAccuracy {
    #[asn(key = 0, extended = false)]
    TRPPosition(AccessPointPosition),
    #[asn(key = 1, extended = false)]
    TRPHAposition(NGRANHighAccuracyAccessPointPosition),
    #[asn(key = 2, extended = false)]
    Choice_extension(TRPPositionDirectAccuracy_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TRPPositionReferenced {
    pub reference_point: ReferencePoint,
    pub reference_point_type: TRPReferencePointType,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TRPPositionReferencedIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum TRPReferencePointType {
    #[asn(key = 0, extended = false)]
    TRPPositionRelativeGeodetic(RelativeGeodeticLocation),
    #[asn(key = 1, extended = false)]
    TRPPositionRelativeCartesian(RelativeCartesianLocation),
    #[asn(key = 2, extended = false)]
    Choice_extension(TRPReferencePointType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct TRPTEG_Item {
    pub trp_tx_teg_id: TRPTEG_ItemTRP_Tx_TEG_ID,
    pub dl_prs_resource_set_id: PRS_Resource_Set_ID,
    #[asn(optional_idx = 0)]
    pub dl_prs_resource_id_list: Option<TRPTEG_ItemDl_PRSResourceID_List>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<TRPTEG_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum TRPTEGIDInformation {
    #[asn(key = 0, extended = false)]
    RxTx_TEG(RxTxTEG),
    #[asn(key = 1, extended = false)]
    Rx_TEG(RxTEG),
    #[asn(key = 2, extended = false)]
    Choice_extension(TRPTEGIDInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct TRPTxTEGAssociation(pub Vec<TRPTEG_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "4")]
pub enum TRPType {
    PRS_ONLY_TP,
    SRS_ONLY_RP,
    TP,
    RP,
    TRP,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct TSCAssistanceInformation {
    pub periodicity: Periodicity,
    #[asn(optional_idx = 0)]
    pub burst_arrival_time: Option<BurstArrivalTime>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<TSCAssistanceInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct TSCTrafficCharacteristics {
    #[asn(optional_idx = 0)]
    pub tsc_assistance_information_dl: Option<TSCAssistanceInformation>,
    #[asn(optional_idx = 1)]
    pub tsc_assistance_information_ul: Option<TSCAssistanceInformation>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<TSCTrafficCharacteristicsIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct TargetCellList(pub Vec<TargetCellList_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TargetCellList_Item {
    pub target_cell: NRCGI,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TargetCellList_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "0")]
pub enum TimeInformationType {
    LOCAL_CLOCK,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TimeReferenceInformation {
    pub reference_time: ReferenceTime,
    pub reference_sfn: ReferenceSFN,
    pub uncertainty: Uncertainty,
    pub time_information_type: TimeInformationType,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TimeReferenceInformationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct TimeStamp {
    pub system_frame_number: SystemFrameNumber,
    pub slot_index: TimeStampSlotIndex,
    #[asn(optional_idx = 0)]
    pub measurement_time: Option<RelativeTime1900>,
    #[asn(optional_idx = 1)]
    pub ie_extension: Option<TimeStampIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "4", extensible = false)]
pub enum TimeStampSlotIndex {
    #[asn(key = 0, extended = false)]
    SCS_15(TimeStampSlotIndex_sCS_15),
    #[asn(key = 1, extended = false)]
    SCS_30(TimeStampSlotIndex_sCS_30),
    #[asn(key = 2, extended = false)]
    SCS_60(TimeStampSlotIndex_sCS_60),
    #[asn(key = 3, extended = false)]
    SCS_120(TimeStampSlotIndex_sCS_120),
    #[asn(key = 4, extended = false)]
    Choice_extension(TimeStampSlotIndex_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "5")]
pub enum TimeToWait {
    V1S,
    V2S,
    V5S,
    V10S,
    V20S,
    V60S,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "15")]
pub enum TimingErrorMargin {
    M0_TC,
    M2_TC,
    M4_TC,
    M6_TC,
    M8_TC,
    M12_TC,
    M16_TC,
    M20_TC,
    M24_TC,
    M32_TC,
    M40_TC,
    M48_TC,
    M56_TC,
    M64_TC,
    M72_TC,
    M80_TC,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TimingMeasurementQuality {
    pub measurement_quality: TimingMeasurementQualityMeasurementQuality,
    pub resolution: TimingMeasurementQualityResolution,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TimingMeasurementQualityIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct TraceActivation {
    pub trace_id: TraceID,
    pub interfaces_to_trace: InterfacesToTrace,
    pub trace_depth: TraceDepth,
    pub trace_collection_entity_ip_address: TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<TraceActivationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "5")]
pub enum TraceDepth {
    MINIMUM,
    MEDIUM,
    MAXIMUM,
    MINIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION,
    MEDIUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION,
    MAXIMUM_WITHOUT_VENDOR_SPECIFIC_EXTENSION,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct TraceID(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct TraceStart {
    pub protocol_i_es: TraceStartProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum TrafficMappingInfo {
    #[asn(key = 0, extended = false)]
    IPtolayer2TrafficMappingInfo(IPtolayer2TrafficMappingInfo),
    #[asn(key = 1, extended = false)]
    BAPlayerBHRLCchannelMappingInfo(BAPlayerBHRLCchannelMappingInfo),
    #[asn(key = 2, extended = false)]
    Choice_extension(TrafficMappingInfo_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255", extensible = true)]
pub struct TransactionID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct Transmission_Bandwidth {
    pub nrscs: NRSCS,
    pub nrnrb: NRNRB,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<Transmission_BandwidthIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum TransmissionActionIndicator {
    STOP,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum TransmissionComb {
    #[asn(key = 0, extended = false)]
    N2(TransmissionComb_n2),
    #[asn(key = 1, extended = false)]
    N4(TransmissionComb_n4),
    #[asn(key = 2, extended = false)]
    Choice_extension(TransmissionComb_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "3", extensible = false)]
pub enum TransmissionCombPos {
    #[asn(key = 0, extended = false)]
    N2(TransmissionCombPos_n2),
    #[asn(key = 1, extended = false)]
    N4(TransmissionCombPos_n4),
    #[asn(key = 2, extended = false)]
    N8(TransmissionCombPos_n8),
    #[asn(key = 3, extended = false)]
    Choice_extension(TransmissionCombPos_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum TransmissionStopIndicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct Transport_Layer_Address_Info {
    #[asn(optional_idx = 0)]
    pub transport_up_layer_address_info_to_add_list:
        Option<Transport_UP_Layer_Address_Info_To_Add_List>,
    #[asn(optional_idx = 1)]
    pub transport_up_layer_address_info_to_remove_list:
        Option<Transport_UP_Layer_Address_Info_To_Remove_List>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<Transport_Layer_Address_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct Transport_UP_Layer_Address_Info_To_Add_Item {
    pub ip_sec_transport_layer_address: TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub gtp_transport_layer_address_to_add: Option<GTPTLAs>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Transport_UP_Layer_Address_Info_To_Add_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct Transport_UP_Layer_Address_Info_To_Add_List(
    pub Vec<Transport_UP_Layer_Address_Info_To_Add_Item>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct Transport_UP_Layer_Address_Info_To_Remove_Item {
    pub ip_sec_transport_layer_address: TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub gtp_transport_layer_address_to_remove: Option<GTPTLAs>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<Transport_UP_Layer_Address_Info_To_Remove_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "16")]
pub struct Transport_UP_Layer_Address_Info_To_Remove_List(
    pub Vec<Transport_UP_Layer_Address_Info_To_Remove_Item>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = true, sz_lb = "1", sz_ub = "160")]
pub struct TransportLayerAddress(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum TriggeringMessage {
    INITIATING_MESSAGE,
    SUCCESSFUL_OUTCOME,
    UNSUCCESSFUL_OUTCOME,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum TypeOfError {
    NOT_UNDERSTOOD,
    MISSING,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct UAC_Assistance_Info {
    pub uacplmn_list: UACPLMN_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UAC_Assistance_InfoIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum UACAction {
    REJECT_NON_EMERGENCY_MO_DT,
    REJECT_RRC_CR_SIGNALLING,
    PERMIT_EMERGENCY_SESSIONS_AND_MOBILE_TERMINATED_SERVICES_ONLY,
    PERMIT_HIGH_PRIORITY_SESSIONS_AND_MOBILE_TERMINATED_SERVICES_ONLY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum UACCategoryType {
    #[asn(key = 0, extended = false)]
    UACstandardized(UACAction),
    #[asn(key = 1, extended = false)]
    UACOperatorDefined(UACOperatorDefined),
    #[asn(key = 2, extended = false)]
    Choice_extension(UACCategoryType_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct UACOperatorDefined {
    pub access_category: UACOperatorDefinedAccessCategory,
    pub access_identity: UACOperatorDefinedAccessIdentity,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UACOperatorDefinedIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct UACPLMN_Item {
    pub plmn_identity: PLMN_Identity,
    pub uac_type_list: UACType_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UACPLMN_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "12")]
pub struct UACPLMN_List(pub Vec<UACPLMN_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct UACReductionIndication(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct UACType_Item {
    pub uac_reduction_indication: UACReductionIndication,
    pub uac_category_type: UACCategoryType,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UACType_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct UACType_List(pub Vec<UACType_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct UE_CapabilityRAT_ContainerList(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct UE_MulticastMRBs_ConfirmedToBeModified_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub mrb_type_reconfiguration: Option<MBSPTPRetransmissionTunnelRequired>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<UE_MulticastMRBs_ConfirmedToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct UE_MulticastMRBs_ConfirmedToBeModified_List(
    pub Vec<UE_MulticastMRBs_ConfirmedToBeModified_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct UE_MulticastMRBs_RequiredToBeModified_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub mrb_type_reconfiguration:
        Option<UE_MulticastMRBs_RequiredToBeModified_ItemMrb_type_reconfiguration>,
    #[asn(optional_idx = 1)]
    pub mrb_reconfigured_rl_ctype:
        Option<UE_MulticastMRBs_RequiredToBeModified_ItemMrb_reconfigured_RLCtype>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<UE_MulticastMRBs_RequiredToBeModified_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct UE_MulticastMRBs_RequiredToBeModified_List(
    pub Vec<UE_MulticastMRBs_RequiredToBeModified_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct UE_MulticastMRBs_RequiredToBeReleased_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UE_MulticastMRBs_RequiredToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct UE_MulticastMRBs_RequiredToBeReleased_List(
    pub Vec<UE_MulticastMRBs_RequiredToBeReleased_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct UE_MulticastMRBs_ToBeReleased_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UE_MulticastMRBs_ToBeReleased_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct UE_MulticastMRBs_ToBeReleased_List(pub Vec<UE_MulticastMRBs_ToBeReleased_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 3)]
pub struct UE_MulticastMRBs_ToBeSetup_Item {
    pub mrb_id: MRB_ID,
    #[asn(optional_idx = 0)]
    pub mbs_ptp_retransmission_tunnel_required: Option<MBSPTPRetransmissionTunnelRequired>,
    #[asn(optional_idx = 1)]
    pub mbs_ptp_forwarding_required_information: Option<MRB_ProgressInformation>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<UE_MulticastMRBs_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct UE_MulticastMRBs_ToBeSetup_List(pub Vec<UE_MulticastMRBs_ToBeSetup_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct UE_associatedLogicalF1_ConnectionItem {
    #[asn(optional_idx = 0)]
    pub gnb_cu_ue_f1ap_id: Option<GNB_CU_UE_F1AP_ID>,
    #[asn(optional_idx = 1)]
    pub gnb_du_ue_f1ap_id: Option<GNB_DU_UE_F1AP_ID>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<UE_associatedLogicalF1_ConnectionItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct UE_associatedLogicalF1_ConnectionListRes(
    pub Vec<UE_associatedLogicalF1_ConnectionListRes_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65536"
)]
pub struct UE_associatedLogicalF1_ConnectionListResAck(
    pub Vec<UE_associatedLogicalF1_ConnectionListResAck_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct UEAssistanceInformation(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct UEAssistanceInformationEUTRA(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextModificationConfirm {
    pub protocol_i_es: UEContextModificationConfirmProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextModificationFailure {
    pub protocol_i_es: UEContextModificationFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextModificationRefuse {
    pub protocol_i_es: UEContextModificationRefuseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextModificationRequest {
    pub protocol_i_es: UEContextModificationRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextModificationRequired {
    pub protocol_i_es: UEContextModificationRequiredProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextModificationResponse {
    pub protocol_i_es: UEContextModificationResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum UEContextNotRetrievable {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextReleaseCommand {
    pub protocol_i_es: UEContextReleaseCommandProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextReleaseComplete {
    pub protocol_i_es: UEContextReleaseCompleteProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextReleaseRequest {
    pub protocol_i_es: UEContextReleaseRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextSetupFailure {
    pub protocol_i_es: UEContextSetupFailureProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextSetupRequest {
    pub protocol_i_es: UEContextSetupRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEContextSetupResponse {
    pub protocol_i_es: UEContextSetupResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct UEIdentity_List_For_Paging_Item {
    pub ue_identity_index_value: UEIdentityIndexValue,
    #[asn(optional_idx = 0)]
    pub paging_drx: Option<PagingDRX>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<UEIdentity_List_For_Paging_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "4096"
)]
pub struct UEIdentity_List_For_Paging_List(pub Vec<UEIdentity_List_For_Paging_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum UEIdentityIndexValue {
    #[asn(key = 0, extended = false)]
    IndexLength10(UEIdentityIndexValue_indexLength10),
    #[asn(key = 1, extended = false)]
    Choice_extension(UEIdentityIndexValue_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct UEInactivityNotification {
    pub protocol_i_es: UEInactivityNotificationProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct UEPagingCapability {
    #[asn(optional_idx = 0)]
    pub inactive_state_po_determination: Option<UEPagingCapabilityINACTIVEStatePODetermination>,
    #[asn(optional_idx = 1)]
    pub ie_extension: Option<UEPagingCapabilityIE_Extension>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UEReportingInformation {
    pub reporting_amount: UEReportingInformationReportingAmount,
    pub reporting_interval: UEReportingInformationReportingInterval,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UEReportingInformationIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct UL_AoA {
    pub azimuth_ao_a: UL_AoAAzimuthAoA,
    #[asn(optional_idx = 0)]
    pub zenith_ao_a: Option<UL_AoAZenithAoA>,
    #[asn(optional_idx = 1)]
    pub lcs_to_gcs_translation: Option<LCS_to_GCS_Translation>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<UL_AoAIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct UL_BH_Non_UP_Traffic_Mapping {
    pub ul_bh_non_up_traffic_mapping_list: UL_BH_Non_UP_Traffic_Mapping_List,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UL_BH_Non_UP_Traffic_MappingIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct UL_BH_Non_UP_Traffic_Mapping_Item {
    pub non_up_traffic_type: NonUPTrafficType,
    pub bh_info: BHInfo,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UL_BH_Non_UP_Traffic_Mapping_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UL_BH_Non_UP_Traffic_Mapping_List(pub Vec<UL_BH_Non_UP_Traffic_Mapping_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct UL_GapFR2_Config(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 2)]
pub struct UL_RTOA_Measurement {
    pub ul_rtoa_measurement_item: UL_RTOA_MeasurementItem,
    #[asn(optional_idx = 0)]
    pub additional_path_list: Option<AdditionalPath_List>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<UL_RTOA_MeasurementIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "6", extensible = false)]
pub enum UL_RTOA_MeasurementItem {
    #[asn(key = 0, extended = false)]
    K0(UL_RTOA_MeasurementItem_k0),
    #[asn(key = 1, extended = false)]
    K1(UL_RTOA_MeasurementItem_k1),
    #[asn(key = 2, extended = false)]
    K2(UL_RTOA_MeasurementItem_k2),
    #[asn(key = 3, extended = false)]
    K3(UL_RTOA_MeasurementItem_k3),
    #[asn(key = 4, extended = false)]
    K4(UL_RTOA_MeasurementItem_k4),
    #[asn(key = 5, extended = false)]
    K5(UL_RTOA_MeasurementItem_k5),
    #[asn(key = 6, extended = false)]
    Choice_extension(UL_RTOA_MeasurementItem_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "126")]
pub struct UL_SRS_RSRP(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UL_SRS_RSRPP {
    pub first_path_rsrpp: UL_SRS_RSRPPFirstPathRSRPP,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UL_SRS_RSRPPIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "8")]
pub struct UL_UP_TNL_Address_to_Update_List(pub Vec<UL_UP_TNL_Address_to_Update_List_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UL_UP_TNL_Address_to_Update_List_Item {
    pub old_ip_adress: TransportLayerAddress,
    pub new_ip_adress: TransportLayerAddress,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UL_UP_TNL_Address_to_Update_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "32678"
)]
pub struct UL_UP_TNL_Information_to_Update_List(
    pub Vec<UL_UP_TNL_Information_to_Update_List_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct UL_UP_TNL_Information_to_Update_List_Item {
    pub uluptnl_information: UPTransportLayerInformation,
    #[asn(optional_idx = 0)]
    pub new_uluptnl_information: Option<UPTransportLayerInformation>,
    pub bh_info: BHInfo,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<UL_UP_TNL_Information_to_Update_List_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct ULConfiguration {
    pub ulue_configuration: ULUEConfiguration,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ULConfigurationIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct ULRRCMessageTransfer {
    pub protocol_i_es: ULRRCMessageTransferProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum ULUEConfiguration {
    NO_DATA,
    SHARED,
    ONLY,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct ULUPTNLInformation_ToBeSetup_Item {
    pub uluptnl_information: UPTransportLayerInformation,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<ULUPTNLInformation_ToBeSetup_ItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "2")]
pub struct ULUPTNLInformation_ToBeSetup_List(pub Vec<ULUPTNLInformation_ToBeSetup_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "1", extensible = false)]
pub enum UPTransportLayerInformation {
    #[asn(key = 0, extended = false)]
    GTPTunnel(GTPTunnel),
    #[asn(key = 1, extended = false)]
    Choice_extension(UPTransportLayerInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "VisibleString")]
pub struct URI_address(pub String);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "32767", extensible = true)]
pub struct Uncertainty(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3599")]
pub struct Uncertainty_range_AoA(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1799")]
pub struct Uncertainty_range_ZoA(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UnsuccessfulOutcome {
    #[asn(key_field = true)]
    pub procedure_code: ProcedureCode,
    pub criticality: Criticality,
    pub value: UnsuccessfulOutcomeValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "5")]
pub struct UplinkChannelBW_PerSCS_List(pub Vec<SCS_SpecificCarrier>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct UplinkTxDirectCurrentListInformation(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct UuRLCChannelFailedToBeModifiedItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<UuRLCChannelFailedToBeModifiedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelFailedToBeModifiedList(pub Vec<UuRLCChannelFailedToBeModifiedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct UuRLCChannelFailedToBeSetupItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    #[asn(optional_idx = 0)]
    pub cause: Option<Cause>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<UuRLCChannelFailedToBeSetupItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelFailedToBeSetupList(pub Vec<UuRLCChannelFailedToBeSetupItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "16", sz_ub = "16")]
pub struct UuRLCChannelID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UuRLCChannelModifiedItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UuRLCChannelModifiedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelModifiedList(pub Vec<UuRLCChannelModifiedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "CHOICE", lb = "0", ub = "2", extensible = false)]
pub enum UuRLCChannelQoSInformation {
    #[asn(key = 0, extended = false)]
    UuRLCChannelQoS(QoSFlowLevelQoSParameters),
    #[asn(key = 1, extended = false)]
    UuControlPlaneTrafficType(UuRLCChannelQoSInformation_uuControlPlaneTrafficType),
    #[asn(key = 2, extended = false)]
    Choice_extension(UuRLCChannelQoSInformation_choice_extension),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UuRLCChannelRequiredToBeModifiedItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UuRLCChannelRequiredToBeModifiedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelRequiredToBeModifiedList(pub Vec<UuRLCChannelRequiredToBeModifiedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UuRLCChannelRequiredToBeReleasedItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UuRLCChannelRequiredToBeReleasedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelRequiredToBeReleasedList(pub Vec<UuRLCChannelRequiredToBeReleasedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UuRLCChannelSetupItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UuRLCChannelSetupItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelSetupList(pub Vec<UuRLCChannelSetupItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 3)]
pub struct UuRLCChannelToBeModifiedItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    #[asn(optional_idx = 0)]
    pub uu_rlc_channel_qo_s_information: Option<UuRLCChannelQoSInformation>,
    #[asn(optional_idx = 1)]
    pub rlc_mode: Option<RLCMode>,
    #[asn(optional_idx = 2)]
    pub ie_extensions: Option<UuRLCChannelToBeModifiedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelToBeModifiedList(pub Vec<UuRLCChannelToBeModifiedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UuRLCChannelToBeReleasedItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UuRLCChannelToBeReleasedItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelToBeReleasedList(pub Vec<UuRLCChannelToBeReleasedItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 1)]
pub struct UuRLCChannelToBeSetupItem {
    pub uu_rlc_channel_id: UuRLCChannelID,
    pub uu_rlc_channel_qo_s_information: UuRLCChannelQoSInformation,
    pub rlc_mode: RLCMode,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<UuRLCChannelToBeSetupItemIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct UuRLCChannelToBeSetupList(pub Vec<UuRLCChannelToBeSetupItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum VehicleUE {
    AUTHORIZED,
    NOT_AUTHORIZED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false, optional_fields = 1)]
pub struct VictimgNBSetID {
    pub victimg_nb_set_id: GNBSetID,
    #[asn(optional_idx = 0)]
    pub ie_extensions: Option<VictimgNBSetIDIE_Extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct WriteReplaceWarningRequest {
    pub protocol_i_es: WriteReplaceWarningRequestProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true)]
pub struct WriteReplaceWarningResponse {
    pub protocol_i_es: WriteReplaceWarningResponseProtocolIEs,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = true, optional_fields = 2)]
pub struct ZoAInformation {
    pub zenith_ao_a: ZoAInformationZenithAoA,
    #[asn(optional_idx = 0)]
    pub lcs_to_gcs_translation: Option<LCS_to_GCS_Translation>,
    #[asn(optional_idx = 1)]
    pub ie_extensions: Option<ZoAInformationIE_extensions>,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ARPLocationInformation_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ARPLocationInformation_ItemIE_Extensions(
    pub Vec<ARPLocationInformation_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ARPLocationType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "NULL")]
pub struct AbortTransmission_releaseALL;

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AbortTransmission_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum AccessAndMobilityIndicationProtocolIEs_EntryValue {
    #[asn(key = 359)]
    Id_RACHReportInformationList(RACHReportInformationList),
    #[asn(key = 360)]
    Id_RLFReportInformationList(RLFReportInformationList),
    #[asn(key = 443)]
    Id_SuccessfulHOReportInformationList(SuccessfulHOReportInformationList),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AccessAndMobilityIndicationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: AccessAndMobilityIndicationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct AccessAndMobilityIndicationProtocolIEs(
    pub Vec<AccessAndMobilityIndicationProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum AccessPointPositionLatitudeSign {
    NORTH,
    SOUTH,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "8388607")]
pub struct AccessPointPositionLatitude(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-8388608", ub = "8388607")]
pub struct AccessPointPositionLongitude(pub i32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum AccessPointPositionDirectionOfAltitude {
    HEIGHT,
    DEPTH,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "32767")]
pub struct AccessPointPositionAltitude(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "127")]
pub struct AccessPointPositionUncertaintySemi_major(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "127")]
pub struct AccessPointPositionUncertaintySemi_minor(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "179")]
pub struct AccessPointPositionOrientationOfMajorAxis(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "127")]
pub struct AccessPointPositionUncertaintyAltitude(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct AccessPointPositionConfidence(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AccessPointPositionIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AccessPointPositionIE_Extensions(pub Vec<AccessPointPositionIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum AccessSuccessProtocolIEs_EntryValue {
    #[asn(key = 111)]
    Id_NRCGI(NRCGI),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AccessSuccessProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: AccessSuccessProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct AccessSuccessProtocolIEs(pub Vec<AccessSuccessProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Activated_Cells_to_be_Updated_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Activated_Cells_to_be_Updated_List_ItemIE_Extensions(
    pub Vec<Activated_Cells_to_be_Updated_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "37949", extensible = true)]
pub struct ActiveULBWPLocationAndBandwidth(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum ActiveULBWPSubcarrierSpacing {
    K_HZ15,
    K_HZ30,
    K_HZ60,
    K_HZ120,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum ActiveULBWPCyclicPrefix {
    NORMAL,
    EXTENDED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3301", extensible = true)]
pub struct ActiveULBWPTxDirectCurrentLocation(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum ActiveULBWPShift7dot5kHz {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ActiveULBWPIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ActiveULBWPIE_Extensions(pub Vec<ActiveULBWPIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum AdditionalPDCPDuplicationTNL_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 280)]
    Id_BHInfo(BHInfo),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AdditionalPDCPDuplicationTNL_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: AdditionalPDCPDuplicationTNL_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AdditionalPDCPDuplicationTNL_ItemIE_Extensions(
    pub Vec<AdditionalPDCPDuplicationTNL_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum AdditionalPath_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 558)]
    Id_MultipleULAoA(MultipleULAoA),
    #[asn(key = 636)]
    Id_pathPower(UL_SRS_RSRPP),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AdditionalPath_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: AdditionalPath_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AdditionalPath_ItemIE_Extensions(pub Vec<AdditionalPath_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct AdditionalSIBMessageList_ItemAdditionalSIB(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AdditionalSIBMessageList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AdditionalSIBMessageList_ItemIE_Extensions(
    pub Vec<AdditionalSIBMessageList_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AffectedCellsAndBeams_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AffectedCellsAndBeams_ItemIE_Extensions(
    pub Vec<AffectedCellsAndBeams_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct AffectedSSB_ItemSSB_Index(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AffectedSSB_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AffectedSSB_ItemIE_Extensions(pub Vec<AffectedSSB_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AggressorCellList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AggressorCellList_ItemIE_Extensions(pub Vec<AggressorCellList_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AggressorgNBSetIDIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AggressorgNBSetIDIE_Extensions(pub Vec<AggressorgNBSetIDIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AllocationAndRetentionPriorityIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AllocationAndRetentionPriorityIE_Extensions(
    pub Vec<AllocationAndRetentionPriorityIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AlternativeQoSParaSetItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AlternativeQoSParaSetItemIE_Extensions(
    pub Vec<AlternativeQoSParaSetItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct AngleMeasurementQualityAzimuthQuality(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct AngleMeasurementQualityZenithQuality(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum AngleMeasurementQualityResolution {
    DEG0DOT1,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AngleMeasurementQualityIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AngleMeasurementQualityIE_Extensions(
    pub Vec<AngleMeasurementQualityIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AngleMeasurementType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AoA_AssistanceInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AoA_AssistanceInfoIE_Extensions(pub Vec<AoA_AssistanceInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum AperiodicSRSAperiodic {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AperiodicSRSIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AperiodicSRSIE_Extensions(pub Vec<AperiodicSRSIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Associated_SCell_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Associated_SCell_ItemIE_Extensions(pub Vec<Associated_SCell_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Associated_SCell_List_EntryValue {
    #[asn(key = 200)]
    Id_Associated_SCell_Item(Associated_SCell_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Associated_SCell_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Associated_SCell_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AvailablePLMNList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AvailablePLMNList_ItemIE_Extensions(pub Vec<AvailablePLMNList_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct AvailableSNPN_ID_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct AvailableSNPN_ID_List_ItemIE_Extensions(
    pub Vec<AvailableSNPN_ID_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BAP_Header_Rewriting_Added_List_EntryValue {
    #[asn(key = 515)]
    Id_BAP_Header_Rewriting_Added_List_Item(BAP_Header_Rewriting_Added_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAP_Header_Rewriting_Added_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BAP_Header_Rewriting_Added_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAP_Header_Rewriting_Added_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BAP_Header_Rewriting_Added_List_ItemIE_Extensions(
    pub Vec<BAP_Header_Rewriting_Added_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BAP_Header_Rewriting_Removed_List_EntryValue {
    #[asn(key = 642)]
    Id_BAP_Header_Rewriting_Removed_List_Item(BAP_Header_Rewriting_Removed_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAP_Header_Rewriting_Removed_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BAP_Header_Rewriting_Removed_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAP_Header_Rewriting_Removed_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BAP_Header_Rewriting_Removed_List_ItemIE_Extensions(
    pub Vec<BAP_Header_Rewriting_Removed_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BAPMappingConfigurationProtocolIEs_EntryValue {
    #[asn(key = 514)]
    Id_BAP_Header_Rewriting_Added_List(BAP_Header_Rewriting_Added_List),
    #[asn(key = 641)]
    Id_BAP_Header_Rewriting_Removed_List(BAP_Header_Rewriting_Removed_List),
    #[asn(key = 283)]
    Id_BH_Routing_Information_Added_List(BH_Routing_Information_Added_List),
    #[asn(key = 285)]
    Id_BH_Routing_Information_Removed_List(BH_Routing_Information_Removed_List),
    #[asn(key = 512)]
    Id_BufferSizeThresh(BufferSizeThresh),
    #[asn(key = 516)]
    Id_Re_routingEnableIndicator(Re_routingEnableIndicator),
    #[asn(key = 299)]
    Id_TrafficMappingInformation(TrafficMappingInfo),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAPMappingConfigurationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BAPMappingConfigurationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BAPMappingConfigurationProtocolIEs(pub Vec<BAPMappingConfigurationProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BAPMappingConfigurationAcknowledgeProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAPMappingConfigurationAcknowledgeProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BAPMappingConfigurationAcknowledgeProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BAPMappingConfigurationAcknowledgeProtocolIEs(
    pub Vec<BAPMappingConfigurationAcknowledgeProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BAPMappingConfigurationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 77)]
    Id_TimeToWait(TimeToWait),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAPMappingConfigurationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BAPMappingConfigurationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BAPMappingConfigurationFailureProtocolIEs(
    pub Vec<BAPMappingConfigurationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAPRoutingIDIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BAPRoutingIDIE_Extensions(pub Vec<BAPRoutingIDIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAPlayerBHRLCchannelMappingInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BAPlayerBHRLCchannelMappingInfoIE_Extensions(
    pub Vec<BAPlayerBHRLCchannelMappingInfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BAPlayerBHRLCchannelMappingInfo_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 518)]
    Id_EgressNonF1terminatingTopologyIndicator(EgressNonF1terminatingTopologyIndicator),
    #[asn(key = 519)]
    Id_IngressNonF1terminatingTopologyIndicator(IngressNonF1terminatingTopologyIndicator),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BAPlayerBHRLCchannelMappingInfo_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: BAPlayerBHRLCchannelMappingInfo_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BAPlayerBHRLCchannelMappingInfo_ItemIE_Extensions(
    pub Vec<BAPlayerBHRLCchannelMappingInfo_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BCBearerContextF1U_TNLInfo_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BH_Routing_Information_Added_List_EntryValue {
    #[asn(key = 284)]
    Id_BH_Routing_Information_Added_List_Item(BH_Routing_Information_Added_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BH_Routing_Information_Added_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BH_Routing_Information_Added_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BH_Routing_Information_Added_List_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 517)]
    Id_NonF1terminatingTopologyIndicator(NonF1terminatingTopologyIndicator),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BH_Routing_Information_Added_List_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: BH_Routing_Information_Added_List_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BH_Routing_Information_Added_List_ItemIE_Extensions(
    pub Vec<BH_Routing_Information_Added_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BH_Routing_Information_Removed_List_EntryValue {
    #[asn(key = 286)]
    Id_BH_Routing_Information_Removed_List_Item(BH_Routing_Information_Removed_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BH_Routing_Information_Removed_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BH_Routing_Information_Removed_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BH_Routing_Information_Removed_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BH_Routing_Information_Removed_List_ItemIE_Extensions(
    pub Vec<BH_Routing_Information_Removed_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_FailedToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_FailedToBeModified_ItemIE_Extensions(
    pub Vec<BHChannels_FailedToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_FailedToBeModified_List_EntryValue {
    #[asn(key = 268)]
    Id_BHChannels_FailedToBeModified_Item(BHChannels_FailedToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_FailedToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_FailedToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_FailedToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_FailedToBeSetup_ItemIE_Extensions(
    pub Vec<BHChannels_FailedToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_FailedToBeSetup_List_EntryValue {
    #[asn(key = 278)]
    Id_BHChannels_FailedToBeSetup_Item(BHChannels_FailedToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_FailedToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_FailedToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_FailedToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_FailedToBeSetupMod_ItemIE_Extensions(
    pub Vec<BHChannels_FailedToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_FailedToBeSetupMod_List_EntryValue {
    #[asn(key = 270)]
    Id_BHChannels_FailedToBeSetupMod_Item(BHChannels_FailedToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_FailedToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_FailedToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_Modified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_Modified_ItemIE_Extensions(
    pub Vec<BHChannels_Modified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_Modified_List_EntryValue {
    #[asn(key = 272)]
    Id_BHChannels_Modified_Item(BHChannels_Modified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_Modified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_Modified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_Required_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_Required_ToBeReleased_ItemIE_Extensions(
    pub Vec<BHChannels_Required_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_Required_ToBeReleased_List_EntryValue {
    #[asn(key = 276)]
    Id_BHChannels_Required_ToBeReleased_Item(BHChannels_Required_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_Required_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_Required_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_Setup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_Setup_ItemIE_Extensions(pub Vec<BHChannels_Setup_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_Setup_List_EntryValue {
    #[asn(key = 261)]
    Id_BHChannels_Setup_Item(BHChannels_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_SetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_SetupMod_ItemIE_Extensions(
    pub Vec<BHChannels_SetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_SetupMod_List_EntryValue {
    #[asn(key = 274)]
    Id_BHChannels_SetupMod_Item(BHChannels_SetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_SetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_SetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_ToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_ToBeModified_ItemIE_Extensions(
    pub Vec<BHChannels_ToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_ToBeModified_List_EntryValue {
    #[asn(key = 262)]
    Id_BHChannels_ToBeModified_Item(BHChannels_ToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_ToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_ToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_ToBeReleased_ItemIE_Extensions(
    pub Vec<BHChannels_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_ToBeReleased_List_EntryValue {
    #[asn(key = 264)]
    Id_BHChannels_ToBeReleased_Item(BHChannels_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_ToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_ToBeSetup_ItemIE_Extensions(
    pub Vec<BHChannels_ToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_ToBeSetup_List_EntryValue {
    #[asn(key = 259)]
    Id_BHChannels_ToBeSetup_Item(BHChannels_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_ToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHChannels_ToBeSetupMod_ItemIE_Extensions(
    pub Vec<BHChannels_ToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHChannels_ToBeSetupMod_List_EntryValue {
    #[asn(key = 266)]
    Id_BHChannels_ToBeSetupMod_Item(BHChannels_ToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHChannels_ToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BHChannels_ToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BHInfoIE_Extensions_EntryExtensionValue {
    #[asn(key = 517)]
    Id_NonF1terminatingTopologyIndicator(NonF1terminatingTopologyIndicator),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHInfoIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: BHInfoIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHInfoIE_Extensions(pub Vec<BHInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHQoSInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BHRLCCHItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BHRLCCHItemIE_Extensions(pub Vec<BHRLCCHItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BPLMN_ID_Info_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 425)]
    Id_ConfiguredTACIndication(ConfiguredTACIndication),
    #[asn(key = 383)]
    Id_NPNBroadcastInformation(NPNBroadcastInformation),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BPLMN_ID_Info_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: BPLMN_ID_Info_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BPLMN_ID_Info_ItemIE_Extensions(pub Vec<BPLMN_ID_Info_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BandwidthSRS_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Broadcast_Cell_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Broadcast_Cell_List_ItemIE_Extensions(
    pub Vec<Broadcast_Cell_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Broadcast_To_Be_Cancelled_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Broadcast_To_Be_Cancelled_ItemIE_Extensions(
    pub Vec<Broadcast_To_Be_Cancelled_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Broadcast_To_Be_Cancelled_List_EntryValue {
    #[asn(key = 149)]
    Id_Broadcast_To_Be_Cancelled_Item(Broadcast_To_Be_Cancelled_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Broadcast_To_Be_Cancelled_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Broadcast_To_Be_Cancelled_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "NULL")]
pub struct BroadcastAreaScope_completeSuccess;

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastAreaScope_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextModificationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextModificationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextModificationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextModificationFailureProtocolIEs(
    pub Vec<BroadcastContextModificationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextModificationRequestProtocolIEs_EntryValue {
    #[asn(key = 470)]
    Id_BroadcastMRBs_ToBeModified_List(BroadcastMRBs_ToBeModified_List),
    #[asn(key = 472)]
    Id_BroadcastMRBs_ToBeReleased_List(BroadcastMRBs_ToBeReleased_List),
    #[asn(key = 476)]
    Id_BroadcastMRBs_ToBeSetupMod_List(BroadcastMRBs_ToBeSetupMod_List),
    #[asn(key = 454)]
    Id_MBS_CUtoDURRCInformation(MBS_CUtoDURRCInformation),
    #[asn(key = 481)]
    Id_MBS_ServiceArea(MBS_ServiceArea),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextModificationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextModificationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextModificationRequestProtocolIEs(
    pub Vec<BroadcastContextModificationRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextModificationResponseProtocolIEs_EntryValue {
    #[asn(key = 458)]
    Id_BroadcastMRBs_FailedToBeModified_List(BroadcastMRBs_FailedToBeModified_List),
    #[asn(key = 462)]
    Id_BroadcastMRBs_FailedToBeSetupMod_List(BroadcastMRBs_FailedToBeSetupMod_List),
    #[asn(key = 464)]
    Id_BroadcastMRBs_Modified_List(BroadcastMRBs_Modified_List),
    #[asn(key = 468)]
    Id_BroadcastMRBs_SetupMod_List(BroadcastMRBs_SetupMod_List),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextModificationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextModificationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextModificationResponseProtocolIEs(
    pub Vec<BroadcastContextModificationResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextReleaseCommandProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextReleaseCommandProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextReleaseCommandProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextReleaseCommandProtocolIEs(
    pub Vec<BroadcastContextReleaseCommandProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextReleaseCompleteProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextReleaseCompleteProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextReleaseCompleteProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextReleaseCompleteProtocolIEs(
    pub Vec<BroadcastContextReleaseCompleteProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextReleaseRequestProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextReleaseRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextReleaseRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextReleaseRequestProtocolIEs(
    pub Vec<BroadcastContextReleaseRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextSetupFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextSetupFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextSetupFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextSetupFailureProtocolIEs(
    pub Vec<BroadcastContextSetupFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextSetupRequestProtocolIEs_EntryValue {
    #[asn(key = 474)]
    Id_BroadcastMRBs_ToBeSetup_List(BroadcastMRBs_ToBeSetup_List),
    #[asn(key = 454)]
    Id_MBS_CUtoDURRCInformation(MBS_CUtoDURRCInformation),
    #[asn(key = 481)]
    Id_MBS_ServiceArea(MBS_ServiceArea),
    #[asn(key = 455)]
    Id_MBS_Session_ID(MBS_Session_ID),
    #[asn(key = 456)]
    Id_SNSSAI(SNSSAI),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextSetupRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextSetupRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextSetupRequestProtocolIEs(
    pub Vec<BroadcastContextSetupRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastContextSetupResponseProtocolIEs_EntryValue {
    #[asn(key = 646)]
    Id_BroadcastAreaScope(BroadcastAreaScope),
    #[asn(key = 460)]
    Id_BroadcastMRBs_FailedToBeSetup_List(BroadcastMRBs_FailedToBeSetup_List),
    #[asn(key = 466)]
    Id_BroadcastMRBs_Setup_List(BroadcastMRBs_Setup_List),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastContextSetupResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastContextSetupResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct BroadcastContextSetupResponseProtocolIEs(
    pub Vec<BroadcastContextSetupResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_FailedToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_FailedToBeModified_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_FailedToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_FailedToBeModified_List_EntryValue {
    #[asn(key = 459)]
    Id_BroadcastMRBs_FailedToBeModified_Item(BroadcastMRBs_FailedToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_FailedToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_FailedToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_FailedToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_FailedToBeSetup_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_FailedToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_FailedToBeSetup_List_EntryValue {
    #[asn(key = 461)]
    Id_BroadcastMRBs_FailedToBeSetup_Item(BroadcastMRBs_FailedToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_FailedToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_FailedToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_FailedToBeSetupMod_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_FailedToBeSetupMod_List_EntryValue {
    #[asn(key = 463)]
    Id_BroadcastMRBs_FailedToBeSetupMod_Item(BroadcastMRBs_FailedToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_FailedToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_FailedToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_Modified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_Modified_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_Modified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_Modified_List_EntryValue {
    #[asn(key = 465)]
    Id_BroadcastMRBs_Modified_Item(BroadcastMRBs_Modified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_Modified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_Modified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_Setup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_Setup_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_Setup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_Setup_List_EntryValue {
    #[asn(key = 467)]
    Id_BroadcastMRBs_Setup_Item(BroadcastMRBs_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_SetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_SetupMod_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_SetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_SetupMod_List_EntryValue {
    #[asn(key = 469)]
    Id_BroadcastMRBs_SetupMod_Item(BroadcastMRBs_SetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_SetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_SetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_ToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_ToBeModified_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_ToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_ToBeModified_List_EntryValue {
    #[asn(key = 471)]
    Id_BroadcastMRBs_ToBeModified_Item(BroadcastMRBs_ToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_ToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_ToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_ToBeReleased_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_ToBeReleased_List_EntryValue {
    #[asn(key = 473)]
    Id_BroadcastMRBs_ToBeReleased_Item(BroadcastMRBs_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_ToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_ToBeSetup_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_ToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_ToBeSetup_List_EntryValue {
    #[asn(key = 475)]
    Id_BroadcastMRBs_ToBeSetup_Item(BroadcastMRBs_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_ToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastMRBs_ToBeSetupMod_ItemIE_Extensions(
    pub Vec<BroadcastMRBs_ToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum BroadcastMRBs_ToBeSetupMod_List_EntryValue {
    #[asn(key = 477)]
    Id_BroadcastMRBs_ToBeSetupMod_Item(BroadcastMRBs_ToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastMRBs_ToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: BroadcastMRBs_ToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastPNI_NPN_ID_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastPNI_NPN_ID_List_ItemIE_Extensions(
    pub Vec<BroadcastPNI_NPN_ID_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct BroadcastSNPN_ID_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct BroadcastSNPN_ID_List_ItemIE_Extensions(
    pub Vec<BroadcastSNPN_ID_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CCO_Assistance_InformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CCO_Assistance_InformationIE_Extensions(
    pub Vec<CCO_Assistance_InformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CG_SDTSessionInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CG_SDTSessionInfoIE_Extensions(pub Vec<CG_SDTSessionInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "48", sz_ub = "48")]
pub struct CNUEPagingIdentity_fiveG_S_TMSI(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CNUEPagingIdentity_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CP_TransportLayerAddress_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CUDURIMInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CUDURIMInformationIE_Extensions(pub Vec<CUDURIMInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum CUDURadioInformationTransferProtocolIEs_EntryValue {
    #[asn(key = 250)]
    Id_CUDURadioInformationType(CUDURadioInformationType),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CUDURadioInformationTransferProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: CUDURadioInformationTransferProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct CUDURadioInformationTransferProtocolIEs(
    pub Vec<CUDURadioInformationTransferProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CUDURadioInformationType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum CUtoDURRCInformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 234)]
    Id_CG_Config(CG_Config),
    #[asn(key = 173)]
    Id_CellGroupConfig(CellGroupConfig),
    #[asn(key = 119)]
    Id_HandoverPreparationInformation(HandoverPreparationInformation),
    #[asn(key = 440)]
    Id_LocationMeasurementInformation(LocationMeasurementInformation),
    #[asn(key = 652)]
    Id_MBSInterestIndication(MBSInterestIndication),
    #[asn(key = 621)]
    Id_MUSIM_GapConfig(MUSIM_GapConfig),
    #[asn(key = 163)]
    Id_MeasurementTimingConfiguration(MeasurementTimingConfiguration),
    #[asn(key = 667)]
    Id_NeedForGapNCSGInfoEUTRA(NeedForGapNCSGInfoEUTRA),
    #[asn(key = 666)]
    Id_NeedForGapNCSGInfoNR(NeedForGapNCSGInfoNR),
    #[asn(key = 665)]
    Id_NeedForGapsInfoNR(NeedForGapsInfoNR),
    #[asn(key = 587)]
    Id_SDT_MAC_PHY_CG_Config(SDT_MAC_PHY_CG_Config),
    #[asn(key = 214)]
    Id_UEAssistanceInformation(UEAssistanceInformation),
    #[asn(key = 339)]
    Id_UEAssistanceInformationEUTRA(UEAssistanceInformationEUTRA),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CUtoDURRCInformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: CUtoDURRCInformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CUtoDURRCInformationIE_Extensions(pub Vec<CUtoDURRCInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Candidate_SpCell_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Candidate_SpCell_ItemIE_Extensions(pub Vec<Candidate_SpCell_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Candidate_SpCell_List_EntryValue {
    #[asn(key = 91)]
    Id_Candidate_SpCell_Item(Candidate_SpCell_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Candidate_SpCell_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Candidate_SpCell_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct CapacityValueCapacityValue(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CapacityValueIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CapacityValueIE_Extensions(pub Vec<CapacityValueIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cause_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum CellMeasurementResultItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 444)]
    Id_NR_U_Channel_List(NR_U_Channel_List),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CellMeasurementResultItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: CellMeasurementResultItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CellMeasurementResultItemIE_Extensions(
    pub Vec<CellMeasurementResultItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CellToReportItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CellToReportItemIE_Extensions(pub Vec<CellToReportItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum CellTrafficTraceProtocolIEs_EntryValue {
    #[asn(key = 379)]
    Id_PrivacyIndicator(PrivacyIndicator),
    #[asn(key = 378)]
    Id_TraceCollectionEntityIPAddress(TransportLayerAddress),
    #[asn(key = 380)]
    Id_TraceCollectionEntityURI(URI_address),
    #[asn(key = 243)]
    Id_TraceID(TraceID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CellTrafficTraceProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: CellTrafficTraceProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct CellTrafficTraceProtocolIEs(pub Vec<CellTrafficTraceProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CellTypeIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CellTypeIE_Extensions(pub Vec<CellTypeIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_Broadcast_Cancelled_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Cells_Broadcast_Cancelled_ItemIE_Extensions(
    pub Vec<Cells_Broadcast_Cancelled_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_Broadcast_Cancelled_List_EntryValue {
    #[asn(key = 151)]
    Id_Cells_Broadcast_Cancelled_Item(Cells_Broadcast_Cancelled_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_Broadcast_Cancelled_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Cells_Broadcast_Cancelled_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_Broadcast_Completed_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Cells_Broadcast_Completed_ItemIE_Extensions(
    pub Vec<Cells_Broadcast_Completed_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_Broadcast_Completed_List_EntryValue {
    #[asn(key = 147)]
    Id_Cells_Broadcast_Completed_Item(Cells_Broadcast_Completed_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_Broadcast_Completed_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Cells_Broadcast_Completed_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_Failed_to_be_Activated_List_EntryValue {
    #[asn(key = 2)]
    Id_Cells_Failed_to_be_Activated_List_Item(Cells_Failed_to_be_Activated_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_Failed_to_be_Activated_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Cells_Failed_to_be_Activated_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_Failed_to_be_Activated_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Cells_Failed_to_be_Activated_List_ItemIE_Extensions(
    pub Vec<Cells_Failed_to_be_Activated_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_Status_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Cells_Status_ItemIE_Extensions(pub Vec<Cells_Status_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_Status_List_EntryValue {
    #[asn(key = 88)]
    Id_Cells_Status_Item(Cells_Status_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_Status_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Cells_Status_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_To_Be_Broadcast_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Cells_To_Be_Broadcast_ItemIE_Extensions(
    pub Vec<Cells_To_Be_Broadcast_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_To_Be_Broadcast_List_EntryValue {
    #[asn(key = 145)]
    Id_Cells_To_Be_Broadcast_Item(Cells_To_Be_Broadcast_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_To_Be_Broadcast_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Cells_To_Be_Broadcast_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_to_be_Activated_List_EntryValue {
    #[asn(key = 4)]
    Id_Cells_to_be_Activated_List_Item(Cells_to_be_Activated_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_to_be_Activated_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Cells_to_be_Activated_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_to_be_Activated_List_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 179)]
    Id_AvailablePLMNList(AvailablePLMNList),
    #[asn(key = 386)]
    Id_AvailableSNPN_ID_List(AvailableSNPN_ID_List),
    #[asn(key = 197)]
    Id_ExtendedAvailablePLMN_List(ExtendedAvailablePLMN_List),
    #[asn(key = 291)]
    Id_IAB_Info_IAB_donor_CU(IAB_Info_IAB_donor_CU),
    #[asn(key = 457)]
    Id_MBS_Broadcast_NeighbourCellList(MBS_Broadcast_NeighbourCellList),
    #[asn(key = 118)]
    Id_gNB_CUSystemInformation(GNB_CUSystemInformation),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_to_be_Activated_List_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: Cells_to_be_Activated_List_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Cells_to_be_Activated_List_ItemIE_Extensions(
    pub Vec<Cells_to_be_Activated_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_to_be_Barred_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 298)]
    Id_IAB_Barred(IAB_Barred),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_to_be_Barred_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: Cells_to_be_Barred_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Cells_to_be_Barred_ItemIE_Extensions(
    pub Vec<Cells_to_be_Barred_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_to_be_Barred_List_EntryValue {
    #[asn(key = 130)]
    Id_Cells_to_be_Barred_Item(Cells_to_be_Barred_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_to_be_Barred_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Cells_to_be_Barred_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Cells_to_be_Deactivated_List_EntryValue {
    #[asn(key = 6)]
    Id_Cells_to_be_Deactivated_List_Item(Cells_to_be_Deactivated_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_to_be_Deactivated_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Cells_to_be_Deactivated_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Cells_to_be_Deactivated_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Cells_to_be_Deactivated_List_ItemIE_Extensions(
    pub Vec<Cells_to_be_Deactivated_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CellsForSON_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CellsForSON_ItemIE_Extensions(pub Vec<CellsForSON_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Child_IAB_Nodes_NA_Resource_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Child_IAB_Nodes_NA_Resource_List_ItemIE_Extensions(
    pub Vec<Child_IAB_Nodes_NA_Resource_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Child_Node_Cells_List_ItemCSI_RS_Configuration(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Child_Node_Cells_List_ItemSR_Configuration(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Child_Node_Cells_List_ItemPDCCH_ConfigSIB1(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Child_Node_Cells_List_ItemSCS_Common(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Child_Node_Cells_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Child_Node_Cells_List_ItemIE_Extensions(
    pub Vec<Child_Node_Cells_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Child_Nodes_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Child_Nodes_List_ItemIE_Extensions(pub Vec<Child_Nodes_List_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "NULL")]
pub struct Choice_TRP_Beam_Antenna_Info_Item_noChange;

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Choice_TRP_Beam_Antenna_Info_Item_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CompositeAvailableCapacityIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CompositeAvailableCapacityIE_Extensions(
    pub Vec<CompositeAvailableCapacityIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum CompositeAvailableCapacityGroupIE_Extensions_EntryExtensionValue {
    #[asn(key = 442)]
    Id_CompositeAvailableCapacity_SUL(CompositeAvailableCapacity),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CompositeAvailableCapacityGroupIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: CompositeAvailableCapacityGroupIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CompositeAvailableCapacityGroupIE_Extensions(
    pub Vec<CompositeAvailableCapacityGroupIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ConditionalInterDUMobilityInformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 433)]
    Id_EstimatedArrivalProbability(CHO_Probability),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ConditionalInterDUMobilityInformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: ConditionalInterDUMobilityInformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ConditionalInterDUMobilityInformationIE_Extensions(
    pub Vec<ConditionalInterDUMobilityInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ConditionalIntraDUMobilityInformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 433)]
    Id_EstimatedArrivalProbability(CHO_Probability),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ConditionalIntraDUMobilityInformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: ConditionalIntraDUMobilityInformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ConditionalIntraDUMobilityInformationIE_Extensions(
    pub Vec<ConditionalIntraDUMobilityInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Coverage_Modification_ItemIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Coverage_Modification_ItemIE_Extension(
    pub Vec<Coverage_Modification_ItemIE_Extension_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Coverage_Modification_NotificationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Coverage_Modification_NotificationIE_Extensions(
    pub Vec<Coverage_Modification_NotificationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CriticalityDiagnosticsIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CriticalityDiagnosticsIE_Extensions(pub Vec<CriticalityDiagnosticsIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct CriticalityDiagnostics_IE_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct CriticalityDiagnostics_IE_ItemIE_Extensions(
    pub Vec<CriticalityDiagnostics_IE_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct DL_PRSPrsid(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DL_PRSIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DL_PRSIE_Extensions(pub Vec<DL_PRSIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "2", sz_ub = "2")]
pub struct DL_PRSMutingPattern_two(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "4", sz_ub = "4")]
pub struct DL_PRSMutingPattern_four(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "6", sz_ub = "6")]
pub struct DL_PRSMutingPattern_six(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct DL_PRSMutingPattern_eight(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "16", sz_ub = "16")]
pub struct DL_PRSMutingPattern_sixteen(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "32", sz_ub = "32")]
pub struct DL_PRSMutingPattern_thirty_two(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DL_PRSMutingPattern_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DL_PRSResourceARPLocation_choice_Extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DL_PRSResourceSetARPLocation_choice_Extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DL_UP_TNL_Address_to_Update_List_EntryValue {
    #[asn(key = 305)]
    Id_DL_UP_TNL_Address_to_Update_List_Item(DL_UP_TNL_Address_to_Update_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DL_UP_TNL_Address_to_Update_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DL_UP_TNL_Address_to_Update_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DL_UP_TNL_Address_to_Update_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DL_UP_TNL_Address_to_Update_List_ItemIE_Extensions(
    pub Vec<DL_UP_TNL_Address_to_Update_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DLPRSResourceARPIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DLPRSResourceARPIE_Extensions(pub Vec<DLPRSResourceARPIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "2")]
pub struct DLPRSResourceCoordinatesListofDL_PRSResourceSetARP(pub Vec<DLPRSResourceSetARP>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DLPRSResourceCoordinatesIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DLPRSResourceCoordinatesIE_Extensions(
    pub Vec<DLPRSResourceCoordinatesIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DLPRSResourceID_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DLPRSResourceID_ItemIE_Extensions(pub Vec<DLPRSResourceID_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct DLPRSResourceSetARPListofDL_PRSResourceARP(pub Vec<DLPRSResourceARP>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DLPRSResourceSetARPIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DLPRSResourceSetARPIE_Extensions(pub Vec<DLPRSResourceSetARPIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DLRRCMessageTransferProtocolIEs_EntryValue {
    #[asn(key = 248)]
    Id_AdditionalRRMPriorityIndex(AdditionalRRMPriorityIndex),
    #[asn(key = 109)]
    Id_ExecuteDuplication(ExecuteDuplication),
    #[asn(key = 221)]
    Id_PLMNAssistanceInfoForNetShar(PLMN_Identity),
    #[asn(key = 108)]
    Id_RAT_FrequencyPriorityInformation(RAT_FrequencyPriorityInformation),
    #[asn(key = 50)]
    Id_RRCContainer(RRCContainer),
    #[asn(key = 184)]
    Id_RRCDeliveryStatusRequest(RRCDeliveryStatusRequest),
    #[asn(key = 64)]
    Id_SRBID(SRBID),
    #[asn(key = 222)]
    Id_UEContextNotRetrievable(UEContextNotRetrievable),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 217)]
    Id_new_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 47)]
    Id_oldgNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DLRRCMessageTransferProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DLRRCMessageTransferProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct DLRRCMessageTransferProtocolIEs(pub Vec<DLRRCMessageTransferProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DLUPTNLInformation_ToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DLUPTNLInformation_ToBeSetup_ItemIE_Extensions(
    pub Vec<DLUPTNLInformation_ToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRB_Activity_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRB_Activity_ItemIE_Extensions(pub Vec<DRB_Activity_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRB_Activity_List_EntryValue {
    #[asn(key = 99)]
    Id_DRB_Activity_Item(DRB_Activity_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRB_Activity_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRB_Activity_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRB_InformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRB_InformationIE_Extensions(pub Vec<DRB_InformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRB_Notify_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 344)]
    Id_CurrentQoSParaSetIndex(QoSParaSetNotifyIndex),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRB_Notify_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRB_Notify_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRB_Notify_ItemIE_Extensions(pub Vec<DRB_Notify_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRB_Notify_List_EntryValue {
    #[asn(key = 136)]
    Id_DRB_Notify_Item(DRB_Notify_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRB_Notify_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRB_Notify_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_FailedToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_FailedToBeModified_ItemIE_Extensions(
    pub Vec<DRBs_FailedToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_FailedToBeModified_List_EntryValue {
    #[asn(key = 12)]
    Id_DRBs_FailedToBeModified_Item(DRBs_FailedToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_FailedToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_FailedToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_FailedToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_FailedToBeSetup_ItemIE_Extensions(
    pub Vec<DRBs_FailedToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_FailedToBeSetup_List_EntryValue {
    #[asn(key = 14)]
    Id_DRBs_FailedToBeSetup_Item(DRBs_FailedToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_FailedToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_FailedToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_FailedToBeSetupMod_ItemIE_Extensions(
    pub Vec<DRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_FailedToBeSetupMod_List_EntryValue {
    #[asn(key = 16)]
    Id_DRBs_FailedToBeSetupMod_Item(DRBs_FailedToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_FailedToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_FailedToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_Modified_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 370)]
    Id_AdditionalPDCPDuplicationTNL_List(AdditionalPDCPDuplicationTNL_List),
    #[asn(key = 344)]
    Id_CurrentQoSParaSetIndex(QoSParaSetIndex),
    #[asn(key = 160)]
    Id_RLC_Status(RLC_Status),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_Modified_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRBs_Modified_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_Modified_ItemIE_Extensions(pub Vec<DRBs_Modified_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_Modified_List_EntryValue {
    #[asn(key = 20)]
    Id_DRBs_Modified_Item(DRBs_Modified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_Modified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_Modified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ModifiedConf_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 370)]
    Id_AdditionalPDCPDuplicationTNL_List(AdditionalPDCPDuplicationTNL_List),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ModifiedConf_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRBs_ModifiedConf_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_ModifiedConf_ItemIE_Extensions(pub Vec<DRBs_ModifiedConf_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ModifiedConf_List_EntryValue {
    #[asn(key = 18)]
    Id_DRBs_ModifiedConf_Item(DRBs_ModifiedConf_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ModifiedConf_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_ModifiedConf_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_Required_ToBeModified_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 370)]
    Id_AdditionalPDCPDuplicationTNL_List(AdditionalPDCPDuplicationTNL_List),
    #[asn(key = 160)]
    Id_RLC_Status(RLC_Status),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_Required_ToBeModified_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRBs_Required_ToBeModified_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_Required_ToBeModified_ItemIE_Extensions(
    pub Vec<DRBs_Required_ToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_Required_ToBeModified_List_EntryValue {
    #[asn(key = 22)]
    Id_DRBs_Required_ToBeModified_Item(DRBs_Required_ToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_Required_ToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_Required_ToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_Required_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_Required_ToBeReleased_ItemIE_Extensions(
    pub Vec<DRBs_Required_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_Required_ToBeReleased_List_EntryValue {
    #[asn(key = 24)]
    Id_DRBs_Required_ToBeReleased_Item(DRBs_Required_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_Required_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_Required_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_Setup_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 370)]
    Id_AdditionalPDCPDuplicationTNL_List(AdditionalPDCPDuplicationTNL_List),
    #[asn(key = 344)]
    Id_CurrentQoSParaSetIndex(QoSParaSetIndex),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_Setup_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRBs_Setup_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_Setup_ItemIE_Extensions(pub Vec<DRBs_Setup_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_Setup_List_EntryValue {
    #[asn(key = 26)]
    Id_DRBs_Setup_Item(DRBs_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_SetupMod_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 370)]
    Id_AdditionalPDCPDuplicationTNL_List(AdditionalPDCPDuplicationTNL_List),
    #[asn(key = 344)]
    Id_CurrentQoSParaSetIndex(QoSParaSetIndex),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_SetupMod_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRBs_SetupMod_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_SetupMod_ItemIE_Extensions(pub Vec<DRBs_SetupMod_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_SetupMod_List_EntryValue {
    #[asn(key = 28)]
    Id_DRBs_SetupMod_Item(DRBs_SetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_SetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_SetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ToBeModified_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 370)]
    Id_AdditionalPDCPDuplicationTNL_List(AdditionalPDCPDuplicationTNL_List),
    #[asn(key = 186)]
    Id_BearerTypeChange(BearerTypeChange),
    #[asn(key = 590)]
    Id_CG_SDTindicatorMod(CG_SDTindicatorMod),
    #[asn(key = 177)]
    Id_DC_Based_Duplication_Activation(DuplicationActivation),
    #[asn(key = 176)]
    Id_DC_Based_Duplication_Configured(DCBasedDuplicationConfigured),
    #[asn(key = 161)]
    Id_DLPDCPSNLength(PDCPSNLength),
    #[asn(key = 188)]
    Id_Duplication_Activation(DuplicationActivation),
    #[asn(key = 371)]
    Id_RLCDuplicationInformation(RLCDuplicationInformation),
    #[asn(key = 187)]
    Id_RLCMode(RLCMode),
    #[asn(key = 430)]
    Id_TransmissionStopIndicator(TransmissionStopIndicator),
    #[asn(key = 192)]
    Id_ULPDCPSNLength(PDCPSNLength),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ToBeModified_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRBs_ToBeModified_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_ToBeModified_ItemIE_Extensions(pub Vec<DRBs_ToBeModified_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ToBeModified_List_EntryValue {
    #[asn(key = 30)]
    Id_DRBs_ToBeModified_Item(DRBs_ToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_ToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_ToBeReleased_ItemIE_Extensions(pub Vec<DRBs_ToBeReleased_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ToBeReleased_List_EntryValue {
    #[asn(key = 32)]
    Id_DRBs_ToBeReleased_Item(DRBs_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ToBeSetup_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 370)]
    Id_AdditionalPDCPDuplicationTNL_List(AdditionalPDCPDuplicationTNL_List),
    #[asn(key = 177)]
    Id_DC_Based_Duplication_Activation(DuplicationActivation),
    #[asn(key = 176)]
    Id_DC_Based_Duplication_Configured(DCBasedDuplicationConfigured),
    #[asn(key = 161)]
    Id_DLPDCPSNLength(PDCPSNLength),
    #[asn(key = 371)]
    Id_RLCDuplicationInformation(RLCDuplicationInformation),
    #[asn(key = 593)]
    Id_SDTRLCBearerConfiguration(SDTRLCBearerConfiguration),
    #[asn(key = 192)]
    Id_ULPDCPSNLength(PDCPSNLength),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ToBeSetup_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRBs_ToBeSetup_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_ToBeSetup_ItemIE_Extensions(pub Vec<DRBs_ToBeSetup_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ToBeSetup_List_EntryValue {
    #[asn(key = 34)]
    Id_DRBs_ToBeSetup_Item(DRBs_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ToBeSetupMod_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 370)]
    Id_AdditionalPDCPDuplicationTNL_List(AdditionalPDCPDuplicationTNL_List),
    #[asn(key = 589)]
    Id_CG_SDTindicatorSetup(CG_SDTindicatorSetup),
    #[asn(key = 177)]
    Id_DC_Based_Duplication_Activation(DuplicationActivation),
    #[asn(key = 176)]
    Id_DC_Based_Duplication_Configured(DCBasedDuplicationConfigured),
    #[asn(key = 161)]
    Id_DLPDCPSNLength(PDCPSNLength),
    #[asn(key = 371)]
    Id_RLCDuplicationInformation(RLCDuplicationInformation),
    #[asn(key = 192)]
    Id_ULPDCPSNLength(PDCPSNLength),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ToBeSetupMod_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DRBs_ToBeSetupMod_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRBs_ToBeSetupMod_ItemIE_Extensions(pub Vec<DRBs_ToBeSetupMod_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DRBs_ToBeSetupMod_List_EntryValue {
    #[asn(key = 36)]
    Id_DRBs_ToBeSetupMod_Item(DRBs_ToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRBs_ToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DRBs_ToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DRXCycleIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DRXCycleIE_Extensions(pub Vec<DRXCycleIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DUCURIMInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DUCURIMInformationIE_Extensions(pub Vec<DUCURIMInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DUCURadioInformationTransferProtocolIEs_EntryValue {
    #[asn(key = 249)]
    Id_DUCURadioInformationType(DUCURadioInformationType),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DUCURadioInformationTransferProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DUCURadioInformationTransferProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct DUCURadioInformationTransferProtocolIEs(
    pub Vec<DUCURadioInformationTransferProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DUCURadioInformationType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DUF_Slot_Config_Item_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct DUtoCURRCInformationRequestedP_MaxFR1(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DUtoCURRCInformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 212)]
    Id_DRX_Config(DRX_Config),
    #[asn(key = 191)]
    Id_DRX_LongCycleStartOffset(DRX_LongCycleStartOffset),
    #[asn(key = 651)]
    Id_InterFrequencyConfig_NoGap(InterFrequencyConfig_NoGap),
    #[asn(key = 621)]
    Id_MUSIM_GapConfig(MUSIM_GapConfig),
    #[asn(key = 238)]
    Id_MeasGapSharingConfig(MeasGapSharingConfig),
    #[asn(key = 235)]
    Id_PDCCH_BlindDetectionSCG(PDCCH_BlindDetectionSCG),
    #[asn(key = 237)]
    Id_Ph_InfoMCG(Ph_InfoMCG),
    #[asn(key = 208)]
    Id_Ph_InfoSCG(Ph_InfoSCG),
    #[asn(key = 236)]
    Id_Requested_PDCCH_BlindDetectionSCG(Requested_PDCCH_BlindDetectionSCG),
    #[asn(key = 209)]
    Id_RequestedBandCombinationIndex(RequestedBandCombinationIndex),
    #[asn(key = 210)]
    Id_RequestedFeatureSetEntryIndex(RequestedFeatureSetEntryIndex),
    #[asn(key = 211)]
    Id_RequestedP_MaxFR2(RequestedP_MaxFR2),
    #[asn(key = 587)]
    Id_SDT_MAC_PHY_CG_Config(SDT_MAC_PHY_CG_Config),
    #[asn(key = 342)]
    Id_SL_ConfigDedicatedEUTRA_Info(SL_ConfigDedicatedEUTRA_Info),
    #[asn(key = 341)]
    Id_SL_PHY_MAC_RLC_Config(SL_PHY_MAC_RLC_Config),
    #[asn(key = 645)]
    Id_SL_RLC_ChannelToAddModList(SL_RLC_ChannelToAddModList),
    #[asn(key = 193)]
    Id_SelectedBandCombinationIndex(SelectedBandCombinationIndex),
    #[asn(key = 194)]
    Id_SelectedFeatureSetEntryIndex(SelectedFeatureSetEntryIndex),
    #[asn(key = 677)]
    Id_UL_GapFR2_Config(UL_GapFR2_Config),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DUtoCURRCInformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: DUtoCURRCInformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DUtoCURRCInformationIE_Extensions(pub Vec<DUtoCURRCInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum DeactivateTraceProtocolIEs_EntryValue {
    #[asn(key = 243)]
    Id_TraceID(TraceID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DeactivateTraceProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: DeactivateTraceProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct DeactivateTraceProtocolIEs(pub Vec<DeactivateTraceProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Dedicated_SIDelivery_NeededUE_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Dedicated_SIDelivery_NeededUE_ItemIE_Extensions(
    pub Vec<Dedicated_SIDelivery_NeededUE_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Dedicated_SIDelivery_NeededUE_List_EntryValue {
    #[asn(key = 190)]
    Id_Dedicated_SIDelivery_NeededUE_Item(Dedicated_SIDelivery_NeededUE_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Dedicated_SIDelivery_NeededUE_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Dedicated_SIDelivery_NeededUE_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "127")]
pub struct Dynamic5QIDescriptorQoSPriorityLevel(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255", extensible = true)]
pub struct Dynamic5QIDescriptorFiveQI(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "1")]
pub enum Dynamic5QIDescriptorDelayCritical {
    DELAY_CRITICAL,
    NON_DELAY_CRITICAL,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Dynamic5QIDescriptorIE_Extensions_EntryExtensionValue {
    #[asn(key = 362)]
    Id_CNPacketDelayBudgetDownlink(ExtendedPacketDelayBudget),
    #[asn(key = 369)]
    Id_CNPacketDelayBudgetUplink(ExtendedPacketDelayBudget),
    #[asn(key = 363)]
    Id_ExtendedPacketDelayBudget(ExtendedPacketDelayBudget),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Dynamic5QIDescriptorIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: Dynamic5QIDescriptorIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Dynamic5QIDescriptorIE_Extensions(pub Vec<Dynamic5QIDescriptorIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum DynamicPQIDescriptorResourceType {
    GBR,
    NON_GBR,
    DELAY_CRITICAL_GRB,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "8", extensible = true)]
pub struct DynamicPQIDescriptorQoSPriorityLevel(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct DynamicPQIDescriptorIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct DynamicPQIDescriptorIE_Extensions(pub Vec<DynamicPQIDescriptorIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CID_MeasuredResults_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct E_CID_MeasuredResults_ItemIE_Extensions(
    pub Vec<E_CID_MeasuredResults_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum E_CID_MeasuredResults_Value_choice_extensionValue {
    #[asn(key = 584)]
    Id_NR_TADV(NR_TADV),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CID_MeasuredResults_Value_choice_extension {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: E_CID_MeasuredResults_Value_choice_extensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum E_CID_MeasurementQuantities_EntryValue {
    #[asn(key = 415)]
    Id_E_CID_MeasurementQuantities_Item(E_CID_MeasurementQuantities_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CID_MeasurementQuantities_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: E_CID_MeasurementQuantities_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CID_MeasurementQuantities_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct E_CID_MeasurementQuantities_ItemIE_Extensions(
    pub Vec<E_CID_MeasurementQuantities_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CID_MeasurementResultIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct E_CID_MeasurementResultIE_Extensions(
    pub Vec<E_CID_MeasurementResultIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum E_CIDMeasurementFailureIndicationProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 412)]
    Id_LMF_UE_MeasurementID(LMF_UE_MeasurementID),
    #[asn(key = 413)]
    Id_RAN_UE_MeasurementID(RAN_UE_MeasurementID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CIDMeasurementFailureIndicationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: E_CIDMeasurementFailureIndicationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct E_CIDMeasurementFailureIndicationProtocolIEs(
    pub Vec<E_CIDMeasurementFailureIndicationProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum E_CIDMeasurementInitiationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 412)]
    Id_LMF_UE_MeasurementID(LMF_UE_MeasurementID),
    #[asn(key = 413)]
    Id_RAN_UE_MeasurementID(RAN_UE_MeasurementID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CIDMeasurementInitiationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: E_CIDMeasurementInitiationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct E_CIDMeasurementInitiationFailureProtocolIEs(
    pub Vec<E_CIDMeasurementInitiationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum E_CIDMeasurementInitiationRequestProtocolIEs_EntryValue {
    #[asn(key = 416)]
    Id_E_CID_MeasurementPeriodicity(MeasurementPeriodicity),
    #[asn(key = 414)]
    Id_E_CID_MeasurementQuantities(E_CID_MeasurementQuantities),
    #[asn(key = 424)]
    Id_E_CID_ReportCharacteristics(E_CID_ReportCharacteristics),
    #[asn(key = 412)]
    Id_LMF_UE_MeasurementID(LMF_UE_MeasurementID),
    #[asn(key = 672)]
    Id_PosMeasurementPeriodicityNR_AoA(PosMeasurementPeriodicityNR_AoA),
    #[asn(key = 413)]
    Id_RAN_UE_MeasurementID(RAN_UE_MeasurementID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CIDMeasurementInitiationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: E_CIDMeasurementInitiationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct E_CIDMeasurementInitiationRequestProtocolIEs(
    pub Vec<E_CIDMeasurementInitiationRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum E_CIDMeasurementInitiationResponseProtocolIEs_EntryValue {
    #[asn(key = 418)]
    Id_Cell_Portion_ID(Cell_Portion_ID),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 417)]
    Id_E_CID_MeasurementResult(E_CID_MeasurementResult),
    #[asn(key = 412)]
    Id_LMF_UE_MeasurementID(LMF_UE_MeasurementID),
    #[asn(key = 413)]
    Id_RAN_UE_MeasurementID(RAN_UE_MeasurementID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CIDMeasurementInitiationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: E_CIDMeasurementInitiationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct E_CIDMeasurementInitiationResponseProtocolIEs(
    pub Vec<E_CIDMeasurementInitiationResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum E_CIDMeasurementReportProtocolIEs_EntryValue {
    #[asn(key = 418)]
    Id_Cell_Portion_ID(Cell_Portion_ID),
    #[asn(key = 417)]
    Id_E_CID_MeasurementResult(E_CID_MeasurementResult),
    #[asn(key = 412)]
    Id_LMF_UE_MeasurementID(LMF_UE_MeasurementID),
    #[asn(key = 413)]
    Id_RAN_UE_MeasurementID(RAN_UE_MeasurementID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CIDMeasurementReportProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: E_CIDMeasurementReportProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct E_CIDMeasurementReportProtocolIEs(pub Vec<E_CIDMeasurementReportProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum E_CIDMeasurementTerminationCommandProtocolIEs_EntryValue {
    #[asn(key = 412)]
    Id_LMF_UE_MeasurementID(LMF_UE_MeasurementID),
    #[asn(key = 413)]
    Id_RAN_UE_MeasurementID(RAN_UE_MeasurementID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct E_CIDMeasurementTerminationCommandProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: E_CIDMeasurementTerminationCommandProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct E_CIDMeasurementTerminationCommandProtocolIEs(
    pub Vec<E_CIDMeasurementTerminationCommandProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRA_Coex_FDD_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EUTRA_Coex_FDD_InfoIE_Extensions(pub Vec<EUTRA_Coex_FDD_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRA_Coex_TDD_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EUTRA_Coex_TDD_InfoIE_Extensions(pub Vec<EUTRA_Coex_TDD_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRA_FDD_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EUTRA_FDD_InfoIE_Extensions(pub Vec<EUTRA_FDD_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRA_Mode_Info_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "837")]
pub struct EUTRA_PRACH_ConfigurationRootSequenceIndex(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "15")]
pub struct EUTRA_PRACH_ConfigurationZeroCorrelationIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BOOLEAN")]
pub struct EUTRA_PRACH_ConfigurationHighSpeedFlag(pub bool);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "94")]
pub struct EUTRA_PRACH_ConfigurationPrach_FreqOffset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct EUTRA_PRACH_ConfigurationPrach_ConfigIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRA_PRACH_ConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EUTRA_PRACH_ConfigurationIE_Extensions(
    pub Vec<EUTRA_PRACH_ConfigurationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRA_SpecialSubframe_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EUTRA_SpecialSubframe_InfoIE_Extensions(
    pub Vec<EUTRA_SpecialSubframe_InfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRA_TDD_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EUTRA_TDD_InfoIE_Extensions(pub Vec<EUTRA_TDD_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRACells_List_itemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EUTRACells_List_itemIE_Extensions(pub Vec<EUTRACells_List_itemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum EUTRANQoSIE_Extensions_EntryExtensionValue {
    #[asn(key = 437)]
    Id_ENBDLTNLAddress(TransportLayerAddress),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EUTRANQoSIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: EUTRANQoSIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EUTRANQoSIE_Extensions(pub Vec<EUTRANQoSIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct EgressBHRLCCHItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct EgressBHRLCCHItemIE_Extensions(pub Vec<EgressBHRLCCHItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Endpoint_IP_address_and_portIE_Extensions_EntryExtensionValue {
    #[asn(key = 230)]
    Id_portNumber(PortNumber),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Endpoint_IP_address_and_portIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: Endpoint_IP_address_and_portIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Endpoint_IP_address_and_portIE_Extensions(
    pub Vec<Endpoint_IP_address_and_portIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ErrorIndicationProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ErrorIndicationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ErrorIndicationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ErrorIndicationProtocolIEs(pub Vec<ErrorIndicationProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Expected_Azimuth_AoAIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Expected_Azimuth_AoAIE_Extensions(pub Vec<Expected_Azimuth_AoAIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Expected_UL_AoAIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Expected_UL_AoAIE_extensions(pub Vec<Expected_UL_AoAIE_extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Expected_Zenith_AoAIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Expected_Zenith_AoAIE_Extensions(pub Vec<Expected_Zenith_AoAIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Expected_ZoA_onlyIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Expected_ZoA_onlyIE_extensions(pub Vec<Expected_ZoA_onlyIE_extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ExplicitFormatIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ExplicitFormatIE_Extensions(pub Vec<ExplicitFormatIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Extended_GNB_CU_NameIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Extended_GNB_CU_NameIE_Extensions(pub Vec<Extended_GNB_CU_NameIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Extended_GNB_DU_NameIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Extended_GNB_DU_NameIE_Extensions(pub Vec<Extended_GNB_DU_NameIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ExtendedAdditionalPathList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ExtendedAdditionalPathList_ItemIE_Extensions(
    pub Vec<ExtendedAdditionalPathList_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ExtendedAvailablePLMN_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ExtendedAvailablePLMN_ItemIE_Extensions(
    pub Vec<ExtendedAvailablePLMN_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ExtendedServedPLMNs_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 390)]
    Id_ExtendedTAISliceSupportList(ExtendedSliceSupportList),
    #[asn(key = 384)]
    Id_NPNSupportInfo(NPNSupportInfo),
    #[asn(key = 644)]
    Id_TAINSAGSupportList(NSAGSupportList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ExtendedServedPLMNs_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: ExtendedServedPLMNs_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ExtendedServedPLMNs_ItemIE_Extensions(
    pub Vec<ExtendedServedPLMNs_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1AP_PDU_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1CTransferPathIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct F1CTransferPathIE_Extensions(pub Vec<F1CTransferPathIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1CTransferPathNRDCIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct F1CTransferPathNRDCIE_Extensions(pub Vec<F1CTransferPathNRDCIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum F1RemovalFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1RemovalFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: F1RemovalFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct F1RemovalFailureProtocolIEs(pub Vec<F1RemovalFailureProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum F1RemovalRequestProtocolIEs_EntryValue {
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1RemovalRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: F1RemovalRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct F1RemovalRequestProtocolIEs(pub Vec<F1RemovalRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum F1RemovalResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1RemovalResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: F1RemovalResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct F1RemovalResponseProtocolIEs(pub Vec<F1RemovalResponseProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum F1SetupFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 77)]
    Id_TimeToWait(TimeToWait),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1SetupFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: F1SetupFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct F1SetupFailureProtocolIEs(pub Vec<F1SetupFailureProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum F1SetupRequestProtocolIEs_EntryValue {
    #[asn(key = 281)]
    Id_BAPAddress(BAPAddress),
    #[asn(key = 427)]
    Id_Extended_GNB_DU_Name(Extended_GNB_DU_Name),
    #[asn(key = 171)]
    Id_GNB_DU_RRC_Version(RRC_Version),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 254)]
    Id_Transport_Layer_Address_Info(Transport_Layer_Address_Info),
    #[asn(key = 42)]
    Id_gNB_DU_ID(GNB_DU_ID),
    #[asn(key = 45)]
    Id_gNB_DU_Name(GNB_DU_Name),
    #[asn(key = 44)]
    Id_gNB_DU_Served_Cells_List(GNB_DU_Served_Cells_List),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1SetupRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: F1SetupRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct F1SetupRequestProtocolIEs(pub Vec<F1SetupRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum F1SetupResponseProtocolIEs_EntryValue {
    #[asn(key = 281)]
    Id_BAPAddress(BAPAddress),
    #[asn(key = 3)]
    Id_Cells_to_be_Activated_List(Cells_to_be_Activated_List),
    #[asn(key = 426)]
    Id_Extended_GNB_CU_Name(Extended_GNB_CU_Name),
    #[asn(key = 170)]
    Id_GNB_CU_RRC_Version(RRC_Version),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 254)]
    Id_Transport_Layer_Address_Info(Transport_Layer_Address_Info),
    #[asn(key = 287)]
    Id_UL_BH_Non_UP_Traffic_Mapping(UL_BH_Non_UP_Traffic_Mapping),
    #[asn(key = 82)]
    Id_gNB_CU_Name(GNB_CU_Name),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct F1SetupResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: F1SetupResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct F1SetupResponseProtocolIEs(pub Vec<F1SetupResponseProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum FDD_InfoIE_Extensions_EntryExtensionValue {
    #[asn(key = 389)]
    Id_DLCarrierList(NRCarrierList),
    #[asn(key = 355)]
    Id_ULCarrierList(NRCarrierList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct FDD_InfoIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: FDD_InfoIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct FDD_InfoIE_Extensions(pub Vec<FDD_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct FDD_InfoRel16IE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct FDD_InfoRel16IE_Extensions(pub Vec<FDD_InfoRel16IE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct FiveG_ProSeAuthorizedIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct FiveG_ProSeAuthorizedIE_Extensions(pub Vec<FiveG_ProSeAuthorizedIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Flows_Mapped_To_DRB_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 183)]
    Id_QoSFlowMappingIndication(QoSFlowMappingIndication),
    #[asn(key = 364)]
    Id_TSCTrafficCharacteristics(TSCTrafficCharacteristics),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Flows_Mapped_To_DRB_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: Flows_Mapped_To_DRB_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Flows_Mapped_To_DRB_ItemIE_Extensions(
    pub Vec<Flows_Mapped_To_DRB_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct FlowsMappedToSLDRB_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct FlowsMappedToSLDRB_ItemIE_Extensions(
    pub Vec<FlowsMappedToSLDRB_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "1024", extensible = true)]
pub struct FreqBandNrItemFreqBandIndicatorNr(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "0", sz_ub = "32")]
pub struct FreqBandNrItemSupportedSULBandList(pub Vec<SupportedSULFreqBandItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct FreqBandNrItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct FreqBandNrItemIE_Extensions(pub Vec<FreqBandNrItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum FreqDomainLength_choice_extensionValue {
    #[asn(key = 660)]
    Id_L1151Info(L1151Info),
    #[asn(key = 659)]
    Id_L571Info(L571Info),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct FreqDomainLength_choice_extension {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: FreqDomainLength_choice_extensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct FreqInfoRel16NRARFCN(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct FreqInfoRel16IE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct FreqInfoRel16IE_Extensions(pub Vec<FreqInfoRel16IE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7", extensible = true)]
pub struct Frequency_Domain_HSNA_Configuration_ItemRBSetIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Frequency_Domain_HSNA_Configuration_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Frequency_Domain_HSNA_Configuration_ItemIE_Extensions(
    pub Vec<Frequency_Domain_HSNA_Configuration_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "5119")]
pub struct Frequency_Domain_HSNA_Slot_Configuration_ItemSlotIndex(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Frequency_Domain_HSNA_Slot_Configuration_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Frequency_Domain_HSNA_Slot_Configuration_ItemIE_Extensions(
    pub Vec<Frequency_Domain_HSNA_Slot_Configuration_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GBR_QoSFlowInformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 343)]
    Id_AlternativeQoSParaSetList(AlternativeQoSParaSetList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GBR_QoSFlowInformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: GBR_QoSFlowInformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GBR_QoSFlowInformationIE_Extensions(pub Vec<GBR_QoSFlowInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GBR_QosInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GBR_QosInformationIE_Extensions(pub Vec<GBR_QosInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_Failed_To_Setup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_CU_TNL_Association_Failed_To_Setup_ItemIE_Extensions(
    pub Vec<GNB_CU_TNL_Association_Failed_To_Setup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_CU_TNL_Association_Failed_To_Setup_List_EntryValue {
    #[asn(key = 135)]
    Id_GNB_CU_TNL_Association_Failed_To_Setup_Item(GNB_CU_TNL_Association_Failed_To_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_Failed_To_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNB_CU_TNL_Association_Failed_To_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_Setup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_CU_TNL_Association_Setup_ItemIE_Extensions(
    pub Vec<GNB_CU_TNL_Association_Setup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_CU_TNL_Association_Setup_List_EntryValue {
    #[asn(key = 133)]
    Id_GNB_CU_TNL_Association_Setup_Item(GNB_CU_TNL_Association_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNB_CU_TNL_Association_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_To_Add_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_CU_TNL_Association_To_Add_ItemIE_Extensions(
    pub Vec<GNB_CU_TNL_Association_To_Add_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_CU_TNL_Association_To_Add_List_EntryValue {
    #[asn(key = 120)]
    Id_GNB_CU_TNL_Association_To_Add_Item(GNB_CU_TNL_Association_To_Add_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_To_Add_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNB_CU_TNL_Association_To_Add_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_CU_TNL_Association_To_Remove_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 229)]
    Id_TNLAssociationTransportLayerAddressgNBDU(CP_TransportLayerAddress),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_To_Remove_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: GNB_CU_TNL_Association_To_Remove_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_CU_TNL_Association_To_Remove_ItemIE_Extensions(
    pub Vec<GNB_CU_TNL_Association_To_Remove_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_CU_TNL_Association_To_Remove_List_EntryValue {
    #[asn(key = 122)]
    Id_GNB_CU_TNL_Association_To_Remove_Item(GNB_CU_TNL_Association_To_Remove_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_To_Remove_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNB_CU_TNL_Association_To_Remove_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_To_Update_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_CU_TNL_Association_To_Update_ItemIE_Extensions(
    pub Vec<GNB_CU_TNL_Association_To_Update_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_CU_TNL_Association_To_Update_List_EntryValue {
    #[asn(key = 124)]
    Id_GNB_CU_TNL_Association_To_Update_Item(GNB_CU_TNL_Association_To_Update_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CU_TNL_Association_To_Update_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNB_CU_TNL_Association_To_Update_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct GNB_CUSystemInformationSibtypetobeupdatedlist(pub Vec<SibtypetobeupdatedListItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_CUSystemInformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 239)]
    Id_systemInformationAreaID(SystemInformationAreaID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_CUSystemInformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: GNB_CUSystemInformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_CUSystemInformationIE_Extensions(
    pub Vec<GNB_CUSystemInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_DU_Cell_Resource_ConfigurationIE_Extensions_EntryExtensionValue {
    #[asn(key = 523)]
    Id_Parent_IAB_Nodes_NA_Resource_Configuration_List(
        Parent_IAB_Nodes_NA_Resource_Configuration_List,
    ),
    #[asn(key = 522)]
    Id_child_IAB_Nodes_NA_Resource_List(Child_IAB_Nodes_NA_Resource_List),
    #[asn(key = 521)]
    Id_frequency_Domain_HSNA_Configuration_List(Frequency_Domain_HSNA_Configuration_List),
    #[asn(key = 520)]
    Id_rBSetConfiguration(RBSetConfiguration),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_DU_Cell_Resource_ConfigurationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: GNB_DU_Cell_Resource_ConfigurationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_DU_Cell_Resource_ConfigurationIE_Extensions(
    pub Vec<GNB_DU_Cell_Resource_ConfigurationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_DU_Served_Cells_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_DU_Served_Cells_ItemIE_Extensions(
    pub Vec<GNB_DU_Served_Cells_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_DU_Served_Cells_List_EntryValue {
    #[asn(key = 43)]
    Id_GNB_DU_Served_Cells_Item(GNB_DU_Served_Cells_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_DU_Served_Cells_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNB_DU_Served_Cells_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_DU_System_InformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 387)]
    Id_SIB10_message(SIB10_message),
    #[asn(key = 310)]
    Id_SIB12_message(SIB12_message),
    #[asn(key = 311)]
    Id_SIB13_message(SIB13_message),
    #[asn(key = 312)]
    Id_SIB14_message(SIB14_message),
    #[asn(key = 648)]
    Id_SIB15_message(SIB15_message),
    #[asn(key = 625)]
    Id_SIB17_message(SIB17_message),
    #[asn(key = 627)]
    Id_SIB20_message(SIB20_message),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_DU_System_InformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: GNB_DU_System_InformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_DU_System_InformationIE_Extensions(
    pub Vec<GNB_DU_System_InformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_DU_TNL_Association_To_Remove_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_DU_TNL_Association_To_Remove_ItemIE_Extensions(
    pub Vec<GNB_DU_TNL_Association_To_Remove_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_DU_TNL_Association_To_Remove_List_EntryValue {
    #[asn(key = 227)]
    Id_GNB_DU_TNL_Association_To_Remove_Item(GNB_DU_TNL_Association_To_Remove_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_DU_TNL_Association_To_Remove_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNB_DU_TNL_Association_To_Remove_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNB_RxTxTimeDiffIE_Extensions_EntryExtensionValue {
    #[asn(key = 561)]
    Id_ExtendedAdditionalPathList(ExtendedAdditionalPathList),
    #[asn(key = 567)]
    Id_TRPTEGIDInformation(TRPTEGIDInformation),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNB_RxTxTimeDiffIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: GNB_RxTxTimeDiffIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNB_RxTxTimeDiffIE_Extensions(pub Vec<GNB_RxTxTimeDiffIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBCUConfigurationUpdateProtocolIEs_EntryValue {
    #[asn(key = 281)]
    Id_BAPAddress(BAPAddress),
    #[asn(key = 447)]
    Id_CCO_Assistance_Information(CCO_Assistance_Information),
    #[asn(key = 3)]
    Id_Cells_to_be_Activated_List(Cells_to_be_Activated_List),
    #[asn(key = 129)]
    Id_Cells_to_be_Barred_List(Cells_to_be_Barred_List),
    #[asn(key = 5)]
    Id_Cells_to_be_Deactivated_List(Cells_to_be_Deactivated_List),
    #[asn(key = 449)]
    Id_CellsForSON_List(CellsForSON_List),
    #[asn(key = 426)]
    Id_Extended_GNB_CU_Name(Extended_GNB_CU_Name),
    #[asn(key = 121)]
    Id_GNB_CU_TNL_Association_To_Add_List(GNB_CU_TNL_Association_To_Add_List),
    #[asn(key = 123)]
    Id_GNB_CU_TNL_Association_To_Remove_List(GNB_CU_TNL_Association_To_Remove_List),
    #[asn(key = 125)]
    Id_GNB_CU_TNL_Association_To_Update_List(GNB_CU_TNL_Association_To_Update_List),
    #[asn(key = 244)]
    Id_Neighbour_Cell_Information_List(Neighbour_Cell_Information_List),
    #[asn(key = 105)]
    Id_Protected_EUTRA_Resources_List(Protected_EUTRA_Resources_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 254)]
    Id_Transport_Layer_Address_Info(Transport_Layer_Address_Info),
    #[asn(key = 287)]
    Id_UL_BH_Non_UP_Traffic_Mapping(UL_BH_Non_UP_Traffic_Mapping),
    #[asn(key = 82)]
    Id_gNB_CU_Name(GNB_CU_Name),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBCUConfigurationUpdateProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBCUConfigurationUpdateProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBCUConfigurationUpdateProtocolIEs(pub Vec<GNBCUConfigurationUpdateProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBCUConfigurationUpdateAcknowledgeProtocolIEs_EntryValue {
    #[asn(key = 1)]
    Id_Cells_Failed_to_be_Activated_List(Cells_Failed_to_be_Activated_List),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 189)]
    Id_Dedicated_SIDelivery_NeededUE_List(Dedicated_SIDelivery_NeededUE_List),
    #[asn(key = 134)]
    Id_GNB_CU_TNL_Association_Failed_To_Setup_List(GNB_CU_TNL_Association_Failed_To_Setup_List),
    #[asn(key = 132)]
    Id_GNB_CU_TNL_Association_Setup_List(GNB_CU_TNL_Association_Setup_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 254)]
    Id_Transport_Layer_Address_Info(Transport_Layer_Address_Info),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBCUConfigurationUpdateAcknowledgeProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBCUConfigurationUpdateAcknowledgeProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBCUConfigurationUpdateAcknowledgeProtocolIEs(
    pub Vec<GNBCUConfigurationUpdateAcknowledgeProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBCUConfigurationUpdateFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 77)]
    Id_TimeToWait(TimeToWait),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBCUConfigurationUpdateFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBCUConfigurationUpdateFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBCUConfigurationUpdateFailureProtocolIEs(
    pub Vec<GNBCUConfigurationUpdateFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUConfigurationUpdateProtocolIEs_EntryValue {
    #[asn(key = 89)]
    Id_Cells_Status_List(Cells_Status_List),
    #[asn(key = 446)]
    Id_Coverage_Modification_Notification(Coverage_Modification_Notification),
    #[asn(key = 189)]
    Id_Dedicated_SIDelivery_NeededUE_List(Dedicated_SIDelivery_NeededUE_List),
    #[asn(key = 427)]
    Id_Extended_GNB_DU_Name(Extended_GNB_DU_Name),
    #[asn(key = 228)]
    Id_GNB_DU_TNL_Association_To_Remove_List(GNB_DU_TNL_Association_To_Remove_List),
    #[asn(key = 58)]
    Id_Served_Cells_To_Add_List(Served_Cells_To_Add_List),
    #[asn(key = 60)]
    Id_Served_Cells_To_Delete_List(Served_Cells_To_Delete_List),
    #[asn(key = 62)]
    Id_Served_Cells_To_Modify_List(Served_Cells_To_Modify_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 254)]
    Id_Transport_Layer_Address_Info(Transport_Layer_Address_Info),
    #[asn(key = 42)]
    Id_gNB_DU_ID(GNB_DU_ID),
    #[asn(key = 45)]
    Id_gNB_DU_Name(GNB_DU_Name),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUConfigurationUpdateProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUConfigurationUpdateProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUConfigurationUpdateProtocolIEs(pub Vec<GNBDUConfigurationUpdateProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUConfigurationUpdateAcknowledgeProtocolIEs_EntryValue {
    #[asn(key = 281)]
    Id_BAPAddress(BAPAddress),
    #[asn(key = 3)]
    Id_Cells_to_be_Activated_List(Cells_to_be_Activated_List),
    #[asn(key = 5)]
    Id_Cells_to_be_Deactivated_List(Cells_to_be_Deactivated_List),
    #[asn(key = 449)]
    Id_CellsForSON_List(CellsForSON_List),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 254)]
    Id_Transport_Layer_Address_Info(Transport_Layer_Address_Info),
    #[asn(key = 287)]
    Id_UL_BH_Non_UP_Traffic_Mapping(UL_BH_Non_UP_Traffic_Mapping),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUConfigurationUpdateAcknowledgeProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUConfigurationUpdateAcknowledgeProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUConfigurationUpdateAcknowledgeProtocolIEs(
    pub Vec<GNBDUConfigurationUpdateAcknowledgeProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUConfigurationUpdateFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 77)]
    Id_TimeToWait(TimeToWait),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUConfigurationUpdateFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUConfigurationUpdateFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUConfigurationUpdateFailureProtocolIEs(
    pub Vec<GNBDUConfigurationUpdateFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUResourceConfigurationProtocolIEs_EntryValue {
    #[asn(key = 288)]
    Id_Activated_Cells_to_be_Updated_List(Activated_Cells_to_be_Updated_List),
    #[asn(key = 289)]
    Id_Child_Nodes_List(Child_Nodes_List),
    #[asn(key = 533)]
    Id_Neighbour_Node_Cells_List(Neighbour_Node_Cells_List),
    #[asn(key = 534)]
    Id_Serving_Cells_List(Serving_Cells_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUResourceConfigurationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUResourceConfigurationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUResourceConfigurationProtocolIEs(
    pub Vec<GNBDUResourceConfigurationProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUResourceConfigurationAcknowledgeProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUResourceConfigurationAcknowledgeProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUResourceConfigurationAcknowledgeProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUResourceConfigurationAcknowledgeProtocolIEs(
    pub Vec<GNBDUResourceConfigurationAcknowledgeProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUResourceConfigurationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 77)]
    Id_TimeToWait(TimeToWait),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUResourceConfigurationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUResourceConfigurationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUResourceConfigurationFailureProtocolIEs(
    pub Vec<GNBDUResourceConfigurationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUResourceCoordinationRequestProtocolIEs_EntryValue {
    #[asn(key = 101)]
    Id_EUTRA_NR_CellResourceCoordinationReq_Container(
        EUTRA_NR_CellResourceCoordinationReq_Container,
    ),
    #[asn(key = 213)]
    Id_IgnoreResourceCoordinationContainer(IgnoreResourceCoordinationContainer),
    #[asn(key = 106)]
    Id_RequestType(RequestType),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUResourceCoordinationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUResourceCoordinationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUResourceCoordinationRequestProtocolIEs(
    pub Vec<GNBDUResourceCoordinationRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUResourceCoordinationResponseProtocolIEs_EntryValue {
    #[asn(key = 102)]
    Id_EUTRA_NR_CellResourceCoordinationReqAck_Container(
        EUTRA_NR_CellResourceCoordinationReqAck_Container,
    ),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUResourceCoordinationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUResourceCoordinationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUResourceCoordinationResponseProtocolIEs(
    pub Vec<GNBDUResourceCoordinationResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GNBDUStatusIndicationProtocolIEs_EntryValue {
    #[asn(key = 172)]
    Id_GNBDUOverloadInformation(GNBDUOverloadInformation),
    #[asn(key = 509)]
    Id_IABCongestionIndication(IABCongestionIndication),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUStatusIndicationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: GNBDUStatusIndicationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct GNBDUStatusIndicationProtocolIEs(pub Vec<GNBDUStatusIndicationProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBDUUESliceMaximumBitRateItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GNBDUUESliceMaximumBitRateItemIE_Extensions(
    pub Vec<GNBDUUESliceMaximumBitRateItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1970049")]
pub struct GNBRxTxTimeDiffMeas_k0(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "985025")]
pub struct GNBRxTxTimeDiffMeas_k1(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "492513")]
pub struct GNBRxTxTimeDiffMeas_k2(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "246257")]
pub struct GNBRxTxTimeDiffMeas_k3(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "123129")]
pub struct GNBRxTxTimeDiffMeas_k4(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "61565")]
pub struct GNBRxTxTimeDiffMeas_k5(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GNBRxTxTimeDiffMeas_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GTPTLA_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GTPTLA_ItemIE_Extensions(pub Vec<GTPTLA_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GTPTunnelIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GTPTunnelIE_Extensions(pub Vec<GTPTunnelIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum GeographicalCoordinatesIE_Extensions_EntryExtensionValue {
    #[asn(key = 556)]
    Id_ARPLocationInfo(ARPLocationInformation),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct GeographicalCoordinatesIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: GeographicalCoordinatesIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct GeographicalCoordinatesIE_Extensions(
    pub Vec<GeographicalCoordinatesIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct HSNASlotConfigItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct HSNASlotConfigItemIE_Extensions(pub Vec<HSNASlotConfigItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100", extensible = true)]
pub struct HardwareLoadIndicatorDLHardwareLoadIndicator(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100", extensible = true)]
pub struct HardwareLoadIndicatorULHardwareLoadIndicator(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct HardwareLoadIndicatorIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct HardwareLoadIndicatorIE_Extensions(pub Vec<HardwareLoadIndicatorIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_Allocated_TNL_Address_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_Allocated_TNL_Address_ItemIE_Extensions(
    pub Vec<IAB_Allocated_TNL_Address_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IAB_Allocated_TNL_Address_List_EntryValue {
    #[asn(key = 295)]
    Id_IAB_Allocated_TNL_Address_Item(IAB_Allocated_TNL_Address_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_Allocated_TNL_Address_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: IAB_Allocated_TNL_Address_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_Congestion_Indication_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_Congestion_Indication_ItemIE_Extensions(
    pub Vec<IAB_Congestion_Indication_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IAB_DU_Cell_Resource_Configuration_FDD_InfoIE_Extensions_EntryExtensionValue {
    #[asn(key = 526)]
    Id_dL_FreqInfo(NRFreqInfo),
    #[asn(key = 529)]
    Id_dL_NR_Carrier_List(NRCarrierList),
    #[asn(key = 527)]
    Id_dL_Transmission_Bandwidth(Transmission_Bandwidth),
    #[asn(key = 524)]
    Id_uL_FreqInfo(NRFreqInfo),
    #[asn(key = 528)]
    Id_uL_NR_Carrier_List(NRCarrierList),
    #[asn(key = 525)]
    Id_uL_Transmission_Bandwidth(Transmission_Bandwidth),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_DU_Cell_Resource_Configuration_FDD_InfoIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value:
        IAB_DU_Cell_Resource_Configuration_FDD_InfoIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_DU_Cell_Resource_Configuration_FDD_InfoIE_Extensions(
    pub Vec<IAB_DU_Cell_Resource_Configuration_FDD_InfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_DU_Cell_Resource_Configuration_Mode_Info_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IAB_DU_Cell_Resource_Configuration_TDD_InfoIE_Extensions_EntryExtensionValue {
    #[asn(key = 532)]
    Id_nR_Carrier_List(NRCarrierList),
    #[asn(key = 530)]
    Id_nRFreqInfo(NRFreqInfo),
    #[asn(key = 531)]
    Id_transmission_Bandwidth(Transmission_Bandwidth),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_DU_Cell_Resource_Configuration_TDD_InfoIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value:
        IAB_DU_Cell_Resource_Configuration_TDD_InfoIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_DU_Cell_Resource_Configuration_TDD_InfoIE_Extensions(
    pub Vec<IAB_DU_Cell_Resource_Configuration_TDD_InfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_Info_IAB_DUIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_Info_IAB_DUIE_Extensions(pub Vec<IAB_Info_IAB_DUIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_Info_IAB_donor_CUIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_Info_IAB_donor_CUIE_Extensions(pub Vec<IAB_Info_IAB_donor_CUIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IAB_MT_Cell_List_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 637)]
    Id_DU_RX_MT_RX_Extend(DU_RX_MT_RX_Extend),
    #[asn(key = 639)]
    Id_DU_RX_MT_TX_Extend(DU_RX_MT_TX_Extend),
    #[asn(key = 640)]
    Id_DU_TX_MT_RX_Extend(DU_TX_MT_RX_Extend),
    #[asn(key = 638)]
    Id_DU_TX_MT_TX_Extend(DU_TX_MT_TX_Extend),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_MT_Cell_List_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: IAB_MT_Cell_List_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_MT_Cell_List_ItemIE_Extensions(pub Vec<IAB_MT_Cell_List_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_MT_Cell_NA_Resource_Configuration_FDD_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_MT_Cell_NA_Resource_Configuration_FDD_InfoIE_Extensions(
    pub Vec<IAB_MT_Cell_NA_Resource_Configuration_FDD_InfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_MT_Cell_NA_Resource_Configuration_Mode_Info_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_MT_Cell_NA_Resource_Configuration_TDD_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_MT_Cell_NA_Resource_Configuration_TDD_InfoIE_Extensions(
    pub Vec<IAB_MT_Cell_NA_Resource_Configuration_TDD_InfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_STC_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_STC_InfoIE_Extensions(pub Vec<IAB_STC_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_STC_Info_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_STC_Info_ItemIE_Extensions(pub Vec<IAB_STC_Info_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_TNL_Addresses_ExceptionIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_TNL_Addresses_ExceptionIE_Extensions(
    pub Vec<IAB_TNL_Addresses_ExceptionIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_TNL_Addresses_To_Remove_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IAB_TNL_Addresses_To_Remove_ItemIE_Extensions(
    pub Vec<IAB_TNL_Addresses_To_Remove_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IAB_TNL_Addresses_To_Remove_List_EntryValue {
    #[asn(key = 293)]
    Id_IAB_TNL_Addresses_To_Remove_Item(IAB_TNL_Addresses_To_Remove_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IAB_TNL_Addresses_To_Remove_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: IAB_TNL_Addresses_To_Remove_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABCongestionIndicationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IABCongestionIndicationIE_Extensions(
    pub Vec<IABCongestionIndicationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABIPv6RequestType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "32", sz_ub = "32")]
pub struct IABTNLAddress_iPv4Address(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "BITSTRING",
    sz_extensible = false,
    sz_lb = "128",
    sz_ub = "128"
)]
pub struct IABTNLAddress_iPv6Address(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "64", sz_ub = "64")]
pub struct IABTNLAddress_iPv6Prefix(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABTNLAddress_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABTNLAddress_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IABTNLAddress_ItemIE_Extensions(pub Vec<IABTNLAddress_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IABTNLAddressFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 77)]
    Id_TimeToWait(TimeToWait),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABTNLAddressFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: IABTNLAddressFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct IABTNLAddressFailureProtocolIEs(pub Vec<IABTNLAddressFailureProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IABTNLAddressRequestProtocolIEs_EntryValue {
    #[asn(key = 513)]
    Id_IAB_TNL_Addresses_Exception(IAB_TNL_Addresses_Exception),
    #[asn(key = 292)]
    Id_IAB_TNL_Addresses_To_Remove_List(IAB_TNL_Addresses_To_Remove_List),
    #[asn(key = 296)]
    Id_IABIPv6RequestType(IABIPv6RequestType),
    #[asn(key = 297)]
    Id_IABv4AddressesRequested(IABv4AddressesRequested),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABTNLAddressRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: IABTNLAddressRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct IABTNLAddressRequestProtocolIEs(pub Vec<IABTNLAddressRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IABTNLAddressResponseProtocolIEs_EntryValue {
    #[asn(key = 294)]
    Id_IAB_Allocated_TNL_Address_List(IAB_Allocated_TNL_Address_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABTNLAddressResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: IABTNLAddressResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct IABTNLAddressResponseProtocolIEs(pub Vec<IABTNLAddressResponseProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256")]
pub struct IABTNLAddressesRequestedTNLAddressesOrPrefixesRequestedAllTraffic(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256")]
pub struct IABTNLAddressesRequestedTNLAddressesOrPrefixesRequestedF1_C(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256")]
pub struct IABTNLAddressesRequestedTNLAddressesOrPrefixesRequestedF1_U(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "256")]
pub struct IABTNLAddressesRequestedTNLAddressesOrPrefixesRequestedNoNF1(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABTNLAddressesRequestedIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IABTNLAddressesRequestedIE_Extensions(
    pub Vec<IABTNLAddressesRequestedIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IABUPConfigurationUpdateFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 77)]
    Id_TimeToWait(TimeToWait),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABUPConfigurationUpdateFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: IABUPConfigurationUpdateFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct IABUPConfigurationUpdateFailureProtocolIEs(
    pub Vec<IABUPConfigurationUpdateFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IABUPConfigurationUpdateRequestProtocolIEs_EntryValue {
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 302)]
    Id_UL_UP_TNL_Address_to_Update_List(UL_UP_TNL_Address_to_Update_List),
    #[asn(key = 300)]
    Id_UL_UP_TNL_Information_to_Update_List(UL_UP_TNL_Information_to_Update_List),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABUPConfigurationUpdateRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: IABUPConfigurationUpdateRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct IABUPConfigurationUpdateRequestProtocolIEs(
    pub Vec<IABUPConfigurationUpdateRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum IABUPConfigurationUpdateResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 304)]
    Id_DL_UP_TNL_Address_to_Update_List(DL_UP_TNL_Address_to_Update_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABUPConfigurationUpdateResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: IABUPConfigurationUpdateResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct IABUPConfigurationUpdateResponseProtocolIEs(
    pub Vec<IABUPConfigurationUpdateResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IABv4AddressesRequestedIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IABv4AddressesRequestedIE_Extensions(
    pub Vec<IABv4AddressesRequestedIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "20", sz_ub = "20")]
pub struct IPHeaderInformationIPv6FlowLabel(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IPHeaderInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IPHeaderInformationIE_Extensions(pub Vec<IPHeaderInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IPtolayer2TrafficMappingInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IPtolayer2TrafficMappingInfoIE_Extensions(
    pub Vec<IPtolayer2TrafficMappingInfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IPtolayer2TrafficMappingInfo_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IPtolayer2TrafficMappingInfo_ItemIE_Extensions(
    pub Vec<IPtolayer2TrafficMappingInfo_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ImplicitFormatIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ImplicitFormatIE_Extensions(pub Vec<ImplicitFormatIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum InitialULRRCMessageTransferProtocolIEs_EntryValue {
    #[asn(key = 95)]
    Id_C_RNTI(C_RNTI),
    #[asn(key = 128)]
    Id_DUtoCURRCContainer(DUtoCURRCContainer),
    #[asn(key = 111)]
    Id_NRCGI(NRCGI),
    #[asn(key = 578)]
    Id_NRRedCapUEIndication(NRRedCapUEIndication),
    #[asn(key = 226)]
    Id_RANUEID(RANUEID),
    #[asn(key = 50)]
    Id_RRCContainer(RRCContainer),
    #[asn(key = 241)]
    Id_RRCContainer_RRCSetupComplete(RRCContainer_RRCSetupComplete),
    #[asn(key = 592)]
    Id_SDTInformation(SDTInformation),
    #[asn(key = 178)]
    Id_SULAccessIndication(SULAccessIndication),
    #[asn(key = 617)]
    Id_SidelinkRelayConfiguration(SidelinkRelayConfiguration),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct InitialULRRCMessageTransferProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: InitialULRRCMessageTransferProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct InitialULRRCMessageTransferProtocolIEs(
    pub Vec<InitialULRRCMessageTransferProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum InitiatingMessageValue {
    #[asn(key = 32)]
    Id_BAPMappingConfiguration(BAPMappingConfiguration),
    #[asn(key = 62)]
    Id_BroadcastContextModification(BroadcastContextModificationRequest),
    #[asn(key = 60)]
    Id_BroadcastContextRelease(BroadcastContextReleaseCommand),
    #[asn(key = 61)]
    Id_BroadcastContextReleaseRequest(BroadcastContextReleaseRequest),
    #[asn(key = 59)]
    Id_BroadcastContextSetup(BroadcastContextSetupRequest),
    #[asn(key = 31)]
    Id_CUDURadioInformationTransfer(CUDURadioInformationTransfer),
    #[asn(key = 12)]
    Id_DLRRCMessageTransfer(DLRRCMessageTransfer),
    #[asn(key = 30)]
    Id_DUCURadioInformationTransfer(DUCURadioInformationTransfer),
    #[asn(key = 29)]
    Id_DeactivateTrace(DeactivateTrace),
    #[asn(key = 53)]
    Id_E_CIDMeasurementFailureIndication(E_CIDMeasurementFailureIndication),
    #[asn(key = 52)]
    Id_E_CIDMeasurementInitiation(E_CIDMeasurementInitiationRequest),
    #[asn(key = 54)]
    Id_E_CIDMeasurementReport(E_CIDMeasurementReport),
    #[asn(key = 55)]
    Id_E_CIDMeasurementTermination(E_CIDMeasurementTerminationCommand),
    #[asn(key = 2)]
    Id_ErrorIndication(ErrorIndication),
    #[asn(key = 26)]
    Id_F1Removal(F1RemovalRequest),
    #[asn(key = 1)]
    Id_F1Setup(F1SetupRequest),
    #[asn(key = 33)]
    Id_GNBDUResourceConfiguration(GNBDUResourceConfiguration),
    #[asn(key = 16)]
    Id_GNBDUResourceCoordination(GNBDUResourceCoordinationRequest),
    #[asn(key = 24)]
    Id_GNBDUStatusIndication(GNBDUStatusIndication),
    #[asn(key = 34)]
    Id_IABTNLAddressAllocation(IABTNLAddressRequest),
    #[asn(key = 35)]
    Id_IABUPConfigurationUpdate(IABUPConfigurationUpdateRequest),
    #[asn(key = 11)]
    Id_InitialULRRCMessageTransfer(InitialULRRCMessageTransfer),
    #[asn(key = 67)]
    Id_MulticastContextModification(MulticastContextModificationRequest),
    #[asn(key = 65)]
    Id_MulticastContextRelease(MulticastContextReleaseCommand),
    #[asn(key = 66)]
    Id_MulticastContextReleaseRequest(MulticastContextReleaseRequest),
    #[asn(key = 64)]
    Id_MulticastContextSetup(MulticastContextSetupRequest),
    #[asn(key = 69)]
    Id_MulticastDistributionRelease(MulticastDistributionReleaseCommand),
    #[asn(key = 68)]
    Id_MulticastDistributionSetup(MulticastDistributionSetupRequest),
    #[asn(key = 63)]
    Id_MulticastGroupPaging(MulticastGroupPaging),
    #[asn(key = 27)]
    Id_NetworkAccessRateReduction(NetworkAccessRateReduction),
    #[asn(key = 19)]
    Id_Notify(Notify),
    #[asn(key = 80)]
    Id_PDCMeasurementFailureIndication(PDCMeasurementFailureIndication),
    #[asn(key = 70)]
    Id_PDCMeasurementInitiation(PDCMeasurementInitiationRequest),
    #[asn(key = 71)]
    Id_PDCMeasurementReport(PDCMeasurementReport),
    #[asn(key = 79)]
    Id_PDCMeasurementTerminationCommand(PDCMeasurementTerminationCommand),
    #[asn(key = 21)]
    Id_PWSCancel(PWSCancelRequest),
    #[asn(key = 23)]
    Id_PWSFailureIndication(PWSFailureIndication),
    #[asn(key = 22)]
    Id_PWSRestartIndication(PWSRestartIndication),
    #[asn(key = 18)]
    Id_Paging(Paging),
    #[asn(key = 50)]
    Id_PositioningActivation(PositioningActivationRequest),
    #[asn(key = 42)]
    Id_PositioningAssistanceInformationControl(PositioningAssistanceInformationControl),
    #[asn(key = 43)]
    Id_PositioningAssistanceInformationFeedback(PositioningAssistanceInformationFeedback),
    #[asn(key = 51)]
    Id_PositioningDeactivation(PositioningDeactivation),
    #[asn(key = 49)]
    Id_PositioningInformationExchange(PositioningInformationRequest),
    #[asn(key = 56)]
    Id_PositioningInformationUpdate(PositioningInformationUpdate),
    #[asn(key = 45)]
    Id_PositioningMeasurementAbort(PositioningMeasurementAbort),
    #[asn(key = 41)]
    Id_PositioningMeasurementExchange(PositioningMeasurementRequest),
    #[asn(key = 46)]
    Id_PositioningMeasurementFailureIndication(PositioningMeasurementFailureIndication),
    #[asn(key = 44)]
    Id_PositioningMeasurementReport(PositioningMeasurementReport),
    #[asn(key = 47)]
    Id_PositioningMeasurementUpdate(PositioningMeasurementUpdate),
    #[asn(key = 78)]
    Id_QoEInformationTransfer(QoEInformationTransfer),
    #[asn(key = 25)]
    Id_RRCDeliveryReport(RRCDeliveryReport),
    #[asn(key = 57)]
    Id_ReferenceTimeInformationReport(ReferenceTimeInformationReport),
    #[asn(key = 58)]
    Id_ReferenceTimeInformationReportingControl(ReferenceTimeInformationReportingControl),
    #[asn(key = 0)]
    Id_Reset(Reset),
    #[asn(key = 17)]
    Id_SystemInformationDeliveryCommand(SystemInformationDeliveryCommand),
    #[asn(key = 48)]
    Id_TRPInformationExchange(TRPInformationRequest),
    #[asn(key = 28)]
    Id_TraceStart(TraceStart),
    #[asn(key = 7)]
    Id_UEContextModification(UEContextModificationRequest),
    #[asn(key = 8)]
    Id_UEContextModificationRequired(UEContextModificationRequired),
    #[asn(key = 6)]
    Id_UEContextRelease(UEContextReleaseCommand),
    #[asn(key = 10)]
    Id_UEContextReleaseRequest(UEContextReleaseRequest),
    #[asn(key = 5)]
    Id_UEContextSetup(UEContextSetupRequest),
    #[asn(key = 15)]
    Id_UEInactivityNotification(UEInactivityNotification),
    #[asn(key = 13)]
    Id_ULRRCMessageTransfer(ULRRCMessageTransfer),
    #[asn(key = 20)]
    Id_WriteReplaceWarning(WriteReplaceWarningRequest),
    #[asn(key = 38)]
    Id_accessAndMobilityIndication(AccessAndMobilityIndication),
    #[asn(key = 39)]
    Id_accessSuccess(AccessSuccess),
    #[asn(key = 40)]
    Id_cellTrafficTrace(CellTrafficTrace),
    #[asn(key = 4)]
    Id_gNBCUConfigurationUpdate(GNBCUConfigurationUpdate),
    #[asn(key = 3)]
    Id_gNBDUConfigurationUpdate(GNBDUConfigurationUpdate),
    #[asn(key = 77)]
    Id_measurementActivation(MeasurementActivation),
    #[asn(key = 76)]
    Id_measurementPreconfiguration(MeasurementPreconfigurationRequired),
    #[asn(key = 75)]
    Id_pRSConfigurationExchange(PRSConfigurationRequest),
    #[asn(key = 14)]
    Id_privateMessage(PrivateMessage),
    #[asn(key = 37)]
    Id_resourceStatusReporting(ResourceStatusUpdate),
    #[asn(key = 36)]
    Id_resourceStatusReportingInitiation(ResourceStatusRequest),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum IntendedTDD_DL_ULConfigNRSCS {
    SCS15,
    SCS30,
    SCS60,
    SCS120,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum IntendedTDD_DL_ULConfigNRCP {
    NORMAL,
    EXTENDED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "17")]
pub enum IntendedTDD_DL_ULConfigNRDLULTxPeriodicity {
    MS0P5,
    MS0P625,
    MS1,
    MS1P25,
    MS2,
    MS2P5,
    MS3,
    MS4,
    MS5,
    MS10,
    MS20,
    MS40,
    MS60,
    MS80,
    MS100,
    MS120,
    MS140,
    MS160,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct IntendedTDD_DL_ULConfigIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct IntendedTDD_DL_ULConfigIE_Extensions(
    pub Vec<IntendedTDD_DL_ULConfigIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum L1151InfoPrachSCSForL1151 {
    SCS15,
    SCS120,
    SCS480,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1169")]
pub struct L1151InfoRootSequenceIndex(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct L1151InfoIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct L1151InfoIE_Extension(pub Vec<L1151InfoIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum L139InfoPrachSCS {
    SCS15,
    SCS30,
    SCS60,
    SCS120,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "137")]
pub struct L139InfoRootSequenceIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct L139InfoIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct L139InfoIE_Extension(pub Vec<L139InfoIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum L571InfoPrachSCSForL571 {
    SCS30,
    SCS120,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "569")]
pub struct L571InfoRootSequenceIndex(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct L571InfoIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct L571InfoIE_Extension(pub Vec<L571InfoIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "837")]
pub struct L839InfoRootSequenceIndex(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum L839InfoRestrictedSetConfig {
    UNRESTRICTED_SET,
    RESTRICTED_SET_TYPE_A,
    RESTRICTED_SET_TYPE_B,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct L839InfoIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct L839InfoIE_Extension(pub Vec<L839InfoIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3599")]
pub struct LCS_to_GCS_TranslationAlpha(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3599")]
pub struct LCS_to_GCS_TranslationBeta(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3599")]
pub struct LCS_to_GCS_TranslationGamma(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct LCS_to_GCS_TranslationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct LCS_to_GCS_TranslationIE_Extensions(pub Vec<LCS_to_GCS_TranslationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "359")]
pub struct LCStoGCSTranslationAlpha(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct LCStoGCSTranslationAlpha_fine(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "359")]
pub struct LCStoGCSTranslationBeta(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct LCStoGCSTranslationBeta_fine(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "359")]
pub struct LCStoGCSTranslationGamma(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct LCStoGCSTranslationGamma_fine(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct LCStoGCSTranslationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct LCStoGCSTranslationIE_Extensions(pub Vec<LCStoGCSTranslationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct LTEUESidelinkAggregateMaximumBitrateIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct LTEUESidelinkAggregateMaximumBitrateIE_Extensions(
    pub Vec<LTEUESidelinkAggregateMaximumBitrateIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct LTEV2XServicesAuthorizedIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct LTEV2XServicesAuthorizedIE_Extensions(
    pub Vec<LTEV2XServicesAuthorizedIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct LoS_NLoSInformation_choice_Extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct LocationDependentMBSF1UInformation_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct LocationDependentMBSF1UInformation_ItemIE_Extensions(
    pub Vec<LocationDependentMBSF1UInformation_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct LocationUncertaintyHorizontalUncertainty(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct LocationUncertaintyHorizontalConfidence(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct LocationUncertaintyVerticalUncertainty(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct LocationUncertaintyVerticalConfidence(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct LocationUncertaintyIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct LocationUncertaintyIE_Extensions(pub Vec<LocationUncertaintyIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum M5ConfigurationIE_Extensions_EntryExtensionValue {
    #[asn(key = 537)]
    Id_M5ReportAmount(M5ReportAmount),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct M5ConfigurationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: M5ConfigurationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct M5ConfigurationIE_Extensions(pub Vec<M5ConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum M6ConfigurationIE_Extensions_EntryExtensionValue {
    #[asn(key = 538)]
    Id_M6ReportAmount(M6ReportAmount),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct M6ConfigurationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: M6ConfigurationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct M6ConfigurationIE_Extensions(pub Vec<M6ConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum M7ConfigurationIE_Extensions_EntryExtensionValue {
    #[asn(key = 539)]
    Id_M7ReportAmount(M7ReportAmount),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct M7ConfigurationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: M7ConfigurationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct M7ConfigurationIE_Extensions(pub Vec<M7ConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MBS_Broadcast_Cell_ItemMtch_neighbourCell(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBS_Broadcast_Cell_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBS_Broadcast_Cell_ItemIE_Extensions(
    pub Vec<MBS_Broadcast_Cell_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct MBS_CUtoDURRCInformationMRB_PDCP_Config_Broadcast(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBS_CUtoDURRCInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBS_CUtoDURRCInformationIE_Extensions(
    pub Vec<MBS_CUtoDURRCInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBS_Flows_Mapped_To_MRB_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBS_Flows_Mapped_To_MRB_ItemIE_Extensions(
    pub Vec<MBS_Flows_Mapped_To_MRB_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBS_ServiceArea_choice_Extensions {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBS_ServiceAreaInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBS_ServiceAreaInformationIE_Extensions(
    pub Vec<MBS_ServiceAreaInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBS_ServiceAreaInformationItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBS_ServiceAreaInformationItemIE_Extensions(
    pub Vec<MBS_ServiceAreaInformationItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBS_ServiceAreaTAIList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBS_ServiceAreaTAIList_ItemIE_Extensions(
    pub Vec<MBS_ServiceAreaTAIList_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBS_Session_IDIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBS_Session_IDIE_Extensions(pub Vec<MBS_Session_IDIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBSF1UInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBSF1UInformationIE_Extensions(pub Vec<MBSF1UInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum MBSMulticastF1UContextDescriptorMc_F1UCtxtusage {
    PTM,
    PTP,
    PTP_RETRANSMISSION,
    PTP_FORWARDING,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MBSMulticastF1UContextDescriptorIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MBSMulticastF1UContextDescriptorIE_Extensions(
    pub Vec<MBSMulticastF1UContextDescriptorIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MDTConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MDTConfigurationIE_Extensions(pub Vec<MDTConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct MIMOPRBusageInformationDl_GBR_PRB_usage_for_MIMO(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct MIMOPRBusageInformationUl_GBR_PRB_usage_for_MIMO(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct MIMOPRBusageInformationDl_non_GBR_PRB_usage_for_MIMO(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct MIMOPRBusageInformationUl_non_GBR_PRB_usage_for_MIMO(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct MIMOPRBusageInformationDl_Total_PRB_usage_for_MIMO(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct MIMOPRBusageInformationUl_Total_PRB_usage_for_MIMO(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MIMOPRBusageInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MIMOPRBusageInformationIE_Extensions(
    pub Vec<MIMOPRBusageInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4095")]
pub struct MRB_ProgressInformation_pdcp_SN12(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "262143")]
pub struct MRB_ProgressInformation_pdcp_SN18(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MRB_ProgressInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MeasuredResultsValue_choice_extensionValue {
    #[asn(key = 558)]
    Id_MultipleULAoA(MultipleULAoA),
    #[asn(key = 559)]
    Id_UL_SRS_RSRPP(UL_SRS_RSRPP),
    #[asn(key = 554)]
    Id_ZoAInformation(ZoAInformation),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MeasuredResultsValue_choice_extension {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MeasuredResultsValue_choice_extensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MeasurementActivationProtocolIEs_EntryValue {
    #[asn(key = 649)]
    Id_ActivationRequestType(ActivationRequestType),
    #[asn(key = 570)]
    Id_PRS_Measurement_Info_List(PRS_Measurement_Info_List),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MeasurementActivationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MeasurementActivationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MeasurementActivationProtocolIEs(pub Vec<MeasurementActivationProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MeasurementBeamInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MeasurementBeamInfoIE_Extensions(pub Vec<MeasurementBeamInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MeasurementPreconfigurationConfirmProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 650)]
    Id_PosMeasGapPreConfigList(PosMeasGapPreConfigList),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MeasurementPreconfigurationConfirmProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MeasurementPreconfigurationConfirmProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MeasurementPreconfigurationConfirmProtocolIEs(
    pub Vec<MeasurementPreconfigurationConfirmProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MeasurementPreconfigurationRefuseProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MeasurementPreconfigurationRefuseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MeasurementPreconfigurationRefuseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MeasurementPreconfigurationRefuseProtocolIEs(
    pub Vec<MeasurementPreconfigurationRefuseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MeasurementPreconfigurationRequiredProtocolIEs_EntryValue {
    #[asn(key = 569)]
    Id_TRP_PRS_Info_List(TRP_PRS_Info_List),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MeasurementPreconfigurationRequiredProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MeasurementPreconfigurationRequiredProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MeasurementPreconfigurationRequiredProtocolIEs(
    pub Vec<MeasurementPreconfigurationRequiredProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextModificationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextModificationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextModificationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextModificationFailureProtocolIEs(
    pub Vec<MulticastContextModificationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextModificationRequestProtocolIEs_EntryValue {
    #[asn(key = 481)]
    Id_MBS_ServiceArea(MBS_ServiceArea),
    #[asn(key = 494)]
    Id_MulticastMRBs_ToBeModified_List(MulticastMRBs_ToBeModified_List),
    #[asn(key = 496)]
    Id_MulticastMRBs_ToBeReleased_List(MulticastMRBs_ToBeReleased_List),
    #[asn(key = 500)]
    Id_MulticastMRBs_ToBeSetupMod_List(MulticastMRBs_ToBeSetupMod_List),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextModificationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextModificationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextModificationRequestProtocolIEs(
    pub Vec<MulticastContextModificationRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextModificationResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 482)]
    Id_MulticastMRBs_FailedToBeModified_List(MulticastMRBs_FailedToBeModified_List),
    #[asn(key = 486)]
    Id_MulticastMRBs_FailedToBeSetupMod_List(MulticastMRBs_FailedToBeSetupMod_List),
    #[asn(key = 488)]
    Id_MulticastMRBs_Modified_List(MulticastMRBs_Modified_List),
    #[asn(key = 492)]
    Id_MulticastMRBs_SetupMod_List(MulticastMRBs_SetupMod_List),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextModificationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextModificationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextModificationResponseProtocolIEs(
    pub Vec<MulticastContextModificationResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextReleaseCommandProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextReleaseCommandProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextReleaseCommandProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextReleaseCommandProtocolIEs(
    pub Vec<MulticastContextReleaseCommandProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextReleaseCompleteProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextReleaseCompleteProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextReleaseCompleteProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextReleaseCompleteProtocolIEs(
    pub Vec<MulticastContextReleaseCompleteProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextReleaseRequestProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextReleaseRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextReleaseRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextReleaseRequestProtocolIEs(
    pub Vec<MulticastContextReleaseRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextSetupFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextSetupFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextSetupFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextSetupFailureProtocolIEs(
    pub Vec<MulticastContextSetupFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextSetupRequestProtocolIEs_EntryValue {
    #[asn(key = 481)]
    Id_MBS_ServiceArea(MBS_ServiceArea),
    #[asn(key = 455)]
    Id_MBS_Session_ID(MBS_Session_ID),
    #[asn(key = 498)]
    Id_MulticastMRBs_ToBeSetup_List(MulticastMRBs_ToBeSetup_List),
    #[asn(key = 456)]
    Id_SNSSAI(SNSSAI),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextSetupRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextSetupRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextSetupRequestProtocolIEs(
    pub Vec<MulticastContextSetupRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastContextSetupResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 484)]
    Id_MulticastMRBs_FailedToBeSetup_List(MulticastMRBs_FailedToBeSetup_List),
    #[asn(key = 490)]
    Id_MulticastMRBs_Setup_List(MulticastMRBs_Setup_List),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastContextSetupResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastContextSetupResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastContextSetupResponseProtocolIEs(
    pub Vec<MulticastContextSetupResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastDistributionReleaseCommandProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 502)]
    Id_MBSMulticastF1UContextDescriptor(MBSMulticastF1UContextDescriptor),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastDistributionReleaseCommandProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastDistributionReleaseCommandProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastDistributionReleaseCommandProtocolIEs(
    pub Vec<MulticastDistributionReleaseCommandProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastDistributionReleaseCompleteProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 502)]
    Id_MBSMulticastF1UContextDescriptor(MBSMulticastF1UContextDescriptor),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastDistributionReleaseCompleteProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastDistributionReleaseCompleteProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastDistributionReleaseCompleteProtocolIEs(
    pub Vec<MulticastDistributionReleaseCompleteProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastDistributionSetupFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 502)]
    Id_MBSMulticastF1UContextDescriptor(MBSMulticastF1UContextDescriptor),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastDistributionSetupFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastDistributionSetupFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastDistributionSetupFailureProtocolIEs(
    pub Vec<MulticastDistributionSetupFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastDistributionSetupRequestProtocolIEs_EntryValue {
    #[asn(key = 502)]
    Id_MBSMulticastF1UContextDescriptor(MBSMulticastF1UContextDescriptor),
    #[asn(key = 503)]
    Id_MulticastF1UContext_ToBeSetup_List(MulticastF1UContext_ToBeSetup_List),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastDistributionSetupRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastDistributionSetupRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastDistributionSetupRequestProtocolIEs(
    pub Vec<MulticastDistributionSetupRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastDistributionSetupResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 502)]
    Id_MBSMulticastF1UContextDescriptor(MBSMulticastF1UContextDescriptor),
    #[asn(key = 507)]
    Id_MulticastF1UContext_FailedToBeSetup_List(MulticastF1UContext_FailedToBeSetup_List),
    #[asn(key = 505)]
    Id_MulticastF1UContext_Setup_List(MulticastF1UContext_Setup_List),
    #[asn(key = 451)]
    Id_gNB_CU_MBS_F1AP_ID(GNB_CU_MBS_F1AP_ID),
    #[asn(key = 452)]
    Id_gNB_DU_MBS_F1AP_ID(GNB_DU_MBS_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastDistributionSetupResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastDistributionSetupResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastDistributionSetupResponseProtocolIEs(
    pub Vec<MulticastDistributionSetupResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastF1UContext_FailedToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastF1UContext_FailedToBeSetup_ItemIE_Extensions(
    pub Vec<MulticastF1UContext_FailedToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastF1UContext_FailedToBeSetup_List_EntryValue {
    #[asn(key = 508)]
    Id_MulticastF1UContext_FailedToBeSetup_Item(MulticastF1UContext_FailedToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastF1UContext_FailedToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastF1UContext_FailedToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastF1UContext_Setup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastF1UContext_Setup_ItemIE_Extensions(
    pub Vec<MulticastF1UContext_Setup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastF1UContext_Setup_List_EntryValue {
    #[asn(key = 506)]
    Id_MulticastF1UContext_Setup_Item(MulticastF1UContext_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastF1UContext_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastF1UContext_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastF1UContext_ToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastF1UContext_ToBeSetup_ItemIE_Extensions(
    pub Vec<MulticastF1UContext_ToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastF1UContext_ToBeSetup_List_EntryValue {
    #[asn(key = 504)]
    Id_MulticastF1UContext_ToBeSetup_Item(MulticastF1UContext_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastF1UContext_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastF1UContext_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastGroupPagingProtocolIEs_EntryValue {
    #[asn(key = 455)]
    Id_MBS_Session_ID(MBS_Session_ID),
    #[asn(key = 113)]
    Id_PagingCell_List(PagingCell_list),
    #[asn(key = 479)]
    Id_UEIdentity_List_For_Paging_List(UEIdentity_List_For_Paging_List),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastGroupPagingProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastGroupPagingProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct MulticastGroupPagingProtocolIEs(pub Vec<MulticastGroupPagingProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMBSSessionList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMBSSessionList_ItemIE_Extensions(
    pub Vec<MulticastMBSSessionList_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_FailedToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_FailedToBeModified_ItemIE_Extensions(
    pub Vec<MulticastMRBs_FailedToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_FailedToBeModified_List_EntryValue {
    #[asn(key = 483)]
    Id_MulticastMRBs_FailedToBeModified_Item(MulticastMRBs_FailedToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_FailedToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_FailedToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_FailedToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_FailedToBeSetup_ItemIE_Extensions(
    pub Vec<MulticastMRBs_FailedToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_FailedToBeSetup_List_EntryValue {
    #[asn(key = 485)]
    Id_MulticastMRBs_FailedToBeSetup_Item(MulticastMRBs_FailedToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_FailedToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_FailedToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_FailedToBeSetupMod_ItemIE_Extensions(
    pub Vec<MulticastMRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_FailedToBeSetupMod_List_EntryValue {
    #[asn(key = 487)]
    Id_MulticastMRBs_FailedToBeSetupMod_Item(MulticastMRBs_FailedToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_FailedToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_FailedToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_Modified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_Modified_ItemIE_Extensions(
    pub Vec<MulticastMRBs_Modified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_Modified_List_EntryValue {
    #[asn(key = 489)]
    Id_MulticastMRBs_Modified_Item(MulticastMRBs_Modified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_Modified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_Modified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_Setup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_Setup_ItemIE_Extensions(
    pub Vec<MulticastMRBs_Setup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_Setup_List_EntryValue {
    #[asn(key = 491)]
    Id_MulticastMRBs_Setup_Item(MulticastMRBs_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_SetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_SetupMod_ItemIE_Extensions(
    pub Vec<MulticastMRBs_SetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_SetupMod_List_EntryValue {
    #[asn(key = 493)]
    Id_MulticastMRBs_SetupMod_Item(MulticastMRBs_SetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_SetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_SetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_ToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_ToBeModified_ItemIE_Extensions(
    pub Vec<MulticastMRBs_ToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_ToBeModified_List_EntryValue {
    #[asn(key = 495)]
    Id_MulticastMRBs_ToBeModified_Item(MulticastMRBs_ToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_ToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_ToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_ToBeReleased_ItemIE_Extensions(
    pub Vec<MulticastMRBs_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_ToBeReleased_List_EntryValue {
    #[asn(key = 497)]
    Id_MulticastMRBs_ToBeReleased_Item(MulticastMRBs_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_ToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_ToBeSetup_ItemIE_Extensions(
    pub Vec<MulticastMRBs_ToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_ToBeSetup_List_EntryValue {
    #[asn(key = 499)]
    Id_MulticastMRBs_ToBeSetup_Item(MulticastMRBs_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_ToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MulticastMRBs_ToBeSetupMod_ItemIE_Extensions(
    pub Vec<MulticastMRBs_ToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum MulticastMRBs_ToBeSetupMod_List_EntryValue {
    #[asn(key = 501)]
    Id_MulticastMRBs_ToBeSetupMod_Item(MulticastMRBs_ToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MulticastMRBs_ToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: MulticastMRBs_ToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MultipleULAoAIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MultipleULAoAIE_Extensions(pub Vec<MultipleULAoAIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MultipleULAoA_Item_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct MultiplexingInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct MultiplexingInfoIE_Extensions(pub Vec<MultiplexingInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NA_Resource_Configuration_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NA_Resource_Configuration_ItemIE_Extensions(
    pub Vec<NA_Resource_Configuration_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NGRANAllocationAndRetentionPriorityIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NGRANAllocationAndRetentionPriorityIE_Extensions(
    pub Vec<NGRANAllocationAndRetentionPriorityIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-2147483648", ub = "2147483647")]
pub struct NGRANHighAccuracyAccessPointPositionLatitude(pub i32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-2147483648", ub = "2147483647")]
pub struct NGRANHighAccuracyAccessPointPositionLongitude(pub i32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-64000", ub = "1280000")]
pub struct NGRANHighAccuracyAccessPointPositionAltitude(pub i32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct NGRANHighAccuracyAccessPointPositionUncertaintySemi_major(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct NGRANHighAccuracyAccessPointPositionUncertaintySemi_minor(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "179")]
pub struct NGRANHighAccuracyAccessPointPositionOrientationOfMajorAxis(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct NGRANHighAccuracyAccessPointPositionHorizontalConfidence(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct NGRANHighAccuracyAccessPointPositionUncertaintyAltitude(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct NGRANHighAccuracyAccessPointPositionVerticalConfidence(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NGRANHighAccuracyAccessPointPositionIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NGRANHighAccuracyAccessPointPositionIE_Extensions(
    pub Vec<NGRANHighAccuracyAccessPointPositionIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NPN_Broadcast_Information_PNI_NPNIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NPN_Broadcast_Information_PNI_NPNIE_Extension(
    pub Vec<NPN_Broadcast_Information_PNI_NPNIE_Extension_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NPN_Broadcast_Information_SNPNIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NPN_Broadcast_Information_SNPNIE_Extension(
    pub Vec<NPN_Broadcast_Information_SNPNIE_Extension_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NPNBroadcastInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NPNSupportInfo_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NR_CGI_List_For_Restart_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NR_CGI_List_For_Restart_ItemIE_Extensions(
    pub Vec<NR_CGI_List_For_Restart_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum NR_CGI_List_For_Restart_List_EntryValue {
    #[asn(key = 153)]
    Id_NR_CGI_List_For_Restart_Item(NR_CGI_List_For_Restart_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NR_CGI_List_For_Restart_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: NR_CGI_List_For_Restart_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum NR_Mode_Info_choice_extensionValue {
    #[asn(key = 445)]
    Id_NR_U(NR_U_Channel_Info_List),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NR_Mode_Info_choice_extension {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: NR_Mode_Info_choice_extensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NR_ModeInfoRel16_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NR_PRSBeamInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NR_PRSBeamInformationIE_Extensions(pub Vec<NR_PRSBeamInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NR_PRSBeamInformationItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NR_PRSBeamInformationItemIE_Extensions(
    pub Vec<NR_PRSBeamInformationItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "4", extensible = true)]
pub struct NR_U_Channel_Info_ItemNr_U_channel_ID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct NR_U_Channel_Info_ItemNR_ARFCN(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "4")]
pub enum NR_U_Channel_Info_ItemBandwidth {
    M_HZ_10,
    M_HZ_20,
    M_HZ_40,
    M_HZ_60,
    M_HZ_80,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NR_U_Channel_Info_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NR_U_Channel_Info_ItemIE_Extensions(pub Vec<NR_U_Channel_Info_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "16")]
pub struct NR_U_Channel_ItemNR_U_ChannelID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NR_U_Channel_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NR_U_Channel_ItemIE_Extensions(pub Vec<NR_U_Channel_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRCGIIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRCGIIE_Extensions(pub Vec<NRCGIIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "2199", extensible = true)]
pub struct NRCarrierItemOffsetToCarrier(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "275", extensible = true)]
pub struct NRCarrierItemCarrierBandwidth(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRCarrierItemIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRCarrierItemIE_Extension(pub Vec<NRCarrierItemIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct NRFreqInfoNRARFCN(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "32")]
pub struct NRFreqInfoFreqBandListNr(pub Vec<FreqBandNrItem>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum NRFreqInfoIE_Extensions_EntryExtensionValue {
    #[asn(key = 356)]
    Id_FrequencyShift7p5khz(FrequencyShift7p5khz),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRFreqInfoIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: NRFreqInfoIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRFreqInfoIE_Extensions(pub Vec<NRFreqInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRPRACHConfigIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRPRACHConfigIE_Extension(pub Vec<NRPRACHConfigIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "274", extensible = true)]
pub struct NRPRACHConfigItemPrachFreqStartfromCarrier(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum NRPRACHConfigItemPrachFDM {
    ONE,
    TWO,
    FOUR,
    EIGHT,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255", extensible = true)]
pub struct NRPRACHConfigItemPrachConfigIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "7")]
pub enum NRPRACHConfigItemSsb_perRACH_Occasion {
    ONE_EIGHTH,
    ONE_FOURTH,
    ONE_HALF,
    ONE,
    TWO,
    FOUR,
    EIGHT,
    SIXTEEN,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "15")]
pub struct NRPRACHConfigItemZeroCorrelZoneConfig(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRPRACHConfigItemIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRPRACHConfigItemIE_Extension(pub Vec<NRPRACHConfigItemIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRPagingeDRXInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRPagingeDRXInformationIE_Extensions(
    pub Vec<NRPagingeDRXInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRPagingeDRXInformationforRRCINACTIVEIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRPagingeDRXInformationforRRCINACTIVEIE_Extensions(
    pub Vec<NRPagingeDRXInformationforRRCINACTIVEIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRUESidelinkAggregateMaximumBitrateIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRUESidelinkAggregateMaximumBitrateIE_Extensions(
    pub Vec<NRUESidelinkAggregateMaximumBitrateIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NRV2XServicesAuthorizedIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NRV2XServicesAuthorizedIE_Extensions(
    pub Vec<NRV2XServicesAuthorizedIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NSAGSupportItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NSAGSupportItemIE_Extensions(pub Vec<NSAGSupportItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Neighbour_Cell_Information_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Neighbour_Cell_Information_ItemIE_Extensions(
    pub Vec<Neighbour_Cell_Information_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Neighbour_Cell_Information_List_EntryValue {
    #[asn(key = 255)]
    Id_Neighbour_Cell_Information_Item(Neighbour_Cell_Information_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Neighbour_Cell_Information_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Neighbour_Cell_Information_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum Neighbour_Node_Cells_List_ItemPeer_Parent_Node_Indicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Neighbour_Node_Cells_List_ItemCSI_RS_Configuration(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Neighbour_Node_Cells_List_ItemSR_Configuration(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Neighbour_Node_Cells_List_ItemPDCCH_ConfigSIB1(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Neighbour_Node_Cells_List_ItemSCS_Common(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Neighbour_Node_Cells_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Neighbour_Node_Cells_List_ItemIE_Extensions(
    pub Vec<Neighbour_Node_Cells_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NeighbourNR_CellsForSON_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NeighbourNR_CellsForSON_ItemIE_Extensions(
    pub Vec<NeighbourNR_CellsForSON_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum NetworkAccessRateReductionProtocolIEs_EntryValue {
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 225)]
    Id_UAC_Assistance_Info(UAC_Assistance_Info),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NetworkAccessRateReductionProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: NetworkAccessRateReductionProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct NetworkAccessRateReductionProtocolIEs(
    pub Vec<NetworkAccessRateReductionProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255", extensible = true)]
pub struct NonDynamic5QIDescriptorFiveQI(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "127")]
pub struct NonDynamic5QIDescriptorQoSPriorityLevel(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum NonDynamic5QIDescriptorIE_Extensions_EntryExtensionValue {
    #[asn(key = 362)]
    Id_CNPacketDelayBudgetDownlink(ExtendedPacketDelayBudget),
    #[asn(key = 369)]
    Id_CNPacketDelayBudgetUplink(ExtendedPacketDelayBudget),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NonDynamic5QIDescriptorIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: NonDynamic5QIDescriptorIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NonDynamic5QIDescriptorIE_Extensions(
    pub Vec<NonDynamic5QIDescriptorIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255", extensible = true)]
pub struct NonDynamicPQIDescriptorFiveQI(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "8", extensible = true)]
pub struct NonDynamicPQIDescriptorQoSPriorityLevel(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NonDynamicPQIDescriptorIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NonDynamicPQIDescriptorIE_Extensions(
    pub Vec<NonDynamicPQIDescriptorIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NotificationInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NotificationInformationIE_Extensions(
    pub Vec<NotificationInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum NotifyProtocolIEs_EntryValue {
    #[asn(key = 137)]
    Id_DRB_Notify_List(DRB_Notify_List),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NotifyProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: NotifyProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct NotifyProtocolIEs(pub Vec<NotifyProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "13", extensible = true)]
pub struct NumDLULSymbolsNumDLSymbols(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "13", extensible = true)]
pub struct NumDLULSymbolsNumULSymbols(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum NumDLULSymbolsIE_Extensions_EntryExtensionValue {
    #[asn(key = 535)]
    Id_permutation(Permutation),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct NumDLULSymbolsIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: NumDLULSymbolsIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct NumDLULSymbolsIE_Extensions(pub Vec<NumDLULSymbolsIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "16", sz_ub = "16")]
pub struct OnDemandPRS_InfoOnDemandPRSRequestAllowed(
    pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "24", sz_ub = "24")]
pub struct OnDemandPRS_InfoAllowedResourceSetPeriodicityValues(
    pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "64", sz_ub = "64")]
pub struct OnDemandPRS_InfoAllowedPRSBandwidthValues(
    pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct OnDemandPRS_InfoAllowedResourceRepetitionFactorValues(
    pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct OnDemandPRS_InfoAllowedResourceNumberOfSymbolsValues(
    pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct OnDemandPRS_InfoAllowedCombSizeValues(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct OnDemandPRS_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct OnDemandPRS_InfoIE_Extensions(pub Vec<OnDemandPRS_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5_QoS_Characteristics_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5FlowBitRatesIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5FlowBitRatesIE_Extensions(pub Vec<PC5FlowBitRatesIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5QoSParametersIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5QoSParametersIE_Extensions(pub Vec<PC5QoSParametersIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelFailedToBeModifiedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelFailedToBeModifiedItemIE_Extensions(
    pub Vec<PC5RLCChannelFailedToBeModifiedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelFailedToBeSetupItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelFailedToBeSetupItemIE_Extensions(
    pub Vec<PC5RLCChannelFailedToBeSetupItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelModifiedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelModifiedItemIE_Extensions(
    pub Vec<PC5RLCChannelModifiedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PC5RLCChannelQoSInformation_pC5ControlPlaneTrafficType {
    SRB1,
    SRB2,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelQoSInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelRequiredToBeModifiedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelRequiredToBeModifiedItemIE_Extensions(
    pub Vec<PC5RLCChannelRequiredToBeModifiedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelRequiredToBeReleasedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelRequiredToBeReleasedItemIE_Extensions(
    pub Vec<PC5RLCChannelRequiredToBeReleasedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelSetupItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelSetupItemIE_Extensions(pub Vec<PC5RLCChannelSetupItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelToBeModifiedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelToBeModifiedItemIE_Extensions(
    pub Vec<PC5RLCChannelToBeModifiedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelToBeReleasedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelToBeReleasedItemIE_Extensions(
    pub Vec<PC5RLCChannelToBeReleasedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PC5RLCChannelToBeSetupItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PC5RLCChannelToBeSetupItemIE_Extensions(
    pub Vec<PC5RLCChannelToBeSetupItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasuredResults_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PDCMeasuredResults_ItemIE_Extensions(
    pub Vec<PDCMeasuredResults_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasuredResults_Value_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PDCMeasurementFailureIndicationProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 546)]
    Id_RAN_UE_PDC_MeasID(RAN_UE_PDC_MeasID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementFailureIndicationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PDCMeasurementFailureIndicationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PDCMeasurementFailureIndicationProtocolIEs(
    pub Vec<PDCMeasurementFailureIndicationProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PDCMeasurementInitiationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 546)]
    Id_RAN_UE_PDC_MeasID(RAN_UE_PDC_MeasID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementInitiationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PDCMeasurementInitiationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PDCMeasurementInitiationFailureProtocolIEs(
    pub Vec<PDCMeasurementInitiationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PDCMeasurementInitiationRequestProtocolIEs_EntryValue {
    #[asn(key = 541)]
    Id_PDCMeasurementPeriodicity(PDCMeasurementPeriodicity),
    #[asn(key = 542)]
    Id_PDCMeasurementQuantities(PDCMeasurementQuantities),
    #[asn(key = 545)]
    Id_PDCReportType(PDCReportType),
    #[asn(key = 546)]
    Id_RAN_UE_PDC_MeasID(RAN_UE_PDC_MeasID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementInitiationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PDCMeasurementInitiationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PDCMeasurementInitiationRequestProtocolIEs(
    pub Vec<PDCMeasurementInitiationRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PDCMeasurementInitiationResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 544)]
    Id_PDCMeasurementResult(PDCMeasurementResult),
    #[asn(key = 546)]
    Id_RAN_UE_PDC_MeasID(RAN_UE_PDC_MeasID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementInitiationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PDCMeasurementInitiationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PDCMeasurementInitiationResponseProtocolIEs(
    pub Vec<PDCMeasurementInitiationResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PDCMeasurementQuantities_EntryValue {
    #[asn(key = 543)]
    Id_PDCMeasurementQuantities_Item(PDCMeasurementQuantities_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementQuantities_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PDCMeasurementQuantities_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementQuantities_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PDCMeasurementQuantities_ItemIE_Extensions(
    pub Vec<PDCMeasurementQuantities_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PDCMeasurementReportProtocolIEs_EntryValue {
    #[asn(key = 544)]
    Id_PDCMeasurementResult(PDCMeasurementResult),
    #[asn(key = 546)]
    Id_RAN_UE_PDC_MeasID(RAN_UE_PDC_MeasID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementReportProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PDCMeasurementReportProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PDCMeasurementReportProtocolIEs(pub Vec<PDCMeasurementReportProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementResultIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PDCMeasurementResultIE_Extensions(pub Vec<PDCMeasurementResultIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PDCMeasurementTerminationCommandProtocolIEs_EntryValue {
    #[asn(key = 546)]
    Id_RAN_UE_PDC_MeasID(RAN_UE_PDC_MeasID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PDCMeasurementTerminationCommandProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PDCMeasurementTerminationCommandProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PDCMeasurementTerminationCommandProtocolIEs(
    pub Vec<PDCMeasurementTerminationCommandProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PEIPSAssistanceInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PEIPSAssistanceInfoIE_Extensions(pub Vec<PEIPSAssistanceInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct PRS_Measurement_Info_List_ItemPointA(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum PRS_Measurement_Info_List_ItemMeasPRSPeriodicity {
    MS20,
    MS40,
    MS80,
    MS160,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "159", extensible = true)]
pub struct PRS_Measurement_Info_List_ItemMeasPRSOffset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "7")]
pub enum PRS_Measurement_Info_List_ItemMeasurementPRSLength {
    MS1DOT5,
    MS3,
    MS3DOT5,
    MS4,
    MS5DOT5,
    MS6,
    MS10,
    MS20,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRS_Measurement_Info_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRS_Measurement_Info_List_ItemIE_Extensions(
    pub Vec<PRS_Measurement_Info_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "359")]
pub struct PRSAngleItemNR_PRS_Azimuth(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct PRSAngleItemNR_PRS_Azimuth_fine(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "180")]
pub struct PRSAngleItemNR_PRS_Elevation(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct PRSAngleItemNR_PRS_Elevation_fine(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PRSAngleItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 439)]
    Id_PRS_Resource_ID(PRS_Resource_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSAngleItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: PRSAngleItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSAngleItemIE_Extensions(pub Vec<PRSAngleItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSConfigurationIE_Extensions(pub Vec<PRSConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PRSConfigurationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSConfigurationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PRSConfigurationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PRSConfigurationFailureProtocolIEs(pub Vec<PRSConfigurationFailureProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PRSConfigurationRequestProtocolIEs_EntryValue {
    #[asn(key = 571)]
    Id_PRSConfigRequestType(PRSConfigRequestType),
    #[asn(key = 549)]
    Id_PRSTRPList(PRSTRPList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSConfigurationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PRSConfigurationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PRSConfigurationRequestProtocolIEs(pub Vec<PRSConfigurationRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PRSConfigurationResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 550)]
    Id_PRSTransmissionTRPList(PRSTransmissionTRPList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSConfigurationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PRSConfigurationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PRSConfigurationResponseProtocolIEs(pub Vec<PRSConfigurationResponseProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct PRSInformationPosPRS_IDPos(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7")]
pub struct PRSInformationPosPRS_Resource_Set_IDPos(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct PRSInformationPosPRS_Resource_IDPos(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSInformationPosIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSInformationPosIE_Extensions(pub Vec<PRSInformationPosIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSMutingIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSMutingIE_Extensions(pub Vec<PRSMutingIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum PRSMutingOption1MutingBitRepetitionFactor {
    RF1,
    RF2,
    RF4,
    RF8,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSMutingOption1IE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSMutingOption1IE_Extensions(pub Vec<PRSMutingOption1IE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSMutingOption2IE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSMutingOption2IE_Extensions(pub Vec<PRSMutingOption2IE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4095")]
pub struct PRSResource_ItemSequenceID(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "11", extensible = true)]
pub struct PRSResource_ItemREOffset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "511")]
pub struct PRSResource_ItemResourceSlotOffset(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "12")]
pub struct PRSResource_ItemResourceSymbolOffset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSResource_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSResource_ItemIE_Extensions(pub Vec<PRSResource_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSResource_QCLInfo_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSResource_QCLSourcePRSIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSResource_QCLSourcePRSIE_Extensions(
    pub Vec<PRSResource_QCLSourcePRSIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1007")]
pub struct PRSResource_QCLSourceSSBPCI_NR(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSResource_QCLSourceSSBIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSResource_QCLSourceSSBIE_Extensions(
    pub Vec<PRSResource_QCLSourceSSBIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum PRSResourceSet_ItemSubcarrierSpacing {
    K_HZ15,
    K_HZ30,
    K_HZ60,
    K_HZ120,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "63")]
pub struct PRSResourceSet_ItemPRSbandwidth(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "2176")]
pub struct PRSResourceSet_ItemStartPRB(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct PRSResourceSet_ItemPointA(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum PRSResourceSet_ItemCombSize {
    N2,
    N4,
    N6,
    N12,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum PRSResourceSet_ItemCPType {
    NORMAL,
    EXTENDED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "19")]
pub enum PRSResourceSet_ItemResourceSetPeriodicity {
    N4,
    N5,
    N8,
    N10,
    N16,
    N20,
    N32,
    N40,
    N64,
    N80,
    N160,
    N320,
    N640,
    N1280,
    N2560,
    N5120,
    N10240,
    N20480,
    N40960,
    N81920,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "81919", extensible = true)]
pub struct PRSResourceSet_ItemResourceSetSlotOffset(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "6")]
pub enum PRSResourceSet_ItemResourceRepetitionFactor {
    RF1,
    RF2,
    RF4,
    RF6,
    RF8,
    RF16,
    RF32,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "5")]
pub enum PRSResourceSet_ItemResourceTimeGap {
    TG1,
    TG2,
    TG4,
    TG8,
    TG16,
    TG32,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum PRSResourceSet_ItemResourceNumberofSymbols {
    N2,
    N4,
    N6,
    N12,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-60", ub = "50")]
pub struct PRSResourceSet_ItemPRSResourceTransmitPower(pub i8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSResourceSet_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSResourceSet_ItemIE_Extensions(pub Vec<PRSResourceSet_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSTRPItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSTRPItemIE_Extensions(pub Vec<PRSTRPItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "NULL")]
pub struct PRSTransmissionOffIndication_pRSTransmissionOffPerTRP;

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSTransmissionOffIndication_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSTransmissionOffIndicationPerResource_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSTransmissionOffIndicationPerResource_ItemIE_Extensions(
    pub Vec<PRSTransmissionOffIndicationPerResource_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSTransmissionOffInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSTransmissionOffInformationIE_Extensions(
    pub Vec<PRSTransmissionOffInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct PRSTransmissionOffPerResource_ItemPRSTransmissionOffIndicationPerResourceList(
    pub Vec<PRSTransmissionOffIndicationPerResource_Item>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSTransmissionOffPerResource_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSTransmissionOffPerResource_ItemIE_Extensions(
    pub Vec<PRSTransmissionOffPerResource_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSTransmissionOffPerResourceSet_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSTransmissionOffPerResourceSet_ItemIE_Extensions(
    pub Vec<PRSTransmissionOffPerResourceSet_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PRSTransmissionTRPItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PRSTransmissionTRPItemIE_Extensions(pub Vec<PRSTransmissionTRPItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PWS_Failed_NR_CGI_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PWS_Failed_NR_CGI_ItemIE_Extensions(pub Vec<PWS_Failed_NR_CGI_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PWS_Failed_NR_CGI_List_EntryValue {
    #[asn(key = 155)]
    Id_PWS_Failed_NR_CGI_Item(PWS_Failed_NR_CGI_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PWS_Failed_NR_CGI_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PWS_Failed_NR_CGI_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PWSCancelRequestProtocolIEs_EntryValue {
    #[asn(key = 148)]
    Id_Broadcast_To_Be_Cancelled_List(Broadcast_To_Be_Cancelled_List),
    #[asn(key = 157)]
    Id_Cancel_all_Warning_Messages_Indicator(Cancel_all_Warning_Messages_Indicator),
    #[asn(key = 220)]
    Id_NotificationInformation(NotificationInformation),
    #[asn(key = 142)]
    Id_NumberofBroadcastRequest(NumberofBroadcastRequest),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PWSCancelRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PWSCancelRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PWSCancelRequestProtocolIEs(pub Vec<PWSCancelRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PWSCancelResponseProtocolIEs_EntryValue {
    #[asn(key = 150)]
    Id_Cells_Broadcast_Cancelled_List(Cells_Broadcast_Cancelled_List),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PWSCancelResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PWSCancelResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PWSCancelResponseProtocolIEs(pub Vec<PWSCancelResponseProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PWSFailureIndicationProtocolIEs_EntryValue {
    #[asn(key = 154)]
    Id_PWS_Failed_NR_CGI_List(PWS_Failed_NR_CGI_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PWSFailureIndicationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PWSFailureIndicationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PWSFailureIndicationProtocolIEs(pub Vec<PWSFailureIndicationProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PWSRestartIndicationProtocolIEs_EntryValue {
    #[asn(key = 152)]
    Id_NR_CGI_List_For_Restart_List(NR_CGI_List_For_Restart_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PWSRestartIndicationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PWSRestartIndicationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PWSRestartIndicationProtocolIEs(pub Vec<PWSRestartIndicationProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct PWSSystemInformationSIBmessage(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PWSSystemInformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 231)]
    Id_AdditionalSIBMessageList(AdditionalSIBMessageList),
    #[asn(key = 220)]
    Id_NotificationInformation(NotificationInformation),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PWSSystemInformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: PWSSystemInformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PWSSystemInformationIE_Extensions(pub Vec<PWSSystemInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PacketErrorRateIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PacketErrorRateIE_Extensions(pub Vec<PacketErrorRateIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PagingProtocolIEs_EntryValue {
    #[asn(key = 581)]
    Id_CNUEPagingDRX(PagingDRX),
    #[asn(key = 582)]
    Id_NRPagingeDRXInformation(NRPagingeDRXInformation),
    #[asn(key = 583)]
    Id_NRPagingeDRXInformationforRRCINACTIVE(NRPagingeDRXInformationforRRCINACTIVE),
    #[asn(key = 622)]
    Id_PEIPSAssistanceInfo(PEIPSAssistanceInfo),
    #[asn(key = 620)]
    Id_PagingCause(PagingCause),
    #[asn(key = 113)]
    Id_PagingCell_List(PagingCell_list),
    #[asn(key = 114)]
    Id_PagingDRX(PagingDRX),
    #[asn(key = 127)]
    Id_PagingIdentity(PagingIdentity),
    #[asn(key = 216)]
    Id_PagingOrigin(PagingOrigin),
    #[asn(key = 115)]
    Id_PagingPriority(PagingPriority),
    #[asn(key = 580)]
    Id_RANUEPagingDRX(PagingDRX),
    #[asn(key = 117)]
    Id_UEIdentityIndexValue(UEIdentityIndexValue),
    #[asn(key = 623)]
    Id_UEPagingCapability(UEPagingCapability),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PagingProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PagingProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PagingProtocolIEs(pub Vec<PagingProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PagingCell_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 624)]
    Id_LastUsedCellIndication(LastUsedCellIndication),
    #[asn(key = 664)]
    Id_PEISubgroupingSupportIndication(PEISubgroupingSupportIndication),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PagingCell_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: PagingCell_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PagingCell_ItemIE_Extensions(pub Vec<PagingCell_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PagingCell_list_EntryValue {
    #[asn(key = 112)]
    Id_PagingCell_Item(PagingCell_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PagingCell_list_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PagingCell_list_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PagingIdentity_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Parent_IAB_Nodes_NA_Resource_Configuration_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Parent_IAB_Nodes_NA_Resource_Configuration_ItemIE_Extensions(
    pub Vec<Parent_IAB_Nodes_NA_Resource_Configuration_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PartialSuccessCellIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PartialSuccessCellIE_Extensions(pub Vec<PartialSuccessCellIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "24", sz_ub = "24")]
pub struct PathSwitchConfigurationTargetRelayUEID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "7")]
pub enum PathSwitchConfigurationT420 {
    MS50,
    MS100,
    MS150,
    MS200,
    MS500,
    MS1000,
    MS2000,
    MS10000,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PathSwitchConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PathSwitchConfigurationIE_Extensions(
    pub Vec<PathSwitchConfigurationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PathlossReferenceInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PathlossReferenceInfoIE_Extensions(pub Vec<PathlossReferenceInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PathlossReferenceSignal_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PeriodicityList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PeriodicityList_ItemIE_Extensions(pub Vec<PeriodicityList_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct PosMeasGapPreConfigListPosMeasGapPreConfigToAddModList(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct PosMeasGapPreConfigListPosMeasGapPreConfigToReleaseList(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosMeasGapPreConfigListIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosMeasGapPreConfigListIE_Extensions(
    pub Vec<PosMeasGapPreConfigListIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "5")]
pub struct PosMeasurementQuantities_ItemTimingReportingGranularityFactor(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosMeasurementQuantities_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosMeasurementQuantities_ItemIE_Extensions(
    pub Vec<PosMeasurementQuantities_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PosMeasurementResultItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 557)]
    Id_ARP_ID(ARP_ID),
    #[asn(key = 562)]
    Id_LoS_NLoSInformation(LoS_NLoSInformation),
    #[asn(key = 560)]
    Id_SRSResourcetype(SRSResourcetype),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosMeasurementResultItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: PosMeasurementResultItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosMeasurementResultItemIE_Extensions(
    pub Vec<PosMeasurementResultItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PosMeasurementResultList_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 111)]
    Id_NRCGI(NRCGI),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosMeasurementResultList_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: PosMeasurementResultList_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosMeasurementResultList_ItemIE_Extensions(
    pub Vec<PosMeasurementResultList_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosResourceSetType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "3")]
pub struct PosResourceSetTypeAPSRSResourceTrigger_List(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosResourceSetTypeAPIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosResourceSetTypeAPIE_Extensions(pub Vec<PosResourceSetTypeAPIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum PosResourceSetTypePRPosperiodicSet {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosResourceSetTypePRIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosResourceSetTypePRIE_Extensions(pub Vec<PosResourceSetTypePRIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum PosResourceSetTypeSPPossemi_persistentSet {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosResourceSetTypeSPIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosResourceSetTypeSPIE_Extensions(pub Vec<PosResourceSetTypeSPIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "13")]
pub struct PosSRSResource_ItemStartPosition(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "4")]
pub enum PosSRSResource_ItemNrofSymbols {
    N1,
    N2,
    N4,
    N8,
    N12,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "268")]
pub struct PosSRSResource_ItemFreqDomainShift(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct PosSRSResource_ItemC_SRS(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum PosSRSResource_ItemGroupOrSequenceHopping {
    NEITHER,
    GROUP_HOPPING,
    SEQUENCE_HOPPING,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535")]
pub struct PosSRSResource_ItemSequenceId(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosSRSResource_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosSRSResource_ItemIE_Extensions(pub Vec<PosSRSResource_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "15")]
pub struct PosSRSResourceSet_ItemPossrsResourceSetID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PosSRSResourceSet_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PosSRSResourceSet_ItemIE_Extensions(pub Vec<PosSRSResourceSet_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningActivationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningActivationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningActivationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningActivationFailureProtocolIEs(
    pub Vec<PositioningActivationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningActivationRequestProtocolIEs_EntryValue {
    #[asn(key = 404)]
    Id_ActivationTime(RelativeTime1900),
    #[asn(key = 403)]
    Id_SRSType(SRSType),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningActivationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningActivationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningActivationRequestProtocolIEs(
    pub Vec<PositioningActivationRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningActivationResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 421)]
    Id_SlotNumber(SlotNumber),
    #[asn(key = 420)]
    Id_SystemFrameNumber(SystemFrameNumber),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningActivationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningActivationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningActivationResponseProtocolIEs(
    pub Vec<PositioningActivationResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningAssistanceInformationControlProtocolIEs_EntryValue {
    #[asn(key = 392)]
    Id_PosAssistance_Information(PosAssistance_Information),
    #[asn(key = 393)]
    Id_PosBroadcast(PosBroadcast),
    #[asn(key = 406)]
    Id_PositioningBroadcastCells(PositioningBroadcastCells),
    #[asn(key = 394)]
    Id_RoutingID(RoutingID),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningAssistanceInformationControlProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningAssistanceInformationControlProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningAssistanceInformationControlProtocolIEs(
    pub Vec<PositioningAssistanceInformationControlProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningAssistanceInformationFeedbackProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 395)]
    Id_PosAssistanceInformationFailureList(PosAssistanceInformationFailureList),
    #[asn(key = 406)]
    Id_PositioningBroadcastCells(PositioningBroadcastCells),
    #[asn(key = 394)]
    Id_RoutingID(RoutingID),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningAssistanceInformationFeedbackProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningAssistanceInformationFeedbackProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningAssistanceInformationFeedbackProtocolIEs(
    pub Vec<PositioningAssistanceInformationFeedbackProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningDeactivationProtocolIEs_EntryValue {
    #[asn(key = 405)]
    Id_AbortTransmission(AbortTransmission),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningDeactivationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningDeactivationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningDeactivationProtocolIEs(pub Vec<PositioningDeactivationProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningInformationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningInformationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningInformationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningInformationFailureProtocolIEs(
    pub Vec<PositioningInformationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningInformationRequestProtocolIEs_EntryValue {
    #[asn(key = 391)]
    Id_RequestedSRSTransmissionCharacteristics(RequestedSRSTransmissionCharacteristics),
    #[asn(key = 575)]
    Id_UEReportingInformation(UEReportingInformation),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningInformationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningInformationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningInformationRequestProtocolIEs(
    pub Vec<PositioningInformationRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningInformationResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 419)]
    Id_SFNInitialisationTime(RelativeTime1900),
    #[asn(key = 407)]
    Id_SRSConfiguration(SRSConfiguration),
    #[asn(key = 674)]
    Id_SRSPosRRCInactiveConfig(SRSPosRRCInactiveConfig),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningInformationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningInformationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningInformationResponseProtocolIEs(
    pub Vec<PositioningInformationResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningInformationUpdateProtocolIEs_EntryValue {
    #[asn(key = 419)]
    Id_SFNInitialisationTime(RelativeTime1900),
    #[asn(key = 407)]
    Id_SRSConfiguration(SRSConfiguration),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningInformationUpdateProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningInformationUpdateProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningInformationUpdateProtocolIEs(
    pub Vec<PositioningInformationUpdateProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningMeasurementAbortProtocolIEs_EntryValue {
    #[asn(key = 402)]
    Id_LMF_MeasurementID(LMF_MeasurementID),
    #[asn(key = 411)]
    Id_RAN_MeasurementID(RAN_MeasurementID),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningMeasurementAbortProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningMeasurementAbortProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningMeasurementAbortProtocolIEs(
    pub Vec<PositioningMeasurementAbortProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningMeasurementFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 402)]
    Id_LMF_MeasurementID(LMF_MeasurementID),
    #[asn(key = 411)]
    Id_RAN_MeasurementID(RAN_MeasurementID),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningMeasurementFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningMeasurementFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningMeasurementFailureProtocolIEs(
    pub Vec<PositioningMeasurementFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningMeasurementFailureIndicationProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 402)]
    Id_LMF_MeasurementID(LMF_MeasurementID),
    #[asn(key = 411)]
    Id_RAN_MeasurementID(RAN_MeasurementID),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningMeasurementFailureIndicationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningMeasurementFailureIndicationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningMeasurementFailureIndicationProtocolIEs(
    pub Vec<PositioningMeasurementFailureIndicationProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningMeasurementReportProtocolIEs_EntryValue {
    #[asn(key = 402)]
    Id_LMF_MeasurementID(LMF_MeasurementID),
    #[asn(key = 397)]
    Id_PosMeasurementResultList(PosMeasurementResultList),
    #[asn(key = 411)]
    Id_RAN_MeasurementID(RAN_MeasurementID),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningMeasurementReportProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningMeasurementReportProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningMeasurementReportProtocolIEs(
    pub Vec<PositioningMeasurementReportProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningMeasurementRequestProtocolIEs_EntryValue {
    #[asn(key = 402)]
    Id_LMF_MeasurementID(LMF_MeasurementID),
    #[asn(key = 423)]
    Id_MeasurementBeamInfoRequest(MeasurementBeamInfoRequest),
    #[asn(key = 574)]
    Id_MeasurementCharacteristicsRequestIndicator(MeasurementCharacteristicsRequestIndicator),
    #[asn(key = 573)]
    Id_MeasurementTimeOccasion(MeasurementTimeOccasion),
    #[asn(key = 634)]
    Id_PosMeasurementAmount(PosMeasurementAmount),
    #[asn(key = 409)]
    Id_PosMeasurementPeriodicity(MeasurementPeriodicity),
    #[asn(key = 438)]
    Id_PosMeasurementPeriodicityExtended(MeasurementPeriodicityExtended),
    #[asn(key = 396)]
    Id_PosMeasurementQuantities(PosMeasurementQuantities),
    #[asn(key = 408)]
    Id_PosReportCharacteristics(PosReportCharacteristics),
    #[asn(key = 411)]
    Id_RAN_MeasurementID(RAN_MeasurementID),
    #[asn(key = 555)]
    Id_ResponseTime(ResponseTime),
    #[asn(key = 419)]
    Id_SFNInitialisationTime(RelativeTime1900),
    #[asn(key = 407)]
    Id_SRSConfiguration(SRSConfiguration),
    #[asn(key = 421)]
    Id_SlotNumber(SlotNumber),
    #[asn(key = 420)]
    Id_SystemFrameNumber(SystemFrameNumber),
    #[asn(key = 422)]
    Id_TRP_MeasurementRequestList(TRP_MeasurementRequestList),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningMeasurementRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningMeasurementRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningMeasurementRequestProtocolIEs(
    pub Vec<PositioningMeasurementRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningMeasurementResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 402)]
    Id_LMF_MeasurementID(LMF_MeasurementID),
    #[asn(key = 397)]
    Id_PosMeasurementResultList(PosMeasurementResultList),
    #[asn(key = 411)]
    Id_RAN_MeasurementID(RAN_MeasurementID),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningMeasurementResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningMeasurementResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningMeasurementResponseProtocolIEs(
    pub Vec<PositioningMeasurementResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum PositioningMeasurementUpdateProtocolIEs_EntryValue {
    #[asn(key = 402)]
    Id_LMF_MeasurementID(LMF_MeasurementID),
    #[asn(key = 574)]
    Id_MeasurementCharacteristicsRequestIndicator(MeasurementCharacteristicsRequestIndicator),
    #[asn(key = 573)]
    Id_MeasurementTimeOccasion(MeasurementTimeOccasion),
    #[asn(key = 411)]
    Id_RAN_MeasurementID(RAN_MeasurementID),
    #[asn(key = 407)]
    Id_SRSConfiguration(SRSConfiguration),
    #[asn(key = 553)]
    Id_TRP_MeasurementUpdateList(TRP_MeasurementUpdateList),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PositioningMeasurementUpdateProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: PositioningMeasurementUpdateProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct PositioningMeasurementUpdateProtocolIEs(
    pub Vec<PositioningMeasurementUpdateProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Potential_SpCell_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Potential_SpCell_ItemIE_Extensions(pub Vec<Potential_SpCell_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Potential_SpCell_List_EntryValue {
    #[asn(key = 93)]
    Id_Potential_SpCell_Item(Potential_SpCell_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Potential_SpCell_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Potential_SpCell_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "65535")]
pub struct PrivateIE_ID_local(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OBJECT-IDENTIFIER")]
pub struct PrivateIE_ID_global(Vec<u32>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct PrivateMessagePrivateIEs_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct PrivateMessagePrivateIEs(pub Vec<PrivateMessagePrivateIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Protected_EUTRA_Resources_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Protected_EUTRA_Resources_ItemIE_Extensions(
    pub Vec<Protected_EUTRA_Resources_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Protected_EUTRA_Resources_List_EntryValue {
    #[asn(key = 168)]
    Id_Protected_EUTRA_Resources_Item(Protected_EUTRA_Resources_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Protected_EUTRA_Resources_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Protected_EUTRA_Resources_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct QoEInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct QoEInformationIE_Extensions(pub Vec<QoEInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct QoEInformationList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct QoEInformationList_ItemIE_Extensions(
    pub Vec<QoEInformationList_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum QoEInformationTransferProtocolIEs_EntryValue {
    #[asn(key = 585)]
    Id_QoEInformation(QoEInformation),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct QoEInformationTransferProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: QoEInformationTransferProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct QoEInformationTransferProtocolIEs(pub Vec<QoEInformationTransferProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct QoEMetricsIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct QoEMetricsIE_Extensions(pub Vec<QoEMetricsIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct QoS_Characteristics_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum QoSFlowLevelQoSParametersReflective_QoS_Attribute {
    SUBJECT_TO,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum QoSFlowLevelQoSParametersIE_Extensions_EntryExtensionValue {
    #[asn(key = 436)]
    Id_PDCPTerminatingNodeDLTNLAddrInfo(TransportLayerAddress),
    #[asn(key = 180)]
    Id_PDUSessionID(PDUSessionID),
    #[asn(key = 257)]
    Id_QosMonitoringRequest(QosMonitoringRequest),
    #[asn(key = 181)]
    Id_ULPDUSessionAggregateMaximumBitRate(BitRate),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct QoSFlowLevelQoSParametersIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: QoSFlowLevelQoSParametersIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct QoSFlowLevelQoSParametersIE_Extensions(
    pub Vec<QoSFlowLevelQoSParametersIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum QoSInformation_choice_extensionValue {
    #[asn(key = 164)]
    Id_DRB_Information(DRB_Information),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct QoSInformation_choice_extension {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: QoSInformation_choice_extensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RACHReportInformationItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RACHReportInformationItemIE_Extensions(
    pub Vec<RACHReportInformationItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "40", sz_ub = "40")]
pub struct RANUEPagingIdentityIRNTI(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RANUEPagingIdentityIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RANUEPagingIdentityIE_Extensions(pub Vec<RANUEPagingIdentityIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RAT_FrequencyPriorityInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "8")]
pub struct RBSetConfigurationNUmberRBsets(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RBSetConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RBSetConfigurationIE_Extensions(pub Vec<RBSetConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RLC_StatusIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RLC_StatusIE_Extensions(pub Vec<RLC_StatusIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RLCDuplicationInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RLCDuplicationInformationIE_Extensions(
    pub Vec<RLCDuplicationInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RLCDuplicationState_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RLCDuplicationState_ItemIE_Extensions(
    pub Vec<RLCDuplicationState_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RLCFailureIndicationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RLCFailureIndicationIE_Extensions(pub Vec<RLCFailureIndicationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RLFReportInformationItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RLFReportInformationItemIE_Extensions(
    pub Vec<RLFReportInformationItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "3", sz_ub = "3")]
pub struct RRC_VersionLatest_RRC_Version(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum RRC_VersionIE_Extensions_EntryExtensionValue {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RRC_VersionIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: RRC_VersionIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RRC_VersionIE_Extensions(pub Vec<RRC_VersionIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum RRCDeliveryReportProtocolIEs_EntryValue {
    #[asn(key = 185)]
    Id_RRCDeliveryStatus(RRCDeliveryStatus),
    #[asn(key = 64)]
    Id_SRBID(SRBID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RRCDeliveryReportProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: RRCDeliveryReportProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct RRCDeliveryReportProtocolIEs(pub Vec<RRCDeliveryReportProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RRCDeliveryStatusIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RRCDeliveryStatusIE_Extensions(pub Vec<RRCDeliveryStatusIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum RadioResourceStatusIE_Extensions_EntryExtensionValue {
    #[asn(key = 450)]
    Id_MIMOPRBusageInformation(MIMOPRBusageInformation),
    #[asn(key = 441)]
    Id_SliceRadioResourceStatus(SliceRadioResourceStatus),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RadioResourceStatusIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: RadioResourceStatusIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RadioResourceStatusIE_Extensions(pub Vec<RadioResourceStatusIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ReferencePoint_choice_Extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ReferenceSignal_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ReferenceTimeInformationReportProtocolIEs_EntryValue {
    #[asn(key = 366)]
    Id_TimeReferenceInformation(TimeReferenceInformation),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ReferenceTimeInformationReportProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ReferenceTimeInformationReportProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ReferenceTimeInformationReportProtocolIEs(
    pub Vec<ReferenceTimeInformationReportProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ReferenceTimeInformationReportingControlProtocolIEs_EntryValue {
    #[asn(key = 365)]
    Id_ReportingRequestType(ReportingRequestType),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ReferenceTimeInformationReportingControlProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ReferenceTimeInformationReportingControlProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ReferenceTimeInformationReportingControlProtocolIEs(
    pub Vec<ReferenceTimeInformationReportingControlProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum RelativeCartesianLocationXYZunit {
    MM,
    CM,
    DM,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-65536", ub = "65535")]
pub struct RelativeCartesianLocationXvalue(pub i32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-65536", ub = "65535")]
pub struct RelativeCartesianLocationYvalue(pub i32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-32768", ub = "32767")]
pub struct RelativeCartesianLocationZvalue(pub i16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RelativeCartesianLocationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RelativeCartesianLocationIE_Extensions(
    pub Vec<RelativeCartesianLocationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum RelativeGeodeticLocationMilli_Arc_SecondUnits {
    ZERODOT03,
    ZERODOT3,
    THREE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum RelativeGeodeticLocationHeightUnits {
    MM,
    CM,
    M,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-1024", ub = "1023")]
pub struct RelativeGeodeticLocationDeltaLatitude(pub i16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-1024", ub = "1023")]
pub struct RelativeGeodeticLocationDeltaLongitude(pub i16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-1024", ub = "1023")]
pub struct RelativeGeodeticLocationDeltaHeight(pub i16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RelativeGeodeticLocationIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RelativeGeodeticLocationIE_extensions(
    pub Vec<RelativeGeodeticLocationIE_extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "16351")]
pub struct RelativePathDelay_k0(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "8176")]
pub struct RelativePathDelay_k1(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "4088")]
pub struct RelativePathDelay_k2(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "2044")]
pub struct RelativePathDelay_k3(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1022")]
pub struct RelativePathDelay_k4(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "511")]
pub struct RelativePathDelay_k5(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RelativePathDelay_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ReportingRequestTypeIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ReportingRequestTypeIE_Extensions(pub Vec<ReportingRequestTypeIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RequestedDLPRSResource_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RequestedDLPRSResource_ItemIE_Extensions(
    pub Vec<RequestedDLPRSResource_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "63")]
pub struct RequestedDLPRSResourceSet_ItemPRSbandwidth(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum RequestedDLPRSResourceSet_ItemCombSize {
    N2,
    N4,
    N6,
    N12,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "19")]
pub enum RequestedDLPRSResourceSet_ItemResourceSetPeriodicity {
    N4,
    N5,
    N8,
    N10,
    N16,
    N20,
    N32,
    N40,
    N64,
    N80,
    N160,
    N320,
    N640,
    N1280,
    N2560,
    N5120,
    N10240,
    N20480,
    N40960,
    N81920,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "6")]
pub enum RequestedDLPRSResourceSet_ItemResourceRepetitionFactor {
    RF1,
    RF2,
    RF4,
    RF6,
    RF8,
    RF16,
    RF32,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum RequestedDLPRSResourceSet_ItemResourceNumberofSymbols {
    N2,
    N4,
    N6,
    N12,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RequestedDLPRSResourceSet_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RequestedDLPRSResourceSet_ItemIE_Extensions(
    pub Vec<RequestedDLPRSResourceSet_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "4")]
pub struct RequestedDLPRSTransmissionCharacteristicsNumberofFrequencyLayers(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RequestedDLPRSTransmissionCharacteristicsIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RequestedDLPRSTransmissionCharacteristicsIE_Extensions(
    pub Vec<RequestedDLPRSTransmissionCharacteristicsIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "500", extensible = true)]
pub struct RequestedSRSTransmissionCharacteristicsNumberOfTransmissions(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum RequestedSRSTransmissionCharacteristicsResourceType {
    PERIODIC,
    SEMI_PERSISTENT,
    APERIODIC,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum RequestedSRSTransmissionCharacteristicsIE_Extensions_EntryExtensionValue {
    #[asn(key = 431)]
    Id_SrsFrequency(SrsFrequency),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RequestedSRSTransmissionCharacteristicsIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: RequestedSRSTransmissionCharacteristicsIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RequestedSRSTransmissionCharacteristicsIE_Extensions(
    pub Vec<RequestedSRSTransmissionCharacteristicsIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ResetProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 48)]
    Id_ResetType(ResetType),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResetProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ResetProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ResetProtocolIEs(pub Vec<ResetProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ResetAcknowledgeProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 81)]
    Id_UE_associatedLogicalF1_ConnectionListResAck(UE_associatedLogicalF1_ConnectionListResAck),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResetAcknowledgeProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ResetAcknowledgeProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ResetAcknowledgeProtocolIEs(pub Vec<ResetAcknowledgeProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResetType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ResourceCoordinationEUTRACellInfoIE_Extensions_EntryExtensionValue {
    #[asn(key = 233)]
    Id_IgnorePRACHConfiguration(IgnorePRACHConfiguration),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceCoordinationEUTRACellInfoIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: ResourceCoordinationEUTRACellInfoIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceCoordinationEUTRACellInfoIE_Extensions(
    pub Vec<ResourceCoordinationEUTRACellInfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceCoordinationTransferInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceCoordinationTransferInformationIE_Extensions(
    pub Vec<ResourceCoordinationTransferInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceSetType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "3")]
pub struct ResourceSetTypeAperiodicSRSResourceTrigger_List(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "32")]
pub struct ResourceSetTypeAperiodicSlotoffset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceSetTypeAperiodicIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceSetTypeAperiodicIE_Extensions(
    pub Vec<ResourceSetTypeAperiodicIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum ResourceSetTypePeriodicPeriodicSet {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceSetTypePeriodicIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceSetTypePeriodicIE_Extensions(
    pub Vec<ResourceSetTypePeriodicIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum ResourceSetTypeSemi_persistentSemi_persistentSet {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceSetTypeSemi_persistentIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceSetTypeSemi_persistentIE_Extensions(
    pub Vec<ResourceSetTypeSemi_persistentIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ResourceStatusFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 345)]
    Id_gNBCUMeasurementID(GNBCUMeasurementID),
    #[asn(key = 346)]
    Id_gNBDUMeasurementID(GNBDUMeasurementID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceStatusFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ResourceStatusFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ResourceStatusFailureProtocolIEs(pub Vec<ResourceStatusFailureProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ResourceStatusRequestProtocolIEs_EntryValue {
    #[asn(key = 349)]
    Id_CellToReportList(CellToReportList),
    #[asn(key = 347)]
    Id_RegistrationRequest(RegistrationRequest),
    #[asn(key = 348)]
    Id_ReportCharacteristics(ReportCharacteristics),
    #[asn(key = 352)]
    Id_ReportingPeriodicity(ReportingPeriodicity),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 345)]
    Id_gNBCUMeasurementID(GNBCUMeasurementID),
    #[asn(key = 346)]
    Id_gNBDUMeasurementID(GNBDUMeasurementID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceStatusRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ResourceStatusRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ResourceStatusRequestProtocolIEs(pub Vec<ResourceStatusRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ResourceStatusResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 345)]
    Id_gNBCUMeasurementID(GNBCUMeasurementID),
    #[asn(key = 346)]
    Id_gNBDUMeasurementID(GNBDUMeasurementID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceStatusResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ResourceStatusResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ResourceStatusResponseProtocolIEs(pub Vec<ResourceStatusResponseProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ResourceStatusUpdateProtocolIEs_EntryValue {
    #[asn(key = 350)]
    Id_CellMeasurementResultList(CellMeasurementResultList),
    #[asn(key = 351)]
    Id_HardwareLoadIndicator(HardwareLoadIndicator),
    #[asn(key = 353)]
    Id_TNLCapacityIndicator(TNLCapacityIndicator),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
    #[asn(key = 345)]
    Id_gNBCUMeasurementID(GNBCUMeasurementID),
    #[asn(key = 346)]
    Id_gNBDUMeasurementID(GNBDUMeasurementID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceStatusUpdateProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ResourceStatusUpdateProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ResourceStatusUpdateProtocolIEs(pub Vec<ResourceStatusUpdateProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum ResourceTypeAperiodicAperiodicResourceType {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceTypeAperiodicIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceTypeAperiodicIE_Extensions(pub Vec<ResourceTypeAperiodicIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "32")]
pub struct ResourceTypeAperiodicPosSlotOffset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceTypeAperiodicPosIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceTypeAperiodicPosIE_Extensions(
    pub Vec<ResourceTypeAperiodicPosIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "16")]
pub enum ResourceTypePeriodicPeriodicity {
    SLOT1,
    SLOT2,
    SLOT4,
    SLOT5,
    SLOT8,
    SLOT10,
    SLOT16,
    SLOT20,
    SLOT32,
    SLOT40,
    SLOT64,
    SLOT80,
    SLOT160,
    SLOT320,
    SLOT640,
    SLOT1280,
    SLOT2560,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "2559", extensible = true)]
pub struct ResourceTypePeriodicOffset(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceTypePeriodicIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceTypePeriodicIE_Extensions(pub Vec<ResourceTypePeriodicIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "20")]
pub enum ResourceTypePeriodicPosPeriodicity {
    SLOT1,
    SLOT2,
    SLOT4,
    SLOT5,
    SLOT8,
    SLOT10,
    SLOT16,
    SLOT20,
    SLOT32,
    SLOT40,
    SLOT64,
    SLOT80,
    SLOT160,
    SLOT320,
    SLOT640,
    SLOT1280,
    SLOT2560,
    SLOT5120,
    SLOT10240,
    SLOT40960,
    SLOT81920,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "81919", extensible = true)]
pub struct ResourceTypePeriodicPosOffset(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceTypePeriodicPosIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceTypePeriodicPosIE_Extensions(
    pub Vec<ResourceTypePeriodicPosIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceTypePos_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "16")]
pub enum ResourceTypeSemi_persistentPeriodicity {
    SLOT1,
    SLOT2,
    SLOT4,
    SLOT5,
    SLOT8,
    SLOT10,
    SLOT16,
    SLOT20,
    SLOT32,
    SLOT40,
    SLOT64,
    SLOT80,
    SLOT160,
    SLOT320,
    SLOT640,
    SLOT1280,
    SLOT2560,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "2559", extensible = true)]
pub struct ResourceTypeSemi_persistentOffset(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceTypeSemi_persistentIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceTypeSemi_persistentIE_Extensions(
    pub Vec<ResourceTypeSemi_persistentIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "20")]
pub enum ResourceTypeSemi_persistentPosPeriodicity {
    SLOT1,
    SLOT2,
    SLOT4,
    SLOT5,
    SLOT8,
    SLOT10,
    SLOT16,
    SLOT20,
    SLOT32,
    SLOT40,
    SLOT64,
    SLOT80,
    SLOT160,
    SLOT320,
    SLOT640,
    SLOT1280,
    SLOT2560,
    SLOT5120,
    SLOT10240,
    SLOT40960,
    SLOT81920,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "81919", extensible = true)]
pub struct ResourceTypeSemi_persistentPosOffset(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResourceTypeSemi_persistentPosIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResourceTypeSemi_persistentPosIE_Extensions(
    pub Vec<ResourceTypeSemi_persistentPosIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "128", extensible = true)]
pub struct ResponseTimeTime(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum ResponseTimeTimeUnit {
    SECOND,
    TEN_SECONDS,
    TEN_MILLISECONDS,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ResponseTimeIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ResponseTimeIE_Extensions(pub Vec<ResponseTimeIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "31")]
pub struct RxTEGTRP_Rx_TEGID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7")]
pub struct RxTEGTRP_Tx_TEGID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum RxTEGIE_Extensions_EntryExtensionValue {
    #[asn(key = 669)]
    Id_TRPRxTimingErrorMargin(TimingErrorMargin),
    #[asn(key = 668)]
    Id_TRPTxTimingErrorMargin(TimingErrorMargin),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RxTEGIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: RxTEGIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RxTEGIE_Extensions(pub Vec<RxTEGIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "255")]
pub struct RxTxTEGTRP_RxTx_TEGID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7")]
pub struct RxTxTEGTRP_Tx_TEGID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum RxTxTEGIE_Extensions_EntryExtensionValue {
    #[asn(key = 670)]
    Id_TRPRxTxTimingErrorMargin(TimingErrorMargin),
    #[asn(key = 668)]
    Id_TRPTxTimingErrorMargin(TimingErrorMargin),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct RxTxTEGIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: RxTxTEGIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct RxTxTEGIE_Extensions(pub Vec<RxTxTEGIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "2199", extensible = true)]
pub struct SCS_SpecificCarrierOffsetToCarrier(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum SCS_SpecificCarrierSubcarrierSpacing {
    K_HZ15,
    K_HZ30,
    K_HZ60,
    K_HZ120,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "275", extensible = true)]
pub struct SCS_SpecificCarrierCarrierBandwidth(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCS_SpecificCarrierIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SCS_SpecificCarrierIE_Extensions(pub Vec<SCS_SpecificCarrierIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_FailedtoSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SCell_FailedtoSetup_ItemIE_Extensions(
    pub Vec<SCell_FailedtoSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SCell_FailedtoSetup_List_EntryValue {
    #[asn(key = 84)]
    Id_SCell_FailedtoSetup_Item(SCell_FailedtoSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_FailedtoSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SCell_FailedtoSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_FailedtoSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SCell_FailedtoSetupMod_ItemIE_Extensions(
    pub Vec<SCell_FailedtoSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SCell_FailedtoSetupMod_List_EntryValue {
    #[asn(key = 86)]
    Id_SCell_FailedtoSetupMod_Item(SCell_FailedtoSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_FailedtoSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SCell_FailedtoSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_ToBeRemoved_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SCell_ToBeRemoved_ItemIE_Extensions(pub Vec<SCell_ToBeRemoved_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SCell_ToBeRemoved_List_EntryValue {
    #[asn(key = 51)]
    Id_SCell_ToBeRemoved_Item(SCell_ToBeRemoved_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_ToBeRemoved_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SCell_ToBeRemoved_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SCell_ToBeSetup_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 182)]
    Id_ServingCellMO(ServingCellMO),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_ToBeSetup_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SCell_ToBeSetup_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SCell_ToBeSetup_ItemIE_Extensions(pub Vec<SCell_ToBeSetup_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SCell_ToBeSetup_List_EntryValue {
    #[asn(key = 53)]
    Id_SCell_ToBeSetup_Item(SCell_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SCell_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SCell_ToBeSetupMod_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 182)]
    Id_ServingCellMO(ServingCellMO),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_ToBeSetupMod_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SCell_ToBeSetupMod_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SCell_ToBeSetupMod_ItemIE_Extensions(
    pub Vec<SCell_ToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SCell_ToBeSetupMod_List_EntryValue {
    #[asn(key = 55)]
    Id_SCell_ToBeSetupMod_Item(SCell_ToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SCell_ToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SCell_ToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SDTBearerConfig_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SDTBearerConfig_List_ItemIE_Extensions(
    pub Vec<SDTBearerConfig_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SDTBearerConfigurationInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SDTBearerConfigurationInfoIE_Extensions(
    pub Vec<SDTBearerConfigurationInfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SDTBearerType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum SDTInformationSdtIndicator {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "1")]
pub enum SDTInformationSdtAssistantInformation {
    SINGLEPACKET,
    MULTIPLEPACKETS,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SDTInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SDTInformationIE_Extensions(pub Vec<SDTInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "24", sz_ub = "24")]
pub struct SFN_OffsetSFN_Time_Offset(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SFN_OffsetIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SFN_OffsetIE_Extensions(pub Vec<SFN_OffsetIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SItype_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SItype_ItemIE_Extensions(pub Vec<SItype_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_FailedToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_FailedToBeModified_ItemIE_Extensions(
    pub Vec<SLDRBs_FailedToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_FailedToBeModified_List_EntryValue {
    #[asn(key = 313)]
    Id_SLDRBs_FailedToBeModified_Item(SLDRBs_FailedToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_FailedToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_FailedToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_FailedToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_FailedToBeSetup_ItemIE_Extensions(
    pub Vec<SLDRBs_FailedToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_FailedToBeSetup_List_EntryValue {
    #[asn(key = 315)]
    Id_SLDRBs_FailedToBeSetup_Item(SLDRBs_FailedToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_FailedToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_FailedToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_FailedToBeSetupMod_ItemIE_Extensions(
    pub Vec<SLDRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_FailedToBeSetupMod_List_EntryValue {
    #[asn(key = 336)]
    Id_SLDRBs_FailedToBeSetupMod_Item(SLDRBs_FailedToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_FailedToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_FailedToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_Modified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_Modified_ItemIE_Extensions(pub Vec<SLDRBs_Modified_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_Modified_List_EntryValue {
    #[asn(key = 317)]
    Id_SLDRBs_Modified_Item(SLDRBs_Modified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_Modified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_Modified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ModifiedConf_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_ModifiedConf_ItemIE_Extensions(
    pub Vec<SLDRBs_ModifiedConf_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_ModifiedConf_List_EntryValue {
    #[asn(key = 338)]
    Id_SLDRBs_ModifiedConf_Item(SLDRBs_ModifiedConf_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ModifiedConf_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_ModifiedConf_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_Required_ToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_Required_ToBeModified_ItemIE_Extensions(
    pub Vec<SLDRBs_Required_ToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_Required_ToBeModified_List_EntryValue {
    #[asn(key = 319)]
    Id_SLDRBs_Required_ToBeModified_Item(SLDRBs_Required_ToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_Required_ToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_Required_ToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_Required_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_Required_ToBeReleased_ItemIE_Extensions(
    pub Vec<SLDRBs_Required_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_Required_ToBeReleased_List_EntryValue {
    #[asn(key = 321)]
    Id_SLDRBs_Required_ToBeReleased_Item(SLDRBs_Required_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_Required_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_Required_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_Setup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_Setup_ItemIE_Extensions(pub Vec<SLDRBs_Setup_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_Setup_List_EntryValue {
    #[asn(key = 323)]
    Id_SLDRBs_Setup_Item(SLDRBs_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_SetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_SetupMod_ItemIE_Extensions(pub Vec<SLDRBs_SetupMod_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_SetupMod_List_EntryValue {
    #[asn(key = 335)]
    Id_SLDRBs_SetupMod_Item(SLDRBs_SetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_SetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_SetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_ToBeModified_ItemIE_Extensions(
    pub Vec<SLDRBs_ToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_ToBeModified_List_EntryValue {
    #[asn(key = 325)]
    Id_SLDRBs_ToBeModified_Item(SLDRBs_ToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_ToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_ToBeReleased_ItemIE_Extensions(
    pub Vec<SLDRBs_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_ToBeReleased_List_EntryValue {
    #[asn(key = 327)]
    Id_SLDRBs_ToBeReleased_Item(SLDRBs_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_ToBeSetup_ItemIE_Extensions(pub Vec<SLDRBs_ToBeSetup_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_ToBeSetup_List_EntryValue {
    #[asn(key = 329)]
    Id_SLDRBs_ToBeSetup_Item(SLDRBs_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRBs_ToBeSetupMod_ItemIE_Extensions(
    pub Vec<SLDRBs_ToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SLDRBs_ToBeSetupMod_List_EntryValue {
    #[asn(key = 331)]
    Id_SLDRBs_ToBeSetupMod_Item(SLDRBs_ToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRBs_ToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SLDRBs_ToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "24", sz_ub = "24")]
pub struct SLDRXCycleItemRXUEID(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRXCycleItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SLDRXCycleItemIE_Extensions(pub Vec<SLDRXCycleItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SLDRXInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "1", sz_ub = "1")]
pub struct SNSSAISST(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING", sz_extensible = false, sz_lb = "3", sz_ub = "3")]
pub struct SNSSAISD(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SNSSAIIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SNSSAIIE_Extensions(pub Vec<SNSSAIIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SNSSAI_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SNSSAI_ItemIE_Extensions(pub Vec<SNSSAI_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SNSSAIAvailableCapacity_ItemSliceAvailableCapacityValueDownlink(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SNSSAIAvailableCapacity_ItemSliceAvailableCapacityValueUplink(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SNSSAIAvailableCapacity_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SNSSAIAvailableCapacity_ItemIE_Extensions(
    pub Vec<SNSSAIAvailableCapacity_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SNSSAIRadioResourceStatus_ItemSNSSAIdlGBRPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SNSSAIRadioResourceStatus_ItemSNSSAIulGBRPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SNSSAIRadioResourceStatus_ItemSNSSAIdlNonGBRPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SNSSAIRadioResourceStatus_ItemSNSSAIulNonGBRPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SNSSAIRadioResourceStatus_ItemSNSSAIdlTotalPRBallocation(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SNSSAIRadioResourceStatus_ItemSNSSAIulTotalPRBallocation(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SNSSAIRadioResourceStatus_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SNSSAIRadioResourceStatus_ItemIE_Extensions(
    pub Vec<SNSSAIRadioResourceStatus_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_FailedToBeSetup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_FailedToBeSetup_ItemIE_Extensions(
    pub Vec<SRBs_FailedToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_FailedToBeSetup_List_EntryValue {
    #[asn(key = 65)]
    Id_SRBs_FailedToBeSetup_Item(SRBs_FailedToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_FailedToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_FailedToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_FailedToBeSetupMod_ItemIE_Extensions(
    pub Vec<SRBs_FailedToBeSetupMod_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_FailedToBeSetupMod_List_EntryValue {
    #[asn(key = 67)]
    Id_SRBs_FailedToBeSetupMod_Item(SRBs_FailedToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_FailedToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_FailedToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_Modified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_Modified_ItemIE_Extensions(pub Vec<SRBs_Modified_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_Modified_List_EntryValue {
    #[asn(key = 207)]
    Id_SRBs_Modified_Item(SRBs_Modified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_Modified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_Modified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_Required_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_Required_ToBeReleased_ItemIE_Extensions(
    pub Vec<SRBs_Required_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_Required_ToBeReleased_List_EntryValue {
    #[asn(key = 69)]
    Id_SRBs_Required_ToBeReleased_Item(SRBs_Required_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_Required_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_Required_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_Setup_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_Setup_ItemIE_Extensions(pub Vec<SRBs_Setup_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_Setup_List_EntryValue {
    #[asn(key = 203)]
    Id_SRBs_Setup_Item(SRBs_Setup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_Setup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_Setup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_SetupMod_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_SetupMod_ItemIE_Extensions(pub Vec<SRBs_SetupMod_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_SetupMod_List_EntryValue {
    #[asn(key = 205)]
    Id_SRBs_SetupMod_Item(SRBs_SetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_SetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_SetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_ToBeReleased_ItemIE_Extensions(pub Vec<SRBs_ToBeReleased_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_ToBeReleased_List_EntryValue {
    #[asn(key = 71)]
    Id_SRBs_ToBeReleased_Item(SRBs_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_ToBeSetup_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 372)]
    Id_AdditionalDuplicationIndication(AdditionalDuplicationIndication),
    #[asn(key = 593)]
    Id_SDTRLCBearerConfiguration(SDTRLCBearerConfiguration),
    #[asn(key = 597)]
    Id_SRBMappingInfo(UuRLCChannelID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_ToBeSetup_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SRBs_ToBeSetup_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_ToBeSetup_ItemIE_Extensions(pub Vec<SRBs_ToBeSetup_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_ToBeSetup_List_EntryValue {
    #[asn(key = 73)]
    Id_SRBs_ToBeSetup_Item(SRBs_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_ToBeSetupMod_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 372)]
    Id_AdditionalDuplicationIndication(AdditionalDuplicationIndication),
    #[asn(key = 589)]
    Id_CG_SDTindicatorSetup(CG_SDTindicatorSetup),
    #[asn(key = 597)]
    Id_SRBMappingInfo(UuRLCChannelID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_ToBeSetupMod_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SRBs_ToBeSetupMod_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRBs_ToBeSetupMod_ItemIE_Extensions(pub Vec<SRBs_ToBeSetupMod_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRBs_ToBeSetupMod_List_EntryValue {
    #[asn(key = 75)]
    Id_SRBs_ToBeSetupMod_Item(SRBs_ToBeSetupMod_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRBs_ToBeSetupMod_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SRBs_ToBeSetupMod_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct SRSCarrier_List_ItemPointA(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSCarrier_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRSCarrier_List_ItemIE_Extensions(pub Vec<SRSCarrier_List_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSConfigIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRSConfigIE_Extensions(pub Vec<SRSConfigIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRSConfigurationIE_Extensions(pub Vec<SRSConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum SRSResourceNrofSRS_Ports {
    PORT1,
    PORTS2,
    PORTS4,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "13")]
pub struct SRSResourceStartPosition(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum SRSResourceNrofSymbols {
    N1,
    N2,
    N4,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum SRSResourceRepetitionFactor {
    N1,
    N2,
    N4,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "67")]
pub struct SRSResourceFreqDomainPosition(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "268")]
pub struct SRSResourceFreqDomainShift(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct SRSResourceC_SRS(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3")]
pub struct SRSResourceB_SRS(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3")]
pub struct SRSResourceB_hop(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "2")]
pub enum SRSResourceGroupOrSequenceHopping {
    NEITHER,
    GROUP_HOPPING,
    SEQUENCE_HOPPING,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1023")]
pub struct SRSResourceSequenceId(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSResourceIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRSResourceIE_Extensions(pub Vec<SRSResourceIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSResourceSetIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRSResourceSetIE_Extensions(pub Vec<SRSResourceSetIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "16", extensible = true)]
pub struct SRSResourceSetItemNumSRSresourcesperset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRSResourceSetItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 435)]
    Id_SRSSpatialRelationPerSRSResource(SpatialRelationPerSRSResource),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSResourceSetItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SRSResourceSetItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRSResourceSetItemIE_Extensions(pub Vec<SRSResourceSetItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSResourceTriggerIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRSResourceTriggerIE_Extensions(pub Vec<SRSResourceTriggerIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSResourceTypeChoice_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SRSResourcetypeIE_Extensions_EntryExtensionValue {
    #[asn(key = 663)]
    Id_SRSPortIndex(SRSPortIndex),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSResourcetypeIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SRSResourcetypeIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SRSResourcetypeIE_Extensions(pub Vec<SRSResourcetypeIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SRSType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSBIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SSBIE_Extensions(pub Vec<SSBIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "4", sz_ub = "4")]
pub struct SSB_PositionsInBurst_shortBitmap(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct SSB_PositionsInBurst_mediumBitmap(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "64", sz_ub = "64")]
pub struct SSB_PositionsInBurst_longBitmap(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSB_PositionsInBurst_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct SSB_TF_ConfigurationSSB_frequency(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "4")]
pub enum SSB_TF_ConfigurationSSB_subcarrier_spacing {
    K_HZ15,
    K_HZ30,
    K_HZ60,
    K_HZ120,
    K_HZ240,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-60", ub = "50")]
pub struct SSB_TF_ConfigurationSSB_Transmit_power(pub i8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "5")]
pub enum SSB_TF_ConfigurationSSB_periodicity {
    MS5,
    MS10,
    MS20,
    MS40,
    MS80,
    MS160,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1")]
pub struct SSB_TF_ConfigurationSSB_half_frame_offset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "15")]
pub struct SSB_TF_ConfigurationSSB_SFN_offset(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSB_TF_ConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SSB_TF_ConfigurationIE_Extensions(pub Vec<SSB_TF_ConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "4", sz_ub = "4")]
pub struct SSB_transmissionBitmap_shortBitmap(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "8", sz_ub = "8")]
pub struct SSB_transmissionBitmap_mediumBitmap(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "64", sz_ub = "64")]
pub struct SSB_transmissionBitmap_longBitmap(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSB_transmissionBitmap_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct SSBAreaCapacityValueItemSSBIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaCapacityValueItemSSBAreaCapacityValue(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSBAreaCapacityValueItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SSBAreaCapacityValueItemIE_Extensions(
    pub Vec<SSBAreaCapacityValueItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct SSBAreaRadioResourceStatusItemSSBIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaRadioResourceStatusItemSSBAreaDLGBRPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaRadioResourceStatusItemSSBAreaULGBRPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaRadioResourceStatusItemSSBAreaDLnon_GBRPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaRadioResourceStatusItemSSBAreaULnon_GBRPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaRadioResourceStatusItemSSBAreaDLTotalPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaRadioResourceStatusItemSSBAreaULTotalPRBusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaRadioResourceStatusItemDLschedulingPDCCHCCEusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100")]
pub struct SSBAreaRadioResourceStatusItemULschedulingPDCCHCCEusage(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSBAreaRadioResourceStatusItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SSBAreaRadioResourceStatusItemIE_Extensions(
    pub Vec<SSBAreaRadioResourceStatusItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct SSBCoverageModification_ItemSSBIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSBCoverageModification_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SSBCoverageModification_ItemIE_Extensions(
    pub Vec<SSBCoverageModification_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSBInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SSBInformationIE_Extensions(pub Vec<SSBInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSBInformationItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SSBInformationItemIE_Extensions(pub Vec<SSBInformationItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "63")]
pub struct SSBToReportItemSSBIndex(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SSBToReportItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SSBToReportItemIE_Extensions(pub Vec<SSBToReportItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct SUL_InformationSUL_NRARFCN(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SUL_InformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 354)]
    Id_CarrierList(NRCarrierList),
    #[asn(key = 356)]
    Id_FrequencyShift7p5khz(FrequencyShift7p5khz),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SUL_InformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SUL_InformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SUL_InformationIE_Extensions(pub Vec<SUL_InformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "-3841", ub = "3841", extensible = true)]
pub struct Search_window_informationExpectedPropagationDelay(pub i16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "246", extensible = true)]
pub struct Search_window_informationDelayUncertainty(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Search_window_informationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Search_window_informationIE_Extensions(
    pub Vec<Search_window_informationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SemipersistentSRSIE_Extensions_EntryExtensionValue {
    #[asn(key = 435)]
    Id_SRSSpatialRelationPerSRSResource(SpatialRelationPerSRSResource),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SemipersistentSRSIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SemipersistentSRSIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SemipersistentSRSIE_Extensions(pub Vec<SemipersistentSRSIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct Served_Cell_InformationMeasurementTimingConfiguration(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Served_Cell_InformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 251)]
    Id_AggressorgNBSetID(AggressorgNBSetID),
    #[asn(key = 223)]
    Id_BPLMN_ID_Info_List(BPLMN_ID_Info_List),
    #[asn(key = 201)]
    Id_Cell_Direction(Cell_Direction),
    #[asn(key = 232)]
    Id_Cell_Type(CellType),
    #[asn(key = 425)]
    Id_ConfiguredTACIndication(ConfiguredTACIndication),
    #[asn(key = 196)]
    Id_ExtendedServedPLMNs_List(ExtendedServedPLMNs_List),
    #[asn(key = 290)]
    Id_IAB_Info_IAB_DU(IAB_Info_IAB_DU),
    #[asn(key = 383)]
    Id_NPNBroadcastInformation(NPNBroadcastInformation),
    #[asn(key = 358)]
    Id_NRPRACHConfig(NRPRACHConfig),
    #[asn(key = 139)]
    Id_RANAC(RANAC),
    #[asn(key = 579)]
    Id_Redcap_Bcast_Information(Redcap_Bcast_Information),
    #[asn(key = 429)]
    Id_SFN_Offset(SFN_Offset),
    #[asn(key = 357)]
    Id_SSB_PositionsInBurst(SSB_PositionsInBurst),
    #[asn(key = 478)]
    Id_Supported_MBS_FSA_ID_List(Supported_MBS_FSA_ID_List),
    #[asn(key = 252)]
    Id_VictimgNBSetID(VictimgNBSetID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Served_Cell_InformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: Served_Cell_InformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Served_Cell_InformationIE_Extensions(
    pub Vec<Served_Cell_InformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Served_Cells_To_Add_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Served_Cells_To_Add_ItemIE_Extensions(
    pub Vec<Served_Cells_To_Add_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Served_Cells_To_Add_List_EntryValue {
    #[asn(key = 57)]
    Id_Served_Cells_To_Add_Item(Served_Cells_To_Add_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Served_Cells_To_Add_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Served_Cells_To_Add_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Served_Cells_To_Delete_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Served_Cells_To_Delete_ItemIE_Extensions(
    pub Vec<Served_Cells_To_Delete_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Served_Cells_To_Delete_List_EntryValue {
    #[asn(key = 59)]
    Id_Served_Cells_To_Delete_Item(Served_Cells_To_Delete_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Served_Cells_To_Delete_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Served_Cells_To_Delete_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Served_Cells_To_Modify_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Served_Cells_To_Modify_ItemIE_Extensions(
    pub Vec<Served_Cells_To_Modify_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum Served_Cells_To_Modify_List_EntryValue {
    #[asn(key = 61)]
    Id_Served_Cells_To_Modify_Item(Served_Cells_To_Modify_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Served_Cells_To_Modify_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: Served_Cells_To_Modify_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Served_EUTRA_Cells_InformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Served_EUTRA_Cells_InformationIE_Extensions(
    pub Vec<Served_EUTRA_Cells_InformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ServedPLMNs_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 390)]
    Id_ExtendedTAISliceSupportList(ExtendedSliceSupportList),
    #[asn(key = 384)]
    Id_NPNSupportInfo(NPNSupportInfo),
    #[asn(key = 644)]
    Id_TAINSAGSupportList(NSAGSupportList),
    #[asn(key = 131)]
    Id_TAISliceSupportList(SliceSupportList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ServedPLMNs_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: ServedPLMNs_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ServedPLMNs_ItemIE_Extensions(pub Vec<ServedPLMNs_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum Service_StatusSwitchingOffOngoing {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Service_StatusIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Service_StatusIE_Extensions(pub Vec<Service_StatusIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Serving_Cells_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Serving_Cells_List_ItemIE_Extensions(
    pub Vec<Serving_Cells_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "2", ub = "32", extensible = true)]
pub struct SibtypetobeupdatedListItemSIBtype(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SibtypetobeupdatedListItemSIBmessage(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "31", extensible = true)]
pub struct SibtypetobeupdatedListItemValueTag(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SibtypetobeupdatedListItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 240)]
    Id_areaScope(AreaScope),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SibtypetobeupdatedListItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: SibtypetobeupdatedListItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SibtypetobeupdatedListItemIE_Extensions(
    pub Vec<SibtypetobeupdatedListItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SidelinkRelayConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SidelinkRelayConfigurationIE_Extensions(
    pub Vec<SidelinkRelayConfigurationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SliceAvailableCapacityIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SliceAvailableCapacityIE_Extensions(pub Vec<SliceAvailableCapacityIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SliceAvailableCapacityItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SliceAvailableCapacityItemIE_Extensions(
    pub Vec<SliceAvailableCapacityItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SliceRadioResourceStatusIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SliceRadioResourceStatusIE_Extensions(
    pub Vec<SliceRadioResourceStatusIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SliceRadioResourceStatus_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SliceRadioResourceStatus_ItemIE_Extensions(
    pub Vec<SliceRadioResourceStatus_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SliceSupportItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SliceSupportItemIE_Extensions(pub Vec<SliceSupportItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SliceToReportItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SliceToReportItemIE_Extensions(pub Vec<SliceToReportItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "5119", extensible = true)]
pub struct Slot_Configuration_ItemSlotIndex(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Slot_Configuration_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Slot_Configuration_ItemIE_Extensions(
    pub Vec<Slot_Configuration_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SpatialDirectionInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SpatialDirectionInformationIE_Extensions(
    pub Vec<SpatialDirectionInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SpatialRelationInfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SpatialRelationInfoIE_Extensions(pub Vec<SpatialRelationInfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SpatialRelationPerSRSResourceIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SpatialRelationPerSRSResourceIE_Extensions(
    pub Vec<SpatialRelationPerSRSResourceIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SpatialRelationPerSRSResourceItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SpatialRelationPerSRSResourceItemIE_Extensions(
    pub Vec<SpatialRelationPerSRSResourceItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SpatialRelationPos_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SpatialRelationforResourceIDItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SpatialRelationforResourceIDItemIE_Extensions(
    pub Vec<SpatialRelationforResourceIDItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "90060", extensible = true)]
pub struct StartTimeAndDurationDuration(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct StartTimeAndDurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct StartTimeAndDurationIE_Extensions(pub Vec<StartTimeAndDurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OCTET-STRING")]
pub struct SuccessfulHOReportInformation_ItemSuccessfulHOReportContainer(pub Vec<u8>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SuccessfulHOReportInformation_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SuccessfulHOReportInformation_ItemIE_Extensions(
    pub Vec<SuccessfulHOReportInformation_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SuccessfulOutcomeValue {
    #[asn(key = 32)]
    Id_BAPMappingConfiguration(BAPMappingConfigurationAcknowledge),
    #[asn(key = 62)]
    Id_BroadcastContextModification(BroadcastContextModificationResponse),
    #[asn(key = 60)]
    Id_BroadcastContextRelease(BroadcastContextReleaseComplete),
    #[asn(key = 59)]
    Id_BroadcastContextSetup(BroadcastContextSetupResponse),
    #[asn(key = 52)]
    Id_E_CIDMeasurementInitiation(E_CIDMeasurementInitiationResponse),
    #[asn(key = 26)]
    Id_F1Removal(F1RemovalResponse),
    #[asn(key = 1)]
    Id_F1Setup(F1SetupResponse),
    #[asn(key = 33)]
    Id_GNBDUResourceConfiguration(GNBDUResourceConfigurationAcknowledge),
    #[asn(key = 16)]
    Id_GNBDUResourceCoordination(GNBDUResourceCoordinationResponse),
    #[asn(key = 34)]
    Id_IABTNLAddressAllocation(IABTNLAddressResponse),
    #[asn(key = 35)]
    Id_IABUPConfigurationUpdate(IABUPConfigurationUpdateResponse),
    #[asn(key = 67)]
    Id_MulticastContextModification(MulticastContextModificationResponse),
    #[asn(key = 65)]
    Id_MulticastContextRelease(MulticastContextReleaseComplete),
    #[asn(key = 64)]
    Id_MulticastContextSetup(MulticastContextSetupResponse),
    #[asn(key = 69)]
    Id_MulticastDistributionRelease(MulticastDistributionReleaseComplete),
    #[asn(key = 68)]
    Id_MulticastDistributionSetup(MulticastDistributionSetupResponse),
    #[asn(key = 70)]
    Id_PDCMeasurementInitiation(PDCMeasurementInitiationResponse),
    #[asn(key = 21)]
    Id_PWSCancel(PWSCancelResponse),
    #[asn(key = 50)]
    Id_PositioningActivation(PositioningActivationResponse),
    #[asn(key = 49)]
    Id_PositioningInformationExchange(PositioningInformationResponse),
    #[asn(key = 41)]
    Id_PositioningMeasurementExchange(PositioningMeasurementResponse),
    #[asn(key = 0)]
    Id_Reset(ResetAcknowledge),
    #[asn(key = 48)]
    Id_TRPInformationExchange(TRPInformationResponse),
    #[asn(key = 7)]
    Id_UEContextModification(UEContextModificationResponse),
    #[asn(key = 8)]
    Id_UEContextModificationRequired(UEContextModificationConfirm),
    #[asn(key = 6)]
    Id_UEContextRelease(UEContextReleaseComplete),
    #[asn(key = 5)]
    Id_UEContextSetup(UEContextSetupResponse),
    #[asn(key = 20)]
    Id_WriteReplaceWarning(WriteReplaceWarningResponse),
    #[asn(key = 4)]
    Id_gNBCUConfigurationUpdate(GNBCUConfigurationUpdateAcknowledge),
    #[asn(key = 3)]
    Id_gNBDUConfigurationUpdate(GNBDUConfigurationUpdateAcknowledge),
    #[asn(key = 76)]
    Id_measurementPreconfiguration(MeasurementPreconfigurationConfirm),
    #[asn(key = 75)]
    Id_pRSConfigurationExchange(PRSConfigurationResponse),
    #[asn(key = 36)]
    Id_resourceStatusReportingInitiation(ResourceStatusResponse),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "1024", extensible = true)]
pub struct SupportedSULFreqBandItemFreqBandIndicatorNr(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SupportedSULFreqBandItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct SupportedSULFreqBandItemIE_Extensions(
    pub Vec<SupportedSULFreqBandItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "NULL")]
pub struct SymbolAllocInSlot_all_DL;

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "NULL")]
pub struct SymbolAllocInSlot_all_UL;

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SymbolAllocInSlot_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum SystemInformationDeliveryCommandProtocolIEs_EntryValue {
    #[asn(key = 156)]
    Id_ConfirmedUEID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 111)]
    Id_NRCGI(NRCGI),
    #[asn(key = 116)]
    Id_SItype_List(SItype_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct SystemInformationDeliveryCommandProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: SystemInformationDeliveryCommandProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct SystemInformationDeliveryCommandProtocolIEs(
    pub Vec<SystemInformationDeliveryCommandProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TDD_InfoIE_Extensions_EntryExtensionValue {
    #[asn(key = 354)]
    Id_CarrierList(NRCarrierList),
    #[asn(key = 256)]
    Id_IntendedTDD_DL_ULConfig(IntendedTDD_DL_ULConfig),
    #[asn(key = 361)]
    Id_TDD_UL_DLConfigCommonNR(TDD_UL_DLConfigCommonNR),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TDD_InfoIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: TDD_InfoIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TDD_InfoIE_Extensions(pub Vec<TDD_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TDD_InfoRel16IE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TDD_InfoRel16IE_Extensions(pub Vec<TDD_InfoRel16IE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "16777216", extensible = true)]
pub struct TNLCapacityIndicatorDLTNLOfferedCapacity(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100", extensible = true)]
pub struct TNLCapacityIndicatorDLTNLAvailableCapacity(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "1", ub = "16777216", extensible = true)]
pub struct TNLCapacityIndicatorULTNLOfferedCapacity(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "100", extensible = true)]
pub struct TNLCapacityIndicatorULTNLAvailableCapacity(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TNLCapacityIndicatorIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TNLCapacityIndicatorIE_Extensions(pub Vec<TNLCapacityIndicatorIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "30")]
pub struct TRP_Beam_Power_ItemRelativePower(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct TRP_Beam_Power_ItemRelativePowerFine(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRP_Beam_Power_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRP_Beam_Power_ItemIE_Extensions(pub Vec<TRP_Beam_Power_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "359")]
pub struct TRP_BeamAntennaAnglesList_ItemTrp_azimuth_angle(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct TRP_BeamAntennaAnglesList_ItemTrp_azimuth_angle_fine(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "1801"
)]
pub struct TRP_BeamAntennaAnglesList_ItemTrp_elevation_angle_list(
    pub Vec<TRP_ElevationAngleList_Item>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRP_BeamAntennaAnglesList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRP_BeamAntennaAnglesList_ItemIE_Extensions(
    pub Vec<TRP_BeamAntennaAnglesList_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRP_BeamAntennaExplicitInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRP_BeamAntennaExplicitInformationIE_Extensions(
    pub Vec<TRP_BeamAntennaExplicitInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "180")]
pub struct TRP_ElevationAngleList_ItemTrp_elevation_angle(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct TRP_ElevationAngleList_ItemTrp_elevation_angle_fine(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "2", sz_ub = "24")]
pub struct TRP_ElevationAngleList_ItemTrp_beam_power_list(pub Vec<TRP_Beam_Power_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRP_ElevationAngleList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRP_ElevationAngleList_ItemIE_Extensions(
    pub Vec<TRP_ElevationAngleList_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRP_MeasurementRequestItemIE_extensions_EntryExtensionValue {
    #[asn(key = 552)]
    Id_AoA_SearchWindow(AoA_AssistanceInfo),
    #[asn(key = 111)]
    Id_NRCGI(NRCGI),
    #[asn(key = 564)]
    Id_NumberOfTRPRxTEG(NumberOfTRPRxTEG),
    #[asn(key = 565)]
    Id_NumberOfTRPRxTxTEG(NumberOfTRPRxTxTEG),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRP_MeasurementRequestItemIE_extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: TRP_MeasurementRequestItemIE_extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRP_MeasurementRequestItemIE_extensions(
    pub Vec<TRP_MeasurementRequestItemIE_extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRP_MeasurementUpdateItemIE_extensions_EntryExtensionValue {
    #[asn(key = 564)]
    Id_NumberOfTRPRxTEG(NumberOfTRPRxTEG),
    #[asn(key = 565)]
    Id_NumberOfTRPRxTxTEG(NumberOfTRPRxTxTEG),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRP_MeasurementUpdateItemIE_extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: TRP_MeasurementUpdateItemIE_extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRP_MeasurementUpdateItemIE_extensions(
    pub Vec<TRP_MeasurementUpdateItemIE_extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRP_PRS_Info_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRP_PRS_Info_List_ItemIE_Extensions(pub Vec<TRP_PRS_Info_List_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPBeamAntennaInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPBeamAntennaInformationIE_Extensions(
    pub Vec<TRPBeamAntennaInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPInformationIE_Extensions(pub Vec<TRPInformationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRPInformationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPInformationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: TRPInformationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct TRPInformationFailureProtocolIEs(pub Vec<TRPInformationFailureProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPInformationItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPInformationItemIE_Extensions(pub Vec<TRPInformationItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRPInformationListTRPResp_EntryValue {
    #[asn(key = 401)]
    Id_TRPInformationItem(TRPInformationItem),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPInformationListTRPResp_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: TRPInformationListTRPResp_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRPInformationRequestProtocolIEs_EntryValue {
    #[asn(key = 398)]
    Id_TRPInformationTypeListTRPReq(TRPInformationTypeListTRPReq),
    #[asn(key = 410)]
    Id_TRPList(TRPList),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPInformationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: TRPInformationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct TRPInformationRequestProtocolIEs(pub Vec<TRPInformationRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRPInformationResponseProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 400)]
    Id_TRPInformationListTRPResp(TRPInformationListTRPResp),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPInformationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: TRPInformationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct TRPInformationResponseProtocolIEs(pub Vec<TRPInformationResponseProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRPInformationTypeListTRPReq_EntryValue {
    #[asn(key = 399)]
    Id_TRPInformationTypeItem(TRPInformationTypeItem),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPInformationTypeListTRPReq_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: TRPInformationTypeListTRPReq_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3279165")]
pub struct TRPInformationTypeResponseItem_nRARFCN(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRPInformationTypeResponseItem_choice_extensionValue {
    #[asn(key = 551)]
    Id_OnDemandPRS(OnDemandPRS_Info),
    #[asn(key = 577)]
    Id_TRPBeamAntennaInformation(TRPBeamAntennaInformation),
    #[asn(key = 566)]
    Id_TRPTxTEGAssociation(TRPTxTEGAssociation),
    #[asn(key = 434)]
    Id_TRPType(TRPType),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPInformationTypeResponseItem_choice_extension {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: TRPInformationTypeResponseItem_choice_extensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPListItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPListItemIE_Extensions(pub Vec<TRPListItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPMeasurementQualityIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPMeasurementQualityIE_Extensions(pub Vec<TRPMeasurementQualityIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPMeasurementQuality_Item_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPPositionDefinitionType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPPositionDirectIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPPositionDirectIE_extensions(pub Vec<TRPPositionDirectIE_extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPPositionDirectAccuracy_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPPositionReferencedIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPPositionReferencedIE_extensions(pub Vec<TRPPositionReferencedIE_extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPReferencePointType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7")]
pub struct TRPTEG_ItemTRP_Tx_TEG_ID(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE-OF", sz_extensible = false, sz_lb = "1", sz_ub = "64")]
pub struct TRPTEG_ItemDl_PRSResourceID_List(pub Vec<DLPRSResourceID_Item>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TRPTEG_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 668)]
    Id_TRPTxTimingErrorMargin(TimingErrorMargin),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPTEG_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: TRPTEG_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TRPTEG_ItemIE_Extensions(pub Vec<TRPTEG_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TRPTEGIDInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TSCAssistanceInformationIE_Extensions_EntryExtensionValue {
    #[asn(key = 540)]
    Id_SurvivalTime(SurvivalTime),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TSCAssistanceInformationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: TSCAssistanceInformationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TSCAssistanceInformationIE_Extensions(
    pub Vec<TSCAssistanceInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TSCTrafficCharacteristicsIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TSCTrafficCharacteristicsIE_Extensions(
    pub Vec<TSCTrafficCharacteristicsIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TargetCellList_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TargetCellList_ItemIE_Extensions(pub Vec<TargetCellList_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TimeReferenceInformationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TimeReferenceInformationIE_Extensions(
    pub Vec<TimeReferenceInformationIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TimeStampIE_Extension_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TimeStampIE_Extension(pub Vec<TimeStampIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "9")]
pub struct TimeStampSlotIndex_sCS_15(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "19")]
pub struct TimeStampSlotIndex_sCS_30(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "39")]
pub struct TimeStampSlotIndex_sCS_60(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "79")]
pub struct TimeStampSlotIndex_sCS_120(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TimeStampSlotIndex_choice_extensionValue {
    #[asn(key = 661)]
    Id_SCS_480(SCS_480),
    #[asn(key = 662)]
    Id_SCS_960(SCS_960),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TimeStampSlotIndex_choice_extension {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: TimeStampSlotIndex_choice_extensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "31")]
pub struct TimingMeasurementQualityMeasurementQuality(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "3")]
pub enum TimingMeasurementQualityResolution {
    M0DOT1,
    M1,
    M10,
    M30,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TimingMeasurementQualityIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TimingMeasurementQualityIE_Extensions(
    pub Vec<TimingMeasurementQualityIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TraceActivationIE_Extensions_EntryExtensionValue {
    #[asn(key = 380)]
    Id_TraceCollectionEntityURI(URI_address),
    #[asn(key = 381)]
    Id_mdtConfiguration(MDTConfiguration),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TraceActivationIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: TraceActivationIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct TraceActivationIE_Extensions(pub Vec<TraceActivationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum TraceStartProtocolIEs_EntryValue {
    #[asn(key = 242)]
    Id_TraceActivation(TraceActivation),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TraceStartProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: TraceStartProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct TraceStartProtocolIEs(pub Vec<TraceStartProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TrafficMappingInfo_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Transmission_BandwidthIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Transmission_BandwidthIE_Extensions(pub Vec<Transmission_BandwidthIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1")]
pub struct TransmissionComb_n2CombOffset_n2(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7")]
pub struct TransmissionComb_n2CyclicShift_n2(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TransmissionComb_n2 {
    pub comb_offset_n2: TransmissionComb_n2CombOffset_n2,
    pub cyclic_shift_n2: TransmissionComb_n2CyclicShift_n2,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3")]
pub struct TransmissionComb_n4CombOffset_n4(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "11")]
pub struct TransmissionComb_n4CyclicShift_n4(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TransmissionComb_n4 {
    pub comb_offset_n4: TransmissionComb_n4CombOffset_n4,
    pub cyclic_shift_n4: TransmissionComb_n4CyclicShift_n4,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TransmissionComb_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1")]
pub struct TransmissionCombPos_n2CombOffset_n2(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7")]
pub struct TransmissionCombPos_n2CyclicShift_n2(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TransmissionCombPos_n2 {
    pub comb_offset_n2: TransmissionCombPos_n2CombOffset_n2,
    pub cyclic_shift_n2: TransmissionCombPos_n2CyclicShift_n2,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3")]
pub struct TransmissionCombPos_n4CombOffset_n4(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "11")]
pub struct TransmissionCombPos_n4CyclicShift_n4(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TransmissionCombPos_n4 {
    pub comb_offset_n4: TransmissionCombPos_n4CombOffset_n4,
    pub cyclic_shift_n4: TransmissionCombPos_n4CyclicShift_n4,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "7")]
pub struct TransmissionCombPos_n8CombOffset_n8(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "5")]
pub struct TransmissionCombPos_n8CyclicShift_n8(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TransmissionCombPos_n8 {
    pub comb_offset_n8: TransmissionCombPos_n8CombOffset_n8,
    pub cyclic_shift_n8: TransmissionCombPos_n8CyclicShift_n8,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct TransmissionCombPos_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Transport_Layer_Address_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Transport_Layer_Address_InfoIE_Extensions(
    pub Vec<Transport_Layer_Address_InfoIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Transport_UP_Layer_Address_Info_To_Add_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Transport_UP_Layer_Address_Info_To_Add_ItemIE_Extensions(
    pub Vec<Transport_UP_Layer_Address_Info_To_Add_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct Transport_UP_Layer_Address_Info_To_Remove_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct Transport_UP_Layer_Address_Info_To_Remove_ItemIE_Extensions(
    pub Vec<Transport_UP_Layer_Address_Info_To_Remove_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UAC_Assistance_InfoIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UAC_Assistance_InfoIE_Extensions(pub Vec<UAC_Assistance_InfoIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UACCategoryType_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "32", ub = "63", extensible = true)]
pub struct UACOperatorDefinedAccessCategory(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "7", sz_ub = "7")]
pub struct UACOperatorDefinedAccessIdentity(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UACOperatorDefinedIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UACOperatorDefinedIE_Extensions(pub Vec<UACOperatorDefinedIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UACPLMN_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 385)]
    Id_NID(NID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UACPLMN_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: UACPLMN_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UACPLMN_ItemIE_Extensions(pub Vec<UACPLMN_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UACType_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UACType_ItemIE_Extensions(pub Vec<UACType_ItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_ConfirmedToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UE_MulticastMRBs_ConfirmedToBeModified_ItemIE_Extensions(
    pub Vec<UE_MulticastMRBs_ConfirmedToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UE_MulticastMRBs_ConfirmedToBeModified_List_EntryValue {
    #[asn(key = 654)]
    Id_UE_MulticastMRBs_ConfirmedToBeModified_Item(UE_MulticastMRBs_ConfirmedToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_ConfirmedToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UE_MulticastMRBs_ConfirmedToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum UE_MulticastMRBs_RequiredToBeModified_ItemMrb_type_reconfiguration {
    TRUE,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "5")]
pub enum UE_MulticastMRBs_RequiredToBeModified_ItemMrb_reconfigured_RLCtype {
    RLC_UM_PTP,
    RLC_AM_PTP,
    RLC_UM_DL_PTM,
    TWO_RLC_UM_DL_PTP_AND_DL_PTM,
    THREE_RLC_UM_DL_PTP_UL_PTP_DL_PTM,
    TWO_RLC_AM_PTP_UM_DL_PTM,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_RequiredToBeModified_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UE_MulticastMRBs_RequiredToBeModified_ItemIE_Extensions(
    pub Vec<UE_MulticastMRBs_RequiredToBeModified_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UE_MulticastMRBs_RequiredToBeModified_List_EntryValue {
    #[asn(key = 656)]
    Id_UE_MulticastMRBs_RequiredToBeModified_Item(UE_MulticastMRBs_RequiredToBeModified_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_RequiredToBeModified_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UE_MulticastMRBs_RequiredToBeModified_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_RequiredToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UE_MulticastMRBs_RequiredToBeReleased_ItemIE_Extensions(
    pub Vec<UE_MulticastMRBs_RequiredToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UE_MulticastMRBs_RequiredToBeReleased_List_EntryValue {
    #[asn(key = 658)]
    Id_UE_MulticastMRBs_RequiredToBeReleased_Item(UE_MulticastMRBs_RequiredToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_RequiredToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UE_MulticastMRBs_RequiredToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_ToBeReleased_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UE_MulticastMRBs_ToBeReleased_ItemIE_Extensions(
    pub Vec<UE_MulticastMRBs_ToBeReleased_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UE_MulticastMRBs_ToBeReleased_List_EntryValue {
    #[asn(key = 629)]
    Id_UE_MulticastMRBs_ToBeReleased_Item(UE_MulticastMRBs_ToBeReleased_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_ToBeReleased_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UE_MulticastMRBs_ToBeReleased_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UE_MulticastMRBs_ToBeSetup_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 671)]
    Id_Source_MRB_ID(MRB_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_ToBeSetup_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: UE_MulticastMRBs_ToBeSetup_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UE_MulticastMRBs_ToBeSetup_ItemIE_Extensions(
    pub Vec<UE_MulticastMRBs_ToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UE_MulticastMRBs_ToBeSetup_List_EntryValue {
    #[asn(key = 631)]
    Id_UE_MulticastMRBs_ToBeSetup_Item(UE_MulticastMRBs_ToBeSetup_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_MulticastMRBs_ToBeSetup_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UE_MulticastMRBs_ToBeSetup_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_associatedLogicalF1_ConnectionItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UE_associatedLogicalF1_ConnectionItemIE_Extensions(
    pub Vec<UE_associatedLogicalF1_ConnectionItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UE_associatedLogicalF1_ConnectionListRes_EntryValue {
    #[asn(key = 80)]
    Id_UE_associatedLogicalF1_ConnectionItem(UE_associatedLogicalF1_ConnectionItem),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_associatedLogicalF1_ConnectionListRes_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UE_associatedLogicalF1_ConnectionListRes_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UE_associatedLogicalF1_ConnectionListResAck_EntryValue {
    #[asn(key = 80)]
    Id_UE_associatedLogicalF1_ConnectionItem(UE_associatedLogicalF1_ConnectionItem),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UE_associatedLogicalF1_ConnectionListResAck_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UE_associatedLogicalF1_ConnectionListResAck_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextModificationConfirmProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 19)]
    Id_DRBs_ModifiedConf_List(DRBs_ModifiedConf_List),
    #[asn(key = 109)]
    Id_ExecuteDuplication(ExecuteDuplication),
    #[asn(key = 616)]
    Id_PC5RLCChannelModifiedList(PC5RLCChannelModifiedList),
    #[asn(key = 50)]
    Id_RRCContainer(RRCContainer),
    #[asn(key = 49)]
    Id_ResourceCoordinationTransferContainer(ResourceCoordinationTransferContainer),
    #[asn(key = 195)]
    Id_ResourceCoordinationTransferInformation(ResourceCoordinationTransferInformation),
    #[asn(key = 337)]
    Id_SLDRBs_ModifiedConf_List(SLDRBs_ModifiedConf_List),
    #[asn(key = 653)]
    Id_UE_MulticastMRBs_ConfirmedToBeModified_List(UE_MulticastMRBs_ConfirmedToBeModified_List),
    #[asn(key = 604)]
    Id_UuRLCChannelModifiedList(UuRLCChannelModifiedList),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextModificationConfirmProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextModificationConfirmProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextModificationConfirmProtocolIEs(
    pub Vec<UEContextModificationConfirmProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextModificationFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 376)]
    Id_requestedTargetCellGlobalID(NRCGI),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextModificationFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextModificationFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextModificationFailureProtocolIEs(
    pub Vec<UEContextModificationFailureProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextModificationRefuseProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextModificationRefuseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextModificationRefuseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextModificationRefuseProtocolIEs(
    pub Vec<UEContextModificationRefuseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextModificationRequestProtocolIEs_EntryValue {
    #[asn(key = 248)]
    Id_AdditionalRRMPriorityIndex(AdditionalRRMPriorityIndex),
    #[asn(key = 263)]
    Id_BHChannels_ToBeModified_List(BHChannels_ToBeModified_List),
    #[asn(key = 265)]
    Id_BHChannels_ToBeReleased_List(BHChannels_ToBeReleased_List),
    #[asn(key = 267)]
    Id_BHChannels_ToBeSetupMod_List(BHChannels_ToBeSetupMod_List),
    #[asn(key = 586)]
    Id_CG_SDTQueryIndication(CG_SDTQueryIndication),
    #[asn(key = 9)]
    Id_CUtoDURRCInformation(CUtoDURRCInformation),
    #[asn(key = 374)]
    Id_ConditionalIntraDUMobilityInformation(ConditionalIntraDUMobilityInformation),
    #[asn(key = 31)]
    Id_DRBs_ToBeModified_List(DRBs_ToBeModified_List),
    #[asn(key = 33)]
    Id_DRBs_ToBeReleased_List(DRBs_ToBeReleased_List),
    #[asn(key = 37)]
    Id_DRBs_ToBeSetupMod_List(DRBs_ToBeSetupMod_List),
    #[asn(key = 159)]
    Id_DRXConfigurationIndicator(DRXConfigurationIndicator),
    #[asn(key = 38)]
    Id_DRXCycle(DRXCycle),
    #[asn(key = 109)]
    Id_ExecuteDuplication(ExecuteDuplication),
    #[asn(key = 428)]
    Id_F1CTransferPath(F1CTransferPath),
    #[asn(key = 511)]
    Id_F1CTransferPathNRDC(F1CTransferPathNRDC),
    #[asn(key = 594)]
    Id_FiveG_ProSeAuthorized(FiveG_ProSeAuthorized),
    #[asn(key = 596)]
    Id_FiveG_ProSePC5LinkAMBR(BitRate),
    #[asn(key = 595)]
    Id_FiveG_ProSeUEPC5AggregateMaximumBitrate(NRUESidelinkAggregateMaximumBitrate),
    #[asn(key = 94)]
    Id_FullConfiguration(FullConfiguration),
    #[asn(key = 158)]
    Id_GNB_DU_UE_AMBR_UL(BitRate),
    #[asn(key = 162)]
    Id_GNB_DUConfigurationQuery(GNB_DUConfigurationQuery),
    #[asn(key = 626)]
    Id_GNBDUUESliceMaximumBitRateList(GNBDUUESliceMaximumBitRateList),
    #[asn(key = 510)]
    Id_IABConditionalRRCMessageDeliveryIndication(IABConditionalRRCMessageDeliveryIndication),
    #[asn(key = 97)]
    Id_InactivityMonitoringRequest(InactivityMonitoringRequest),
    #[asn(key = 309)]
    Id_LTEUESidelinkAggregateMaximumBitrate(LTEUESidelinkAggregateMaximumBitrate),
    #[asn(key = 307)]
    Id_LTEV2XServicesAuthorized(LTEV2XServicesAuthorized),
    #[asn(key = 253)]
    Id_LowerLayerPresenceStatusChange(LowerLayerPresenceStatusChange),
    #[asn(key = 536)]
    Id_MDTPollutedMeasurementIndicator(MDTPollutedMeasurementIndicator),
    #[asn(key = 647)]
    Id_ManagementBasedMDTPLMNModificationList(MDTPLMNModificationList),
    #[asn(key = 633)]
    Id_MulticastMBSSessionRemoveList(MulticastMBSSessionList),
    #[asn(key = 632)]
    Id_MulticastMBSSessionSetupList(MulticastMBSSessionList),
    #[asn(key = 308)]
    Id_NRUESidelinkAggregateMaximumBitrate(NRUESidelinkAggregateMaximumBitrate),
    #[asn(key = 306)]
    Id_NRV2XServicesAuthorized(NRV2XServicesAuthorized),
    #[asn(key = 215)]
    Id_NeedforGap(NeedforGap),
    #[asn(key = 340)]
    Id_PC5LinkAMBR(BitRate),
    #[asn(key = 609)]
    Id_PC5RLCChannelToBeModifiedList(PC5RLCChannelToBeModifiedList),
    #[asn(key = 610)]
    Id_PC5RLCChannelToBeReleasedList(PC5RLCChannelToBeReleasedList),
    #[asn(key = 608)]
    Id_PC5RLCChannelToBeSetupList(PC5RLCChannelToBeSetupList),
    #[asn(key = 619)]
    Id_PathSwitchConfiguration(PathSwitchConfiguration),
    #[asn(key = 108)]
    Id_RAT_FrequencyPriorityInformation(RAT_FrequencyPriorityInformation),
    #[asn(key = 174)]
    Id_RLCFailureIndication(RLCFailureIndication),
    #[asn(key = 50)]
    Id_RRCContainer(RRCContainer),
    #[asn(key = 184)]
    Id_RRCDeliveryStatusRequest(RRCDeliveryStatusRequest),
    #[asn(key = 87)]
    Id_RRCReconfigurationCompleteIndicator(RRCReconfigurationCompleteIndicator),
    #[asn(key = 49)]
    Id_ResourceCoordinationTransferContainer(ResourceCoordinationTransferContainer),
    #[asn(key = 195)]
    Id_ResourceCoordinationTransferInformation(ResourceCoordinationTransferInformation),
    #[asn(key = 547)]
    Id_SCGActivationRequest(SCGActivationRequest),
    #[asn(key = 432)]
    Id_SCGIndicator(SCGIndicator),
    #[asn(key = 52)]
    Id_SCell_ToBeRemoved_List(SCell_ToBeRemoved_List),
    #[asn(key = 56)]
    Id_SCell_ToBeSetupMod_List(SCell_ToBeSetupMod_List),
    #[asn(key = 675)]
    Id_SDTBearerConfigurationQueryIndication(SDTBearerConfigurationQueryIndication),
    #[asn(key = 326)]
    Id_SLDRBs_ToBeModified_List(SLDRBs_ToBeModified_List),
    #[asn(key = 328)]
    Id_SLDRBs_ToBeReleased_List(SLDRBs_ToBeReleased_List),
    #[asn(key = 332)]
    Id_SLDRBs_ToBeSetupMod_List(SLDRBs_ToBeSetupMod_List),
    #[asn(key = 643)]
    Id_SLDRXCycleList(SLDRXCycleList),
    #[asn(key = 72)]
    Id_SRBs_ToBeReleased_List(SRBs_ToBeReleased_List),
    #[asn(key = 76)]
    Id_SRBs_ToBeSetupMod_List(SRBs_ToBeSetupMod_List),
    #[asn(key = 107)]
    Id_ServCellIndex(ServCellIndex),
    #[asn(key = 182)]
    Id_ServingCellMO(ServingCellMO),
    #[asn(key = 63)]
    Id_SpCell_ID(NRCGI),
    #[asn(key = 96)]
    Id_SpCellULConfigured(CellULConfigured),
    #[asn(key = 79)]
    Id_TransmissionActionIndicator(TransmissionActionIndicator),
    #[asn(key = 628)]
    Id_UE_MulticastMRBs_ToBeReleased_List(UE_MulticastMRBs_ToBeReleased_List),
    #[asn(key = 630)]
    Id_UE_MulticastMRBs_ToBeSetup_List(UE_MulticastMRBs_ToBeSetup_List),
    #[asn(key = 618)]
    Id_UpdatedRemoteUELocalID(RemoteUELocalID),
    #[asn(key = 175)]
    Id_UplinkTxDirectCurrentListInformation(UplinkTxDirectCurrentListInformation),
    #[asn(key = 600)]
    Id_UuRLCChannelToBeModifiedList(UuRLCChannelToBeModifiedList),
    #[asn(key = 601)]
    Id_UuRLCChannelToBeReleasedList(UuRLCChannelToBeReleasedList),
    #[asn(key = 599)]
    Id_UuRLCChannelToBeSetupList(UuRLCChannelToBeSetupList),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextModificationRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextModificationRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextModificationRequestProtocolIEs(
    pub Vec<UEContextModificationRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextModificationRequiredProtocolIEs_EntryValue {
    #[asn(key = 277)]
    Id_BHChannels_Required_ToBeReleased_List(BHChannels_Required_ToBeReleased_List),
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 23)]
    Id_DRBs_Required_ToBeModified_List(DRBs_Required_ToBeModified_List),
    #[asn(key = 25)]
    Id_DRBs_Required_ToBeReleased_List(DRBs_Required_ToBeReleased_List),
    #[asn(key = 39)]
    Id_DUtoCURRCInformation(DUtoCURRCInformation),
    #[asn(key = 614)]
    Id_PC5RLCChannelRequiredToBeModifiedList(PC5RLCChannelRequiredToBeModifiedList),
    #[asn(key = 615)]
    Id_PC5RLCChannelRequiredToBeReleasedList(PC5RLCChannelRequiredToBeReleasedList),
    #[asn(key = 49)]
    Id_ResourceCoordinationTransferContainer(ResourceCoordinationTransferContainer),
    #[asn(key = 320)]
    Id_SLDRBs_Required_ToBeModified_List(SLDRBs_Required_ToBeModified_List),
    #[asn(key = 322)]
    Id_SLDRBs_Required_ToBeReleased_List(SLDRBs_Required_ToBeReleased_List),
    #[asn(key = 70)]
    Id_SRBs_Required_ToBeReleased_List(SRBs_Required_ToBeReleased_List),
    #[asn(key = 655)]
    Id_UE_MulticastMRBs_RequiredToBeModified_List(UE_MulticastMRBs_RequiredToBeModified_List),
    #[asn(key = 657)]
    Id_UE_MulticastMRBs_RequiredToBeReleased_List(UE_MulticastMRBs_RequiredToBeReleased_List),
    #[asn(key = 606)]
    Id_UuRLCChannelRequiredToBeModifiedList(UuRLCChannelRequiredToBeModifiedList),
    #[asn(key = 607)]
    Id_UuRLCChannelRequiredToBeReleasedList(UuRLCChannelRequiredToBeReleasedList),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 375)]
    Id_targetCellsToCancel(TargetCellList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextModificationRequiredProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextModificationRequiredProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextModificationRequiredProtocolIEs(
    pub Vec<UEContextModificationRequiredProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextModificationResponseProtocolIEs_EntryValue {
    #[asn(key = 198)]
    Id_Associated_SCell_List(Associated_SCell_List),
    #[asn(key = 269)]
    Id_BHChannels_FailedToBeModified_List(BHChannels_FailedToBeModified_List),
    #[asn(key = 271)]
    Id_BHChannels_FailedToBeSetupMod_List(BHChannels_FailedToBeSetupMod_List),
    #[asn(key = 273)]
    Id_BHChannels_Modified_List(BHChannels_Modified_List),
    #[asn(key = 275)]
    Id_BHChannels_SetupMod_List(BHChannels_SetupMod_List),
    #[asn(key = 95)]
    Id_C_RNTI(C_RNTI),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 13)]
    Id_DRBs_FailedToBeModified_List(DRBs_FailedToBeModified_List),
    #[asn(key = 17)]
    Id_DRBs_FailedToBeSetupMod_List(DRBs_FailedToBeSetupMod_List),
    #[asn(key = 21)]
    Id_DRBs_Modified_List(DRBs_Modified_List),
    #[asn(key = 29)]
    Id_DRBs_SetupMod_List(DRBs_SetupMod_List),
    #[asn(key = 39)]
    Id_DUtoCURRCInformation(DUtoCURRCInformation),
    #[asn(key = 94)]
    Id_FullConfiguration(FullConfiguration),
    #[asn(key = 98)]
    Id_InactivityMonitoringResponse(InactivityMonitoringResponse),
    #[asn(key = 613)]
    Id_PC5RLCChannelFailedToBeModifiedList(PC5RLCChannelFailedToBeModifiedList),
    #[asn(key = 612)]
    Id_PC5RLCChannelFailedToBeSetupList(PC5RLCChannelFailedToBeSetupList),
    #[asn(key = 616)]
    Id_PC5RLCChannelModifiedList(PC5RLCChannelModifiedList),
    #[asn(key = 611)]
    Id_PC5RLCChannelSetupList(PC5RLCChannelSetupList),
    #[asn(key = 49)]
    Id_ResourceCoordinationTransferContainer(ResourceCoordinationTransferContainer),
    #[asn(key = 548)]
    Id_SCGActivationStatus(SCGActivationStatus),
    #[asn(key = 85)]
    Id_SCell_FailedtoSetupMod_List(SCell_FailedtoSetupMod_List),
    #[asn(key = 676)]
    Id_SDTBearerConfigurationInfo(SDTBearerConfigurationInfo),
    #[asn(key = 314)]
    Id_SLDRBs_FailedToBeModified_List(SLDRBs_FailedToBeModified_List),
    #[asn(key = 334)]
    Id_SLDRBs_FailedToBeSetupMod_List(SLDRBs_FailedToBeSetupMod_List),
    #[asn(key = 318)]
    Id_SLDRBs_Modified_List(SLDRBs_Modified_List),
    #[asn(key = 333)]
    Id_SLDRBs_SetupMod_List(SLDRBs_SetupMod_List),
    #[asn(key = 68)]
    Id_SRBs_FailedToBeSetupMod_List(SRBs_FailedToBeSetupMod_List),
    #[asn(key = 206)]
    Id_SRBs_Modified_List(SRBs_Modified_List),
    #[asn(key = 204)]
    Id_SRBs_SetupMod_List(SRBs_SetupMod_List),
    #[asn(key = 605)]
    Id_UuRLCChannelFailedToBeModifiedList(UuRLCChannelFailedToBeModifiedList),
    #[asn(key = 603)]
    Id_UuRLCChannelFailedToBeSetupList(UuRLCChannelFailedToBeSetupList),
    #[asn(key = 604)]
    Id_UuRLCChannelModifiedList(UuRLCChannelModifiedList),
    #[asn(key = 602)]
    Id_UuRLCChannelSetupList(UuRLCChannelSetupList),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 376)]
    Id_requestedTargetCellGlobalID(NRCGI),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextModificationResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextModificationResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextModificationResponseProtocolIEs(
    pub Vec<UEContextModificationResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextReleaseCommandProtocolIEs_EntryValue {
    #[asn(key = 588)]
    Id_CG_SDTKeptIndicator(CG_SDTKeptIndicator),
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 109)]
    Id_ExecuteDuplication(ExecuteDuplication),
    #[asn(key = 576)]
    Id_PosConextRevIndication(PosConextRevIndication),
    #[asn(key = 50)]
    Id_RRCContainer(RRCContainer),
    #[asn(key = 184)]
    Id_RRCDeliveryStatusRequest(RRCDeliveryStatusRequest),
    #[asn(key = 64)]
    Id_SRBID(SRBID),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 47)]
    Id_oldgNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 375)]
    Id_targetCellsToCancel(TargetCellList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextReleaseCommandProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextReleaseCommandProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextReleaseCommandProtocolIEs(pub Vec<UEContextReleaseCommandProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextReleaseCompleteProtocolIEs_EntryValue {
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextReleaseCompleteProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextReleaseCompleteProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextReleaseCompleteProtocolIEs(pub Vec<UEContextReleaseCompleteProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextReleaseRequestProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 375)]
    Id_targetCellsToCancel(TargetCellList),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextReleaseRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextReleaseRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextReleaseRequestProtocolIEs(pub Vec<UEContextReleaseRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextSetupFailureProtocolIEs_EntryValue {
    #[asn(key = 0)]
    Id_Cause(Cause),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 92)]
    Id_Potential_SpCell_List(Potential_SpCell_List),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 376)]
    Id_requestedTargetCellGlobalID(NRCGI),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextSetupFailureProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextSetupFailureProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextSetupFailureProtocolIEs(pub Vec<UEContextSetupFailureProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextSetupRequestProtocolIEs_EntryValue {
    #[asn(key = 248)]
    Id_AdditionalRRMPriorityIndex(AdditionalRRMPriorityIndex),
    #[asn(key = 258)]
    Id_BHChannels_ToBeSetup_List(BHChannels_ToBeSetup_List),
    #[asn(key = 591)]
    Id_CG_SDTSessionInfoOld(CG_SDTSessionInfo),
    #[asn(key = 9)]
    Id_CUtoDURRCInformation(CUtoDURRCInformation),
    #[asn(key = 90)]
    Id_Candidate_SpCell_List(Candidate_SpCell_List),
    #[asn(key = 373)]
    Id_ConditionalInterDUMobilityInformation(ConditionalInterDUMobilityInformation),
    #[asn(key = 282)]
    Id_ConfiguredBAPAddress(BAPAddress),
    #[asn(key = 35)]
    Id_DRBs_ToBeSetup_List(DRBs_ToBeSetup_List),
    #[asn(key = 38)]
    Id_DRXCycle(DRXCycle),
    #[asn(key = 428)]
    Id_F1CTransferPath(F1CTransferPath),
    #[asn(key = 511)]
    Id_F1CTransferPathNRDC(F1CTransferPathNRDC),
    #[asn(key = 594)]
    Id_FiveG_ProSeAuthorized(FiveG_ProSeAuthorized),
    #[asn(key = 596)]
    Id_FiveG_ProSePC5LinkAMBR(BitRate),
    #[asn(key = 595)]
    Id_FiveG_ProSeUEPC5AggregateMaximumBitrate(NRUESidelinkAggregateMaximumBitrate),
    #[asn(key = 158)]
    Id_GNB_DU_UE_AMBR_UL(BitRate),
    #[asn(key = 626)]
    Id_GNBDUUESliceMaximumBitRateList(GNBDUUESliceMaximumBitRateList),
    #[asn(key = 97)]
    Id_InactivityMonitoringRequest(InactivityMonitoringRequest),
    #[asn(key = 309)]
    Id_LTEUESidelinkAggregateMaximumBitrate(LTEUESidelinkAggregateMaximumBitrate),
    #[asn(key = 307)]
    Id_LTEV2XServicesAuthorized(LTEV2XServicesAuthorized),
    #[asn(key = 536)]
    Id_MDTPollutedMeasurementIndicator(MDTPollutedMeasurementIndicator),
    #[asn(key = 377)]
    Id_ManagementBasedMDTPLMNList(MDTPLMNList),
    #[asn(key = 126)]
    Id_MaskedIMEISV(MaskedIMEISV),
    #[asn(key = 632)]
    Id_MulticastMBSSessionSetupList(MulticastMBSSessionList),
    #[asn(key = 308)]
    Id_NRUESidelinkAggregateMaximumBitrate(NRUESidelinkAggregateMaximumBitrate),
    #[asn(key = 306)]
    Id_NRV2XServicesAuthorized(NRV2XServicesAuthorized),
    #[asn(key = 340)]
    Id_PC5LinkAMBR(BitRate),
    #[asn(key = 608)]
    Id_PC5RLCChannelToBeSetupList(PC5RLCChannelToBeSetupList),
    #[asn(key = 619)]
    Id_PathSwitchConfiguration(PathSwitchConfiguration),
    #[asn(key = 226)]
    Id_RANUEID(RANUEID),
    #[asn(key = 108)]
    Id_RAT_FrequencyPriorityInformation(RAT_FrequencyPriorityInformation),
    #[asn(key = 50)]
    Id_RRCContainer(RRCContainer),
    #[asn(key = 184)]
    Id_RRCDeliveryStatusRequest(RRCDeliveryStatusRequest),
    #[asn(key = 49)]
    Id_ResourceCoordinationTransferContainer(ResourceCoordinationTransferContainer),
    #[asn(key = 195)]
    Id_ResourceCoordinationTransferInformation(ResourceCoordinationTransferInformation),
    #[asn(key = 547)]
    Id_SCGActivationRequest(SCGActivationRequest),
    #[asn(key = 54)]
    Id_SCell_ToBeSetup_List(SCell_ToBeSetup_List),
    #[asn(key = 330)]
    Id_SLDRBs_ToBeSetup_List(SLDRBs_ToBeSetup_List),
    #[asn(key = 74)]
    Id_SRBs_ToBeSetup_List(SRBs_ToBeSetup_List),
    #[asn(key = 107)]
    Id_ServCellIndex(ServCellIndex),
    #[asn(key = 182)]
    Id_ServingCellMO(ServingCellMO),
    #[asn(key = 382)]
    Id_ServingNID(NID),
    #[asn(key = 165)]
    Id_ServingPLMN(PLMN_Identity),
    #[asn(key = 63)]
    Id_SpCell_ID(NRCGI),
    #[asn(key = 96)]
    Id_SpCellULConfigured(CellULConfigured),
    #[asn(key = 242)]
    Id_TraceActivation(TraceActivation),
    #[asn(key = 630)]
    Id_UE_MulticastMRBs_ToBeSetup_List(UE_MulticastMRBs_ToBeSetup_List),
    #[asn(key = 599)]
    Id_UuRLCChannelToBeSetupList(UuRLCChannelToBeSetupList),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 217)]
    Id_new_gNB_CU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextSetupRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextSetupRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextSetupRequestProtocolIEs(pub Vec<UEContextSetupRequestProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEContextSetupResponseProtocolIEs_EntryValue {
    #[asn(key = 279)]
    Id_BHChannels_FailedToBeSetup_List(BHChannels_FailedToBeSetup_List),
    #[asn(key = 260)]
    Id_BHChannels_Setup_List(BHChannels_Setup_List),
    #[asn(key = 95)]
    Id_C_RNTI(C_RNTI),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 15)]
    Id_DRBs_FailedToBeSetup_List(DRBs_FailedToBeSetup_List),
    #[asn(key = 27)]
    Id_DRBs_Setup_List(DRBs_Setup_List),
    #[asn(key = 39)]
    Id_DUtoCURRCInformation(DUtoCURRCInformation),
    #[asn(key = 94)]
    Id_FullConfiguration(FullConfiguration),
    #[asn(key = 98)]
    Id_InactivityMonitoringResponse(InactivityMonitoringResponse),
    #[asn(key = 612)]
    Id_PC5RLCChannelFailedToBeSetupList(PC5RLCChannelFailedToBeSetupList),
    #[asn(key = 611)]
    Id_PC5RLCChannelSetupList(PC5RLCChannelSetupList),
    #[asn(key = 49)]
    Id_ResourceCoordinationTransferContainer(ResourceCoordinationTransferContainer),
    #[asn(key = 548)]
    Id_SCGActivationStatus(SCGActivationStatus),
    #[asn(key = 83)]
    Id_SCell_FailedtoSetup_List(SCell_FailedtoSetup_List),
    #[asn(key = 316)]
    Id_SLDRBs_FailedToBeSetup_List(SLDRBs_FailedToBeSetup_List),
    #[asn(key = 324)]
    Id_SLDRBs_Setup_List(SLDRBs_Setup_List),
    #[asn(key = 66)]
    Id_SRBs_FailedToBeSetup_List(SRBs_FailedToBeSetup_List),
    #[asn(key = 202)]
    Id_SRBs_Setup_List(SRBs_Setup_List),
    #[asn(key = 603)]
    Id_UuRLCChannelFailedToBeSetupList(UuRLCChannelFailedToBeSetupList),
    #[asn(key = 602)]
    Id_UuRLCChannelSetupList(UuRLCChannelSetupList),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 376)]
    Id_requestedTargetCellGlobalID(NRCGI),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEContextSetupResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEContextSetupResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEContextSetupResponseProtocolIEs(pub Vec<UEContextSetupResponseProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEIdentity_List_For_Paging_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UEIdentity_List_For_Paging_ItemIE_Extensions(
    pub Vec<UEIdentity_List_For_Paging_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEIdentity_List_For_Paging_List_EntryValue {
    #[asn(key = 480)]
    Id_UEIdentity_List_For_Paging_Item(UEIdentity_List_For_Paging_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEIdentity_List_For_Paging_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEIdentity_List_For_Paging_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "BITSTRING", sz_extensible = false, sz_lb = "10", sz_ub = "10")]
pub struct UEIdentityIndexValue_indexLength10(pub bitvec::vec::BitVec<u8, bitvec::order::Msb0>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEIdentityIndexValue_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEInactivityNotificationProtocolIEs_EntryValue {
    #[asn(key = 100)]
    Id_DRB_Activity_List(DRB_Activity_List),
    #[asn(key = 635)]
    Id_SDT_Termination_Request(SDT_Termination_Request),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEInactivityNotificationProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UEInactivityNotificationProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct UEInactivityNotificationProtocolIEs(pub Vec<UEInactivityNotificationProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "0")]
pub enum UEPagingCapabilityINACTIVEStatePODetermination {
    SUPPORTED,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UEPagingCapabilityIE_Extension_EntryExtensionValue {
    #[asn(key = 673)]
    Id_RedCapIndication(RedCapIndication),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEPagingCapabilityIE_Extension_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: UEPagingCapabilityIE_Extension_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UEPagingCapabilityIE_Extension(pub Vec<UEPagingCapabilityIE_Extension_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", lb = "0", ub = "7")]
pub enum UEReportingInformationReportingAmount {
    MA0,
    MA1,
    MA2,
    MA4,
    MA8,
    MA16,
    MA32,
    MA64,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "9")]
pub enum UEReportingInformationReportingInterval {
    NONE,
    ONE,
    TWO,
    FOUR,
    EIGHT,
    TEN,
    SIXTEEN,
    TWENTY,
    THIRTY_TWO,
    SIXTY_FOUR,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UEReportingInformationIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UEReportingInformationIE_extensions(pub Vec<UEReportingInformationIE_extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "3599")]
pub struct UL_AoAAzimuthAoA(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1799")]
pub struct UL_AoAZenithAoA(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_AoAIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UL_AoAIE_extensions(pub Vec<UL_AoAIE_extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_BH_Non_UP_Traffic_MappingIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UL_BH_Non_UP_Traffic_MappingIE_Extensions(
    pub Vec<UL_BH_Non_UP_Traffic_MappingIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_BH_Non_UP_Traffic_Mapping_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UL_BH_Non_UP_Traffic_Mapping_ItemIE_Extensions(
    pub Vec<UL_BH_Non_UP_Traffic_Mapping_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_RTOA_MeasurementIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UL_RTOA_MeasurementIE_Extensions(pub Vec<UL_RTOA_MeasurementIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1970049")]
pub struct UL_RTOA_MeasurementItem_k0(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "985025")]
pub struct UL_RTOA_MeasurementItem_k1(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "492513")]
pub struct UL_RTOA_MeasurementItem_k2(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "246257")]
pub struct UL_RTOA_MeasurementItem_k3(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "123129")]
pub struct UL_RTOA_MeasurementItem_k4(pub u32);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "61565")]
pub struct UL_RTOA_MeasurementItem_k5(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UL_RTOA_MeasurementItem_choice_extensionValue {
    #[asn(key = 561)]
    Id_ExtendedAdditionalPathList(ExtendedAdditionalPathList),
    #[asn(key = 669)]
    Id_TRPRxTimingErrorMargin(TimingErrorMargin),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_RTOA_MeasurementItem_choice_extension {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UL_RTOA_MeasurementItem_choice_extensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "126")]
pub struct UL_SRS_RSRPPFirstPathRSRPP(pub u8);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_SRS_RSRPPIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UL_SRS_RSRPPIE_extensions(pub Vec<UL_SRS_RSRPPIE_extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UL_UP_TNL_Address_to_Update_List_EntryValue {
    #[asn(key = 303)]
    Id_UL_UP_TNL_Address_to_Update_List_Item(UL_UP_TNL_Address_to_Update_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_UP_TNL_Address_to_Update_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UL_UP_TNL_Address_to_Update_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_UP_TNL_Address_to_Update_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UL_UP_TNL_Address_to_Update_List_ItemIE_Extensions(
    pub Vec<UL_UP_TNL_Address_to_Update_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UL_UP_TNL_Information_to_Update_List_EntryValue {
    #[asn(key = 301)]
    Id_UL_UP_TNL_Information_to_Update_List_Item(UL_UP_TNL_Information_to_Update_List_Item),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_UP_TNL_Information_to_Update_List_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: UL_UP_TNL_Information_to_Update_List_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UL_UP_TNL_Information_to_Update_List_ItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UL_UP_TNL_Information_to_Update_List_ItemIE_Extensions(
    pub Vec<UL_UP_TNL_Information_to_Update_List_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ULConfigurationIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ULConfigurationIE_Extensions(pub Vec<ULConfigurationIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ULRRCMessageTransferProtocolIEs_EntryValue {
    #[asn(key = 50)]
    Id_RRCContainer(RRCContainer),
    #[asn(key = 64)]
    Id_SRBID(SRBID),
    #[asn(key = 224)]
    Id_SelectedPLMNID(PLMN_Identity),
    #[asn(key = 40)]
    Id_gNB_CU_UE_F1AP_ID(GNB_CU_UE_F1AP_ID),
    #[asn(key = 41)]
    Id_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
    #[asn(key = 219)]
    Id_new_gNB_DU_UE_F1AP_ID(GNB_DU_UE_F1AP_ID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ULRRCMessageTransferProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: ULRRCMessageTransferProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct ULRRCMessageTransferProtocolIEs(pub Vec<ULRRCMessageTransferProtocolIEs_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum ULUPTNLInformation_ToBeSetup_ItemIE_Extensions_EntryExtensionValue {
    #[asn(key = 280)]
    Id_BHInfo(BHInfo),
    #[asn(key = 598)]
    Id_DRBMappingInfo(UuRLCChannelID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ULUPTNLInformation_ToBeSetup_ItemIE_Extensions_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolExtensionID,
    pub criticality: Criticality,
    pub extension_value: ULUPTNLInformation_ToBeSetup_ItemIE_Extensions_EntryExtensionValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ULUPTNLInformation_ToBeSetup_ItemIE_Extensions(
    pub Vec<ULUPTNLInformation_ToBeSetup_ItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UPTransportLayerInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum UnsuccessfulOutcomeValue {
    #[asn(key = 32)]
    Id_BAPMappingConfiguration(BAPMappingConfigurationFailure),
    #[asn(key = 62)]
    Id_BroadcastContextModification(BroadcastContextModificationFailure),
    #[asn(key = 59)]
    Id_BroadcastContextSetup(BroadcastContextSetupFailure),
    #[asn(key = 52)]
    Id_E_CIDMeasurementInitiation(E_CIDMeasurementInitiationFailure),
    #[asn(key = 26)]
    Id_F1Removal(F1RemovalFailure),
    #[asn(key = 1)]
    Id_F1Setup(F1SetupFailure),
    #[asn(key = 33)]
    Id_GNBDUResourceConfiguration(GNBDUResourceConfigurationFailure),
    #[asn(key = 34)]
    Id_IABTNLAddressAllocation(IABTNLAddressFailure),
    #[asn(key = 35)]
    Id_IABUPConfigurationUpdate(IABUPConfigurationUpdateFailure),
    #[asn(key = 67)]
    Id_MulticastContextModification(MulticastContextModificationFailure),
    #[asn(key = 64)]
    Id_MulticastContextSetup(MulticastContextSetupFailure),
    #[asn(key = 68)]
    Id_MulticastDistributionSetup(MulticastDistributionSetupFailure),
    #[asn(key = 70)]
    Id_PDCMeasurementInitiation(PDCMeasurementInitiationFailure),
    #[asn(key = 50)]
    Id_PositioningActivation(PositioningActivationFailure),
    #[asn(key = 49)]
    Id_PositioningInformationExchange(PositioningInformationFailure),
    #[asn(key = 41)]
    Id_PositioningMeasurementExchange(PositioningMeasurementFailure),
    #[asn(key = 48)]
    Id_TRPInformationExchange(TRPInformationFailure),
    #[asn(key = 7)]
    Id_UEContextModification(UEContextModificationFailure),
    #[asn(key = 8)]
    Id_UEContextModificationRequired(UEContextModificationRefuse),
    #[asn(key = 5)]
    Id_UEContextSetup(UEContextSetupFailure),
    #[asn(key = 4)]
    Id_gNBCUConfigurationUpdate(GNBCUConfigurationUpdateFailure),
    #[asn(key = 3)]
    Id_gNBDUConfigurationUpdate(GNBDUConfigurationUpdateFailure),
    #[asn(key = 76)]
    Id_measurementPreconfiguration(MeasurementPreconfigurationRefuse),
    #[asn(key = 75)]
    Id_pRSConfigurationExchange(PRSConfigurationFailure),
    #[asn(key = 36)]
    Id_resourceStatusReportingInitiation(ResourceStatusFailure),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelFailedToBeModifiedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelFailedToBeModifiedItemIE_Extensions(
    pub Vec<UuRLCChannelFailedToBeModifiedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelFailedToBeSetupItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelFailedToBeSetupItemIE_Extensions(
    pub Vec<UuRLCChannelFailedToBeSetupItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelModifiedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelModifiedItemIE_Extensions(
    pub Vec<UuRLCChannelModifiedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "ENUMERATED", extensible = true, lb = "0", ub = "2")]
pub enum UuRLCChannelQoSInformation_uuControlPlaneTrafficType {
    SRB0,
    SRB1,
    SRB2,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelQoSInformation_choice_extension {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelRequiredToBeModifiedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelRequiredToBeModifiedItemIE_Extensions(
    pub Vec<UuRLCChannelRequiredToBeModifiedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelRequiredToBeReleasedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelRequiredToBeReleasedItemIE_Extensions(
    pub Vec<UuRLCChannelRequiredToBeReleasedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelSetupItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelSetupItemIE_Extensions(pub Vec<UuRLCChannelSetupItemIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelToBeModifiedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelToBeModifiedItemIE_Extensions(
    pub Vec<UuRLCChannelToBeModifiedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelToBeReleasedItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelToBeReleasedItemIE_Extensions(
    pub Vec<UuRLCChannelToBeReleasedItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct UuRLCChannelToBeSetupItemIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct UuRLCChannelToBeSetupItemIE_Extensions(
    pub Vec<UuRLCChannelToBeSetupItemIE_Extensions_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct VictimgNBSetIDIE_Extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct VictimgNBSetIDIE_Extensions(pub Vec<VictimgNBSetIDIE_Extensions_Entry>);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum WriteReplaceWarningRequestProtocolIEs_EntryValue {
    #[asn(key = 144)]
    Id_Cells_To_Be_Broadcast_List(Cells_To_Be_Broadcast_List),
    #[asn(key = 142)]
    Id_NumberofBroadcastRequest(NumberofBroadcastRequest),
    #[asn(key = 140)]
    Id_PWSSystemInformation(PWSSystemInformation),
    #[asn(key = 141)]
    Id_RepetitionPeriod(RepetitionPeriod),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct WriteReplaceWarningRequestProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: WriteReplaceWarningRequestProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct WriteReplaceWarningRequestProtocolIEs(
    pub Vec<WriteReplaceWarningRequestProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "OPEN")]
pub enum WriteReplaceWarningResponseProtocolIEs_EntryValue {
    #[asn(key = 146)]
    Id_Cells_Broadcast_Completed_List(Cells_Broadcast_Completed_List),
    #[asn(key = 7)]
    Id_CriticalityDiagnostics(CriticalityDiagnostics),
    #[asn(key = 189)]
    Id_Dedicated_SIDelivery_NeededUE_List(Dedicated_SIDelivery_NeededUE_List),
    #[asn(key = 78)]
    Id_TransactionID(TransactionID),
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct WriteReplaceWarningResponseProtocolIEs_Entry {
    #[asn(key_field = true)]
    pub id: ProtocolIE_ID,
    pub criticality: Criticality,
    pub value: WriteReplaceWarningResponseProtocolIEs_EntryValue,
}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "0",
    sz_ub = "65535"
)]
pub struct WriteReplaceWarningResponseProtocolIEs(
    pub Vec<WriteReplaceWarningResponseProtocolIEs_Entry>,
);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "INTEGER", lb = "0", ub = "1799")]
pub struct ZoAInformationZenithAoA(pub u16);

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(type = "SEQUENCE", extensible = false)]
pub struct ZoAInformationIE_extensions_Entry {}

#[derive(asn1_codecs_derive :: AperCodec, Debug)]
#[asn(
    type = "SEQUENCE-OF",
    sz_extensible = false,
    sz_lb = "1",
    sz_ub = "65535"
)]
pub struct ZoAInformationIE_extensions(pub Vec<ZoAInformationIE_extensions_Entry>);
